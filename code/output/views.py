from time           import strftime
from datetime       import datetime     
from pprint         import pprint,pformat                    
from sqlalchemy     import exc
from sqlalchemy     import func
from flask          import render_template, session, redirect, url_for, current_app, flash
from flask          import request
from flask          import Markup
from flask_login    import login_required
from flask_login    import current_user
#from ..email import send_email

from .              import main

from ..             import db
from ..             import logger

from ..decorators   import admin_required, permission_required

from emtec                                 import *
#rom emtec.collector.common.functions      import *
from emtec.common.functions                import *
from emtec.collector.db.flask_models       import User
from emtec.collector.db.flask_models       import Permission
# 20200224 GV from emtec.collector.db.orm_model          import Interface
from emtec.collector.db.flask_models       import *
from emtec.collector.db.orm_model          import *
from emtec.api                             import *

""" Application decorators for routes """
""" Decorators specify main routes to be handled by Collector Solution """

@main.route('/', methods=['GET', 'POST'])
def index():
    
    # Espera a capitulo 3 para mejorar procedimiento de respuesta, hard coding mucho aqui
    
    # Aqui debo setear el ambiente de variables de periodo -------------
    try:
        Period = get_period_data(current_user.id,db.engine,Interface)
    except:
        Period = get_period_data()
    # ------------------------------------------------------------------
    # Setup all data to render in template
    data =  {   "name":current_app.name,
                "app_name":current_app.name,
                "date_time":strftime('%Y-%m-%d %H:%M:%S'),
                "user_agent":request.headers.get('User-Agent'),
                "db":db,
                "logger":logger,
                "VERSION_MAYOR":VERSION_MAYOR,
                "VERSION_MINOR":VERSION_MINOR,
                "VERSION_PATCH":VERSION_PATCH,
            }
    collectordata={
                "COLLECTOR_PERIOD":Period,
    }
    return render_template('collector.html',data=data,collectordata=collectordata)

@main.route('/under_construction', methods=['GET','POST'])
def under_construction():   
    return render_template('under_construction.html')

@main.route('/demo', methods=['GET','POST'])
def demo():   
    return render_template('demo.html')

@main.route('/test_index', methods=['GET', 'POST'])
def test_index():
    
    # Espera a capitulo 3 para mejorar procedimiento de respuesta, hard coding mucho aqui

    if logger is not None:
        logger.debug("index() IN")
    else:
        print("*** WARNING *** Route: test_index: logger is undefined. !!! No logging functions possible. !!!")

    data =  {   "name":current_app.name,
                "app_name":C.app_name,
                "date_time":strftime('%Y-%m-%d %H:%M:%S'),
                "user_agent":request.headers.get('User-Agent'),
                "current_time":datetime.utcnow(),
                "db":db,
                "logger":logger,
                "C":C,
                "C.db":C.db,
                "C.logger":C.logger,
                "current_app":current_app,
                "current_app_dir":dir(current_app),
                "current_app_app_context":current_app.app_context(),
                "current_app_app_context DIR":dir(current_app.app_context()),
                }
    name = None
    password = None
    form = NameForm()

    return render_template('test.html',data=data, name=name,password=password, form=form)

''' GV 20210430
@main.route('/collector_faq', methods=['GET','POST'])
def collector_faq():   
    return render_template('collector_faq.html')

@main.route('/collector_about', methods=['GET','POST'])
def collector_about():   
    return render_template('collector_about.html')
'''

# Flask Caching avoider
@main.after_request
def add_header(r):
    """
    Add headers to both force latest IE rendering engine or Chrome Frame,
    and also to cache the rendered page for 10 minuyes.
    """
    r.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
    r.headers["Pragma"] = "no-cache"
    r.headers["Expires"] = "0"
    r.headers["Cache-Control"] = "public, max-age=0"
    return r

# Application specific functions
# ----------------------------------------------------------------------
# This function is intented to define dinamic context data
# Collector Charge Items sharding period and table setup
# A context 'collectordata' object is returned
# ----------------------------------------------------------------------
def get_collectordata():
    collectordata = {}
    # Here we'll include al important Collector context data 
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    dt = datetime.strptime(suffix,"%Y%m")
    start,end = Get_Period(dt,PERIOD_MONTH)
    collectordata['COLLECTOR_PERIOD'].update({'start':start,'end':end})
    logger.debug(f"{this()}: dt: {dt} suffix={suffix}") 
    logger.debug(f"{this()}: COLLECTOR_PERIOD={collectordata['COLLECTOR_PERIOD']}") 
    
    sharding = False
    # Here we'll include sharding required code
    if 'COLLECTOR_CIT_SHARDING' in current_app.config: 
        sharding = current_app.config['COLLECTOR_CIT_SHARDING']
    if sharding:
        charge_item.set_shard(suffix)
        flash(                 f"Using shardened table: {charge_item.__table__.name}") 
        logger.debug(f"{this()}: Using shardened table: {charge_item.__table__.name}") 
    
    return collectordata





# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2021-12-13 19:33:35
# =============================================================================
# gen_models_code.py:445 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/includes/models_py_imports.py
from emtec.collector.db.flask_models import cit_generation
from emtec.collector.forms import frm_cit_generation,frm_cit_generation_delete
from emtec.collector.db.flask_models import cit_status
from emtec.collector.forms import frm_cit_status,frm_cit_status_delete
from emtec.collector.db.flask_models import cu_operation
from emtec.collector.forms import frm_cu_operation,frm_cu_operation_delete
from emtec.collector.db.flask_models import cu_type
from emtec.collector.forms import frm_cu_type,frm_cu_type_delete
from emtec.collector.db.flask_models import charge_item
from emtec.collector.forms import frm_charge_item,frm_charge_item_delete
from emtec.collector.db.flask_models import charge_resume
from emtec.collector.forms import frm_charge_resume,frm_charge_resume_delete
from emtec.collector.db.flask_models import charge_unit_egm
from emtec.collector.forms import frm_charge_unit_egm,frm_charge_unit_egm_delete
from emtec.collector.db.flask_models import charge_unit
from emtec.collector.forms import frm_charge_unit,frm_charge_unit_delete
from emtec.collector.db.flask_models import configuration_item
from emtec.collector.forms import frm_configuration_item,frm_configuration_item_delete
from emtec.collector.db.flask_models import cost_center
from emtec.collector.forms import frm_cost_center,frm_cost_center_delete
from emtec.collector.db.flask_models import country
from emtec.collector.forms import frm_country,frm_country_delete
from emtec.collector.db.flask_models import country_currency
from emtec.collector.forms import frm_country_currency,frm_country_currency_delete
from emtec.collector.db.flask_models import currency
from emtec.collector.forms import frm_currency,frm_currency_delete
from emtec.collector.db.flask_models import customer
from emtec.collector.forms import frm_customer,frm_customer_delete
from emtec.collector.db.flask_models import exchange_rate
from emtec.collector.forms import frm_exchange_rate,frm_exchange_rate_delete
from emtec.collector.db.flask_models import interface
from emtec.collector.forms import frm_interface,frm_interface_delete
from emtec.collector.db.flask_models import measure_unit
from emtec.collector.forms import frm_measure_unit,frm_measure_unit_delete
from emtec.collector.db.flask_models import platform
from emtec.collector.forms import frm_platform,frm_platform_delete
from emtec.collector.db.flask_models import rat_period
from emtec.collector.forms import frm_rat_period,frm_rat_period_delete
from emtec.collector.db.flask_models import rate
from emtec.collector.forms import frm_rate,frm_rate_delete
from emtec.collector.db.flask_models import Role
from emtec.collector.forms import frm_Role,frm_Role_delete
from emtec.collector.db.flask_models import st_use_per_cu
from emtec.collector.forms import frm_st_use_per_cu,frm_st_use_per_cu_delete
from emtec.collector.db.flask_models import st_use_per_type
from emtec.collector.forms import frm_st_use_per_type,frm_st_use_per_type_delete
from emtec.collector.db.flask_models import trace
from emtec.collector.forms import frm_trace,frm_trace_delete
from emtec.collector.db.flask_models import user_resumes
from emtec.collector.forms import frm_user_resumes,frm_user_resumes_delete
from emtec.collector.db.flask_models import User
from emtec.collector.forms import frm_User,frm_User_delete

# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2021-12-13 19:33:35
# =============================================================================
# gen_views.py:32 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_charge_items.py
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:37.454139
# ======================================================================        
# gen_views_form.html:AG 2021-12-13 19:33:37.454154
@main.route('/forms/Charge_Items', methods=['GET', 'POST'])
@login_required

def forms_Charge_Items():
    """ Form handling function for table Charge_Items """
    logger.debug('forms_Charge_Items(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Charge_Items'
    class_name='charge_item'
    template_name='Charge_Items'
    sharding=False
    if 'COLLECTOR_CIT_SHARDING' in current_app.config: 
        sharding=current_app.config['COLLECTOR_CIT_SHARDING']
    if sharding:
        charge_item.set_shard(suffix)
        flash("Using shardened table: %s"%charge_item.__table__.name)
    CU_Id  =  request.args.get('CU_Id',0,type=int)
    CIT_DateTime  =  request.args.get('CIT_DateTime',0,type=int)
    parent_key   = request.args.get('parent_key',None,type=str)
    parent_value = request.args.get('parent_value',0,type=int)
    # Ensures DB Data is commited prior main query
    try:
        db.session.commit()
    except:
        db.session.rollback()
    row =  charge_item.query.filter(charge_item.CU_Id == CU_Id,charge_item.CIT_DateTime == CIT_DateTime).first()
    if row is None:
        row=charge_item()
        session['is_new_row']=True
    session['data'] =  {  'CU_Id':row.CU_Id, 'CIT_Date':row.CIT_Date, 'CIT_Time':str(row.CIT_Time), 'CIT_Quantity':row.CIT_Quantity, 'CIT_Status':row.CIT_Status, 'CIT_Is_Active':row.CIT_Is_Active, 'CIT_DateTime':row.CIT_DateTime }
    
    if parent_key is not None:
       session['data'][parent_key] = parent_value
       print('parent_key  = ',parent_key)
       print('parent_value= ',parent_value)    
       print('session["data"][parent_key] = %s'%(parent_key,session['data'][parent_key]))
    
    form = frm_charge_item()
    
    if form.has_FKs:
        form.CU_Id.choices = db.session.query(charge_unit.CU_Id,charge_unit.CU_Description).order_by(charge_unit.CU_Description).all()
        form.CIT_Status.choices = db.session.query(cit_status.CIT_Status,cit_status.Value).order_by(cit_status.Value).all()

    
    # Actual Form activation here
    if form.validate_on_submit():
        # Code for SAVE option -----------------------------------------
        if form.submit_Save.data and current_user.role_id > 1:
            row.CU_Id = form.CU_Id.data
            row.CIT_Date = form.CIT_Date.data
            row.CIT_Time = form.CIT_Time.data
            row.CIT_Quantity = form.CIT_Quantity.data
            row.CIT_Status = form.CIT_Status.data
            row.CIT_Is_Active = form.CIT_Is_Active.data
            
            try:
               session['new_row']=str(row)
               db.session.flush()
               db.session.add(row)
               db.session.commit()
               db.session.flush()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New Charge Item created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>Charge Item CU_Id,CIT_DateTime saved OK</b>')
                   flash(message)
               db.session.flush()
            except Exception as e:
               db.session.rollback()
               db.session.flush()
               message=Markup('ERROR saving Charge Item record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_Charge_Items_query'))
        # --------------------------------------------------------------
        # Code for NEW option
        # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.flush()
            row=charge_item()
    
            return redirect(url_for('.forms_Charge_Items'))    
    
        # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('Charge Item Record modifications discarded ...')
            flash(message)
        # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>Charge Item data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_'))    
    
    
    form.CU_Id.data = row.CU_Id
    form.CIT_Date.data = row.CIT_Date
    form.CIT_Time.data = row.CIT_Time
    form.CIT_Quantity.data = row.CIT_Quantity
    form.CIT_Status.data = row.CIT_Status
    form.CIT_Is_Active.data = row.CIT_Is_Active
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_Charge_Items(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = []
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('charge_items.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:37.463140
# ======================================================================        
# gen_views_delete.html:AG 2021-12-13 19:33:37.463157
@main.route('/forms/Charge_Items_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)
@admin_required
def forms_Charge_Items_delete():
    """ Delete record handling function for table Charge_Items """
    logger.debug('forms_Charge_Items_delete(): Enter')
    CU_Id  =  request.args.get('CU_Id',0,type=int)
    CIT_DateTime  =  request.args.get('CIT_DateTime',0,type=int)
    row =  charge_item.query.filter(charge_item.CU_Id == CU_Id,charge_item.CIT_DateTime == CIT_DateTime).first()

    if row is None:
        row=charge_item()
    session['data'] =  {  'CU_Id':row.CU_Id, 'CIT_Date':row.CIT_Date, 'CIT_Time':str(row.CIT_Time), 'CIT_Quantity':row.CIT_Quantity, 'CIT_Status':row.CIT_Status, 'CIT_Is_Active':row.CIT_Is_Active, 'CIT_DateTime':row.CIT_DateTime }
                       
    form = frm_charge_item_delete()

    # Tab['has_fks'] True
    
    pass # Tab['has_fks'] True
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.flush()
                db.session.delete(row)
                db.session.commit()
                db.session.flush()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('Charge Item CU_Id,CIT_DateTime deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_Charge_Items_delete',CU_Id=session['data']['CU_Id'],CIT_DateTime=session['data']['CIT_DateTime']))    
    
            return redirect(url_for('.select_Charge_Items_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_Charge_Items_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_Charge_Items_query'))    
    
    logger.debug('forms_Charge_Items_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('charge_items_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: Charge_Items
# class_name: charge_item
# is shardened: True
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:37.487573
# ======================================================================

# gen_views_select_query.html:AG 2021-12-13 19:33:37.487595        
@main.route('/select/Charge_Items_Query', methods=['GET','POST'])
@login_required
@admin_required
def select_Charge_Items_query():
    """ Select rows handling function for table 'Charge_Items' """
    logger.debug('select_Charge_Items_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Charge_Items'
    class_name='charge_item'
    template_name='Charge_Items'
    sharding=False

    if 'COLLECTOR_CIT_SHARDING' in current_app.config: 
        sharding=current_app.config['COLLECTOR_CIT_SHARDING']
    if sharding:
        charge_item.set_shard(suffix)
        flash("Using shardened table: %s"%charge_item.__table__.name) 


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)

    logger.debug("%s: COLLECTOR_CIT_SHARDING   = %s",__name__,current_app.config['COLLECTOR_CIT_SHARDING'])
    logger.debug("%s: sharding                 = %s",__name__,sharding)
    logger.debug("%s: suffix                   = %s",__name__,suffix)
    logger.debug("%s: table_name               = %s",__name__,table_name)
    logger.debug("%s: class_name               = %s",__name__,class_name)
    logger.debug("%s: class_name              = %s",__name__,class_name)

    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='charge_item',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='charge_item',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='charge_item',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    foreign_keys.update({'CU_Id':(charge_unit,'charge_unit','CU_Id','CU_Description','Charge Unit Id')})
    foreign_keys.update({'CIT_Status':(cit_status,'cit_status','CIT_Status','Value','Status')})
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='charge_item'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    CU_Id =  request.args.get('CU_Id',None,type=str)
    CIT_Date =  request.args.get('CIT_Date',None,type=str)
    CIT_Time =  request.args.get('CIT_Time',None,type=str)
    CIT_Quantity =  request.args.get('CIT_Quantity',None,type=str)
    CIT_Status =  request.args.get('CIT_Status',None,type=str)
    CIT_Is_Active =  request.args.get('CIT_Is_Active',None,type=str)
    CIT_DateTime =  request.args.get('CIT_DateTime',None,type=str)
    
    # Build default query all fields from table
    

    if CU_Id is not None and len(CU_Id)>0:
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys['CU_Id']
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)            
            set_query_option(   engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1=foreign_field,
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_Id
                )
                                
    
    
    if CIT_Date is not None and len(CIT_Date)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CIT_Date:Date',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CIT_Date
                )
    
    
    if CIT_Time is not None and len(CIT_Time)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CIT_Time:Time',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CIT_Time
                )
    
    
    if CIT_Quantity is not None and len(CIT_Quantity)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CIT_Quantity:Quantity',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CIT_Quantity
                )
    
    
    if CIT_Status is not None and len(CIT_Status)>0:
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys['CIT_Status']
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)            
            set_query_option(   engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1=foreign_field,
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CIT_Status
                )
                                
    
    
    if CIT_Is_Active is not None and len(CIT_Is_Active)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CIT_Is_Active:Is Active',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CIT_Is_Active
                )
    
    
    if CIT_DateTime is not None and len(CIT_DateTime)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CIT_DateTime:CIT_DateTime',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CIT_DateTime
                )
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['CU_Id', 'CIT_Date', 'CIT_Time', 'CIT_Quantity', 'CIT_Status', 'CIT_Is_Active', 'CIT_DateTime']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['CU_Id', 'CIT_Date', 'CIT_Time', 'CIT_Quantity', 'CIT_Status', 'CIT_Is_Active', 'CIT_DateTime'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'CU_Id':
                if value is not None:
                    query = query.filter_by(CU_Id=value)
            if field == 'CIT_Date':
                if value is not None:
                    query = query.filter_by(CIT_Date=value)
            if field == 'CIT_Time':
                if value is not None:
                    query = query.filter_by(CIT_Time=value)
            if field == 'CIT_Quantity':
                if value is not None:
                    query = query.filter_by(CIT_Quantity=value)
            if field == 'CIT_Status':
                if value is not None:
                    query = query.filter_by(CIT_Status=value)
            if field == 'CIT_Is_Active':
                if value is not None:
                    query = query.filter_by(CIT_Is_Active=value)
            if field == 'CIT_DateTime':
                if value is not None:
                    query = query.filter_by(CIT_DateTime=value)
            # ------------------------------------------------------------------
    # JOIN other tables and generate foreign fields
    # Will replace class name by sharding class in joins structure
    # will have no effect in no sharding environment
    query = query.join(charge_unit,charge_item.CU_Id == charge_unit.CU_Id).add_columns(charge_unit.CU_Description).join(cit_status,charge_item.CIT_Status == cit_status.CIT_Status).add_columns(cit_status.Value)
    # ------------------------------------------------------------------
    
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:37.523449
# ======================================================================
# gen_views_api.html:AG 2021-12-13 19:33:37.523467
# table_name: Charge_Items
# class_name: charge_item
# is shardened: True
# Table 'Charge_Items' keys = CU_Id,CIT_DateTime
# Errors: None
# PK field found 'CU_Id' db.Integer
# Errors: None
# PK field found 'CIT_DateTime' db.DateTime
# Charge_Items id field is 'Charge_Items.CU_Id' of type 'int:'

@main.route('/api/get/Charge_Items'     , methods=['GET'])
@main.route('/api/get/Charge_Items/<int:id>', methods=['GET'])
def api_get_Charge_Items(id=None):
    code       = API_OK
    message    = 'OK'
    rows       = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        #response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        #response.headers['Pragma']        = 'no-cache'
        try:
            id_counter = 0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values=[id]
            # Codigo para un solo campo de id
            # chequear si marcado explicitamente
            db.session.flush()
            query = db.session.query(Charge_Items)
            if id is not None:
                query = query.filter(Charge_Items.CU_Id == id_values[id_counter])
                rows = query.one_or_none()
            else:
                if request.args is not None and len(request.args):
                    if 'CU_Id' in request.args:
                        query = query.filter(Charge_Items.CU_Id == request.args.get('CU_Id'))
                    if 'CIT_Date' in request.args:
                        query = query.filter(Charge_Items.CIT_Date == request.args.get('CIT_Date'))
                    if 'CIT_Time' in request.args:
                        query = query.filter(Charge_Items.CIT_Time == request.args.get('CIT_Time'))
                    if 'CIT_Quantity' in request.args:
                        query = query.filter(Charge_Items.CIT_Quantity == request.args.get('CIT_Quantity'))
                    if 'CIT_Status' in request.args:
                        query = query.filter(Charge_Items.CIT_Status == request.args.get('CIT_Status'))
                    if 'CIT_Is_Active' in request.args:
                        query = query.filter(Charge_Items.CIT_Is_Active == request.args.get('CIT_Is_Active'))
                    if 'CIT_DateTime' in request.args:
                        query = query.filter(Charge_Items.CIT_DateTime == request.args.get('CIT_DateTime'))
                rows = query.all()
            if rows is not None:
                if type(rows) == list:
                    for i in range(len(rows)):
                        rows[i] = json.loads(rows[i].get_json())
                else:
                    rows = [json.loads(rows.get_json())]
            else:
                rows = []
            if len(rows) == 0:
                code = API_NO_DATA
                state = get_api_state(API_NO_DATA)
                
                if id is None:
                    message = f"No 'Charge_Items' records found"
                else:
                    message = f"No 'Charge_Items.CU_Id' = {id} record found"
                
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Charge_Items',entities=rows,name=current_app.config['NAME'])

@main.route('/api/post/Charge_Items', methods=['POST'])
def api_post_Charge_Items():
    code    = API_OK
    message = 'OK'
    row     = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            row = Charge_Items()
            # Populates row from json, if ID=int:autoincrement then None
            row.CU_Id = request.json.get('CU_Id',0)
            row.CIT_Date = request.json.get('CIT_Date',None)
            row.CIT_Time = request.json.get('CIT_Time',None)
            row.CIT_Quantity = request.json.get('CIT_Quantity',0.000000000000)
            row.CIT_Status = request.json.get('CIT_Status',0)
            row.CIT_Is_Active = request.json.get('CIT_Is_Active',0)
            row.CIT_DateTime = request.json.get('CIT_DateTime',None)
            # ----------------------------------------------------------
            db.session.add(row)
            db.session.flush()
            db.session.commit()
            db.session.flush()
            db.session.refresh(row)
            db.session.flush()
            message = f"Created 'Charge_Items' CU_Id = {row.CU_Id}"
            row     = json.loads(row.get_json())
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
    else:
        code    = API_ERROR
        message = 'Unauthorized request'            
    return get_api_response(code=code,message=message,kind='Charge_Items',entities=[row],name=current_app.config['NAME'])

@main.route('/api/put/Charge_Items/<int:id>', methods=['PUT'])
def api_put_Charge_Items(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Charge_Items()
            query = db.session.query(Charge_Items)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Charge_Items.CU_Id == id_values[id_counter])
            id_counter += 1
            query = query.filter(Charge_Items.CIT_DateTime == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                if 'CIT_Date' in request.json.keys():
                    row.CIT_Date = request.json.get('CIT_Date')
                if 'CIT_Time' in request.json.keys():
                    row.CIT_Time = request.json.get('CIT_Time')
                if 'CIT_Quantity' in request.json.keys():
                    row.CIT_Quantity = request.json.get('CIT_Quantity')
                if 'CIT_Status' in request.json.keys():
                    row.CIT_Status = request.json.get('CIT_Status')
                if 'CIT_Is_Active' in request.json.keys():
                    row.CIT_Is_Active = request.json.get('CIT_Is_Active')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Charge_Items' CU_Id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found Charge_Items with CU_Id = {id}"
                row     = None
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Charge_Items',entities=[row],name=current_app.config['NAME'])

@main.route('/api/patch/Charge_Items/<int:id>', methods=['PATCH'])
def api_patch_Charge_Items(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Charge_Items()
            query = db.session.query(Charge_Items)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Charge_Items.CU_Id == id_values[id_counter])
            id_counter += 1
            query = query.filter(Charge_Items.CIT_DateTime == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                db.session.rollback()
                if request.values is not None and len(request.values):
                    if 'CIT_Date' in request.values:
                        row.CIT_Date = request.values.get('CIT_Date')
                    if 'CIT_Time' in request.values:
                        row.CIT_Time = request.values.get('CIT_Time')
                    if 'CIT_Quantity' in request.values:
                        row.CIT_Quantity = request.values.get('CIT_Quantity')
                    if 'CIT_Status' in request.values:
                        row.CIT_Status = request.values.get('CIT_Status')
                    if 'CIT_Is_Active' in request.values:
                        row.CIT_Is_Active = request.values.get('CIT_Is_Active')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Charge_Items' CU_Id = {id}"
                try:
                    row     = json.loads(row.get_json())
                except:
                    row     = None
            else:
                code    = API_NOT_FOUND
                message = f"Not found Charge_Items with CU_Id = {id}"
                row     = None
                db.session.rollback()
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
            db.session.rollback()
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Charge_Items',entities=[row],name=current_app.config['NAME'])

@main.route('/api/delete/Charge_Items/<int:id>', methods=['DELETE'])
def api_delete_Charge_Items(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Charge_Items()
            query = db.session.query(Charge_Items)
            
            # First loop mandatory for row population ----------------------
            # detected primary key field: c.field
            query       = query.filter(Charge_Items.CU_Id == id_values[id_counter])
            id_counter +=1
            # detected primary key field: c.field
            query       = query.filter(Charge_Items.CIT_DateTime == id_values[id_counter])
            id_counter +=1
            # --------------------------------------------------------------
            row = query.one_or_none()

            if row is not None:
                db.session.delete(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                message = f"Deleted 'Charge_Items' CU_Id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found 'Charge_Items' with CU_Id = {id}"
                row     = None        
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Charge_Items',entities=[],name=current_app.config['NAME'])

# ======================================================================# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2021-12-13 19:33:35
# =============================================================================
# gen_views.py:32 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_charge_resumes.py
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:37.770581
# ======================================================================        
# gen_views_form.html:AG 2021-12-13 19:33:37.770595
@main.route('/forms/Charge_Resumes', methods=['GET', 'POST'])
@login_required

def forms_Charge_Resumes():
    """ Form handling function for table Charge_Resumes """
    logger.debug('forms_Charge_Resumes(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Charge_Resumes'
    class_name='charge_resume'
    template_name='Charge_Resumes'
    sharding=False
    User_Id  =  request.args.get('User_Id',0,type=int)
    Cus_Id  =  request.args.get('Cus_Id',0,type=int)
    CR_Date_From  =  request.args.get('CR_Date_From',0,type=int)
    CR_Date_To  =  request.args.get('CR_Date_To',0,type=int)
    CIT_Status  =  request.args.get('CIT_Status',0,type=int)
    Cur_Code  =  request.args.get('Cur_Code',0,type=int)
    CU_Id  =  request.args.get('CU_Id',0,type=int)
    
    # Ensures DB Data is commited prior main query
    try:
        db.session.commit()
    except:
        db.session.rollback()
    row =  charge_resume.query.filter(charge_resume.User_Id == User_Id,charge_resume.Cus_Id == Cus_Id,charge_resume.CR_Date_From == CR_Date_From,charge_resume.CR_Date_To == CR_Date_To,charge_resume.CIT_Status == CIT_Status,charge_resume.Cur_Code == Cur_Code,charge_resume.CU_Id == CU_Id).first()
    if row is None:
        row=charge_resume()
        session['is_new_row']=True
    session['data'] =  {  'User_Id':row.User_Id, 'Cus_Id':row.Cus_Id, 'CR_Date_From':row.CR_Date_From, 'CR_Date_To':row.CR_Date_To, 'CIT_Status':row.CIT_Status, 'Cur_Code':row.Cur_Code, 'CU_Id':row.CU_Id, 'CIT_Count':row.CIT_Count, 'CIT_Quantity':row.CIT_Quantity, 'CIT_Generation':row.CIT_Generation, 'CI_CC_Id':row.CI_CC_Id, 'CU_Operation':row.CU_Operation, 'Typ_Code':row.Typ_Code, 'CC_Cur_Code':row.CC_Cur_Code, 'CI_Id':row.CI_Id, 'Rat_Id':row.Rat_Id, 'Rat_Price':row.Rat_Price, 'Rat_MU_Code':row.Rat_MU_Code, 'Rat_Cur_Code':row.Rat_Cur_Code, 'Rat_Period':row.Rat_Period, 'Rat_Hourly':row.Rat_Hourly, 'Rat_Daily':row.Rat_Daily, 'Rat_Monthly':row.Rat_Monthly, 'CR_Quantity':row.CR_Quantity, 'CR_Quantity_at_Rate':row.CR_Quantity_at_Rate, 'CC_XR':row.CC_XR, 'CR_Cur_XR':row.CR_Cur_XR, 'CR_ST_at_Rate_Cur':row.CR_ST_at_Rate_Cur, 'CR_ST_at_CC_Cur':row.CR_ST_at_CC_Cur, 'CR_ST_at_Cur':row.CR_ST_at_Cur, 'Cus_Name':row.Cus_Name, 'CI_Name':row.CI_Name, 'CU_Description':row.CU_Description, 'CC_Description':row.CC_Description, 'Rat_Period_Description':row.Rat_Period_Description, 'CC_Code':row.CC_Code, 'Pla_Id':row.Pla_Id, 'Pla_Name':row.Pla_Name }
    
    form = frm_charge_resume()
    
    # Actual Form activation here
    if form.validate_on_submit():
        # Code for SAVE option -----------------------------------------
        if form.submit_Save.data and current_user.role_id > 1:
            row.User_Id = form.User_Id.data
            row.Cus_Id = form.Cus_Id.data
            row.CR_Date_From = form.CR_Date_From.data
            row.CR_Date_To = form.CR_Date_To.data
            row.CIT_Status = form.CIT_Status.data
            row.Cur_Code = form.Cur_Code.data
            row.CU_Id = form.CU_Id.data
            row.CIT_Count = form.CIT_Count.data
            row.CIT_Quantity = form.CIT_Quantity.data
            row.CIT_Generation = form.CIT_Generation.data
            row.CI_CC_Id = form.CI_CC_Id.data
            row.CU_Operation = form.CU_Operation.data
            row.Typ_Code = form.Typ_Code.data
            row.CC_Cur_Code = form.CC_Cur_Code.data
            row.CI_Id = form.CI_Id.data
            row.Rat_Id = form.Rat_Id.data
            row.Rat_Price = form.Rat_Price.data
            row.Rat_MU_Code = form.Rat_MU_Code.data
            row.Rat_Cur_Code = form.Rat_Cur_Code.data
            row.Rat_Period = form.Rat_Period.data
            row.Rat_Hourly = form.Rat_Hourly.data
            row.Rat_Daily = form.Rat_Daily.data
            row.Rat_Monthly = form.Rat_Monthly.data
            row.CR_Quantity = form.CR_Quantity.data
            row.CR_Quantity_at_Rate = form.CR_Quantity_at_Rate.data
            row.CC_XR = form.CC_XR.data
            row.CR_Cur_XR = form.CR_Cur_XR.data
            row.CR_ST_at_Rate_Cur = form.CR_ST_at_Rate_Cur.data
            row.CR_ST_at_CC_Cur = form.CR_ST_at_CC_Cur.data
            row.CR_ST_at_Cur = form.CR_ST_at_Cur.data
            row.Cus_Name = form.Cus_Name.data
            row.CI_Name = form.CI_Name.data
            row.CU_Description = form.CU_Description.data
            row.CC_Description = form.CC_Description.data
            row.Rat_Period_Description = form.Rat_Period_Description.data
            row.CC_Code = form.CC_Code.data
            row.Pla_Id = form.Pla_Id.data
            row.Pla_Name = form.Pla_Name.data
            try:
               session['new_row']=str(row)
               db.session.flush()
               db.session.add(row)
               db.session.commit()
               db.session.flush()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New Charge Resume created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>Charge Resume User_Id,Cus_Id,CR_Date_From,CR_Date_To,CIT_Status,Cur_Code,CU_Id saved OK</b>')
                   flash(message)
               db.session.flush()
            except Exception as e:
               db.session.rollback()
               db.session.flush()
               message=Markup('ERROR saving Charge Resume record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_Charge_Resumes_query'))
        # --------------------------------------------------------------
        # Code for NEW option
        # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.flush()
            row=charge_resume()
    
            return redirect(url_for('.forms_Charge_Resumes'))    
    
        # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('Charge Resume Record modifications discarded ...')
            flash(message)
        # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>Charge Resume data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_'))    
    
    
    form.User_Id.data = row.User_Id
    form.Cus_Id.data = row.Cus_Id
    form.CR_Date_From.data = row.CR_Date_From
    form.CR_Date_To.data = row.CR_Date_To
    form.CIT_Status.data = row.CIT_Status
    form.Cur_Code.data = row.Cur_Code
    form.CU_Id.data = row.CU_Id
    form.CIT_Count.data = row.CIT_Count
    form.CIT_Quantity.data = row.CIT_Quantity
    form.CIT_Generation.data = row.CIT_Generation
    form.CI_CC_Id.data = row.CI_CC_Id
    form.CU_Operation.data = row.CU_Operation
    form.Typ_Code.data = row.Typ_Code
    form.CC_Cur_Code.data = row.CC_Cur_Code
    form.CI_Id.data = row.CI_Id
    form.Rat_Id.data = row.Rat_Id
    form.Rat_Price.data = row.Rat_Price
    form.Rat_MU_Code.data = row.Rat_MU_Code
    form.Rat_Cur_Code.data = row.Rat_Cur_Code
    form.Rat_Period.data = row.Rat_Period
    form.Rat_Hourly.data = row.Rat_Hourly
    form.Rat_Daily.data = row.Rat_Daily
    form.Rat_Monthly.data = row.Rat_Monthly
    form.CR_Quantity.data = row.CR_Quantity
    form.CR_Quantity_at_Rate.data = row.CR_Quantity_at_Rate
    form.CC_XR.data = row.CC_XR
    form.CR_Cur_XR.data = row.CR_Cur_XR
    form.CR_ST_at_Rate_Cur.data = row.CR_ST_at_Rate_Cur
    form.CR_ST_at_CC_Cur.data = row.CR_ST_at_CC_Cur
    form.CR_ST_at_Cur.data = row.CR_ST_at_Cur
    form.Cus_Name.data = row.Cus_Name
    form.CI_Name.data = row.CI_Name
    form.CU_Description.data = row.CU_Description
    form.CC_Description.data = row.CC_Description
    form.Rat_Period_Description.data = row.Rat_Period_Description
    form.CC_Code.data = row.CC_Code
    form.Pla_Id.data = row.Pla_Id
    form.Pla_Name.data = row.Pla_Name
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_Charge_Resumes(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = []
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('charge_resumes.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:37.781366
# ======================================================================        
# gen_views_delete.html:AG 2021-12-13 19:33:37.781381
@main.route('/forms/Charge_Resumes_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)

def forms_Charge_Resumes_delete():
    """ Delete record handling function for table Charge_Resumes """
    logger.debug('forms_Charge_Resumes_delete(): Enter')
    User_Id  =  request.args.get('User_Id',0,type=int)
    Cus_Id  =  request.args.get('Cus_Id',0,type=int)
    CR_Date_From  =  request.args.get('CR_Date_From',0,type=int)
    CR_Date_To  =  request.args.get('CR_Date_To',0,type=int)
    CIT_Status  =  request.args.get('CIT_Status',0,type=int)
    Cur_Code  =  request.args.get('Cur_Code',0,type=int)
    CU_Id  =  request.args.get('CU_Id',0,type=int)
    row =  charge_resume.query.filter(charge_resume.User_Id == User_Id,charge_resume.Cus_Id == Cus_Id,charge_resume.CR_Date_From == CR_Date_From,charge_resume.CR_Date_To == CR_Date_To,charge_resume.CIT_Status == CIT_Status,charge_resume.Cur_Code == Cur_Code,charge_resume.CU_Id == CU_Id).first()

    if row is None:
        row=charge_resume()
    session['data'] =  {  'User_Id':row.User_Id, 'Cus_Id':row.Cus_Id, 'CR_Date_From':row.CR_Date_From, 'CR_Date_To':row.CR_Date_To, 'CIT_Status':row.CIT_Status, 'Cur_Code':row.Cur_Code, 'CU_Id':row.CU_Id, 'CIT_Count':row.CIT_Count, 'CIT_Quantity':row.CIT_Quantity, 'CIT_Generation':row.CIT_Generation, 'CI_CC_Id':row.CI_CC_Id, 'CU_Operation':row.CU_Operation, 'Typ_Code':row.Typ_Code, 'CC_Cur_Code':row.CC_Cur_Code, 'CI_Id':row.CI_Id, 'Rat_Id':row.Rat_Id, 'Rat_Price':row.Rat_Price, 'Rat_MU_Code':row.Rat_MU_Code, 'Rat_Cur_Code':row.Rat_Cur_Code, 'Rat_Period':row.Rat_Period, 'Rat_Hourly':row.Rat_Hourly, 'Rat_Daily':row.Rat_Daily, 'Rat_Monthly':row.Rat_Monthly, 'CR_Quantity':row.CR_Quantity, 'CR_Quantity_at_Rate':row.CR_Quantity_at_Rate, 'CC_XR':row.CC_XR, 'CR_Cur_XR':row.CR_Cur_XR, 'CR_ST_at_Rate_Cur':row.CR_ST_at_Rate_Cur, 'CR_ST_at_CC_Cur':row.CR_ST_at_CC_Cur, 'CR_ST_at_Cur':row.CR_ST_at_Cur, 'Cus_Name':row.Cus_Name, 'CI_Name':row.CI_Name, 'CU_Description':row.CU_Description, 'CC_Description':row.CC_Description, 'Rat_Period_Description':row.Rat_Period_Description, 'CC_Code':row.CC_Code, 'Pla_Id':row.Pla_Id, 'Pla_Name':row.Pla_Name }
                       
    form = frm_charge_resume_delete()

    # Tab['has_fks'] False
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.flush()
                db.session.delete(row)
                db.session.commit()
                db.session.flush()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('Charge Resume User_Id,Cus_Id,CR_Date_From,CR_Date_To,CIT_Status,Cur_Code,CU_Id deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_Charge_Resumes_delete',User_Id=session['data']['User_Id'],Cus_Id=session['data']['Cus_Id'],CR_Date_From=session['data']['CR_Date_From'],CR_Date_To=session['data']['CR_Date_To'],CIT_Status=session['data']['CIT_Status'],Cur_Code=session['data']['Cur_Code'],CU_Id=session['data']['CU_Id']))    
    
            return redirect(url_for('.select_Charge_Resumes_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_Charge_Resumes_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_Charge_Resumes_query'))    
    
    logger.debug('forms_Charge_Resumes_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('charge_resumes_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: Charge_Resumes
# class_name: charge_resume
# is shardened: None
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:37.804824
# ======================================================================

# gen_views_select_query.html:AG 2021-12-13 19:33:37.804841        
@main.route('/select/Charge_Resumes_Query', methods=['GET','POST'])
@login_required

def select_Charge_Resumes_query():
    """ Select rows handling function for table 'Charge_Resumes' """
    logger.debug('select_Charge_Resumes_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Charge_Resumes'
    class_name='charge_resume'
    template_name='Charge_Resumes'
    sharding=False


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)

    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='charge_resume',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='charge_resume',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='charge_resume',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='charge_resume'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    User_Id =  request.args.get('User_Id',None,type=str)
    Cus_Id =  request.args.get('Cus_Id',None,type=str)
    CR_Date_From =  request.args.get('CR_Date_From',None,type=str)
    CR_Date_To =  request.args.get('CR_Date_To',None,type=str)
    CIT_Status =  request.args.get('CIT_Status',None,type=str)
    Cur_Code =  request.args.get('Cur_Code',None,type=str)
    CU_Id =  request.args.get('CU_Id',None,type=str)
    CIT_Count =  request.args.get('CIT_Count',None,type=str)
    CIT_Quantity =  request.args.get('CIT_Quantity',None,type=str)
    CIT_Generation =  request.args.get('CIT_Generation',None,type=str)
    CI_CC_Id =  request.args.get('CI_CC_Id',None,type=str)
    CU_Operation =  request.args.get('CU_Operation',None,type=str)
    Typ_Code =  request.args.get('Typ_Code',None,type=str)
    CC_Cur_Code =  request.args.get('CC_Cur_Code',None,type=str)
    CI_Id =  request.args.get('CI_Id',None,type=str)
    Rat_Id =  request.args.get('Rat_Id',None,type=str)
    Rat_Price =  request.args.get('Rat_Price',None,type=str)
    Rat_MU_Code =  request.args.get('Rat_MU_Code',None,type=str)
    Rat_Cur_Code =  request.args.get('Rat_Cur_Code',None,type=str)
    Rat_Period =  request.args.get('Rat_Period',None,type=str)
    Rat_Hourly =  request.args.get('Rat_Hourly',None,type=str)
    Rat_Daily =  request.args.get('Rat_Daily',None,type=str)
    Rat_Monthly =  request.args.get('Rat_Monthly',None,type=str)
    CR_Quantity =  request.args.get('CR_Quantity',None,type=str)
    CR_Quantity_at_Rate =  request.args.get('CR_Quantity_at_Rate',None,type=str)
    CC_XR =  request.args.get('CC_XR',None,type=str)
    CR_Cur_XR =  request.args.get('CR_Cur_XR',None,type=str)
    CR_ST_at_Rate_Cur =  request.args.get('CR_ST_at_Rate_Cur',None,type=str)
    CR_ST_at_CC_Cur =  request.args.get('CR_ST_at_CC_Cur',None,type=str)
    CR_ST_at_Cur =  request.args.get('CR_ST_at_Cur',None,type=str)
    Cus_Name =  request.args.get('Cus_Name',None,type=str)
    CI_Name =  request.args.get('CI_Name',None,type=str)
    CU_Description =  request.args.get('CU_Description',None,type=str)
    CC_Description =  request.args.get('CC_Description',None,type=str)
    Rat_Period_Description =  request.args.get('Rat_Period_Description',None,type=str)
    CC_Code =  request.args.get('CC_Code',None,type=str)
    Pla_Id =  request.args.get('Pla_Id',None,type=str)
    Pla_Name =  request.args.get('Pla_Name',None,type=str)
    
    # Build default query all fields from table
    

    if User_Id is not None and len(User_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='User_Id:User_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%User_Id
                )
    
    
    if Cus_Id is not None and len(Cus_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Cus_Id:Cus_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Cus_Id
                )
    
    
    if CR_Date_From is not None and len(CR_Date_From)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CR_Date_From:CR_Date_From',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CR_Date_From
                )
    
    
    if CR_Date_To is not None and len(CR_Date_To)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CR_Date_To:CR_Date_To',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CR_Date_To
                )
    
    
    if CIT_Status is not None and len(CIT_Status)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CIT_Status:CIT_Status',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CIT_Status
                )
    
    
    if Cur_Code is not None and len(Cur_Code)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Cur_Code:Cur_Code',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Cur_Code
                )
    
    
    if CU_Id is not None and len(CU_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CU_Id:CU_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_Id
                )
    
    
    if CIT_Count is not None and len(CIT_Count)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CIT_Count:CIT_Count',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CIT_Count
                )
    
    
    if CIT_Quantity is not None and len(CIT_Quantity)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CIT_Quantity:CIT_Quantity',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CIT_Quantity
                )
    
    
    if CIT_Generation is not None and len(CIT_Generation)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CIT_Generation:CIT_Generation',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CIT_Generation
                )
    
    
    if CI_CC_Id is not None and len(CI_CC_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CI_CC_Id:CI_CC_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CI_CC_Id
                )
    
    
    if CU_Operation is not None and len(CU_Operation)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CU_Operation:CU_Operation',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_Operation
                )
    
    
    if Typ_Code is not None and len(Typ_Code)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Typ_Code:Typ_Code',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Typ_Code
                )
    
    
    if CC_Cur_Code is not None and len(CC_Cur_Code)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CC_Cur_Code:CC_Cur_Code',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CC_Cur_Code
                )
    
    
    if CI_Id is not None and len(CI_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CI_Id:CI_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CI_Id
                )
    
    
    if Rat_Id is not None and len(Rat_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Rat_Id:Rat_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Rat_Id
                )
    
    
    if Rat_Price is not None and len(Rat_Price)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Rat_Price:Rat_Price',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Rat_Price
                )
    
    
    if Rat_MU_Code is not None and len(Rat_MU_Code)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Rat_MU_Code:Rat_MU_Code',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Rat_MU_Code
                )
    
    
    if Rat_Cur_Code is not None and len(Rat_Cur_Code)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Rat_Cur_Code:Rat_Cur_Code',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Rat_Cur_Code
                )
    
    
    if Rat_Period is not None and len(Rat_Period)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Rat_Period:Rat_Period',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Rat_Period
                )
    
    
    if Rat_Hourly is not None and len(Rat_Hourly)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Rat_Hourly:Rat_Hourly',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Rat_Hourly
                )
    
    
    if Rat_Daily is not None and len(Rat_Daily)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Rat_Daily:Rat_Daily',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Rat_Daily
                )
    
    
    if Rat_Monthly is not None and len(Rat_Monthly)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Rat_Monthly:Rat_Monthly',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Rat_Monthly
                )
    
    
    if CR_Quantity is not None and len(CR_Quantity)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CR_Quantity:CR_Quantity',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CR_Quantity
                )
    
    
    if CR_Quantity_at_Rate is not None and len(CR_Quantity_at_Rate)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CR_Quantity_at_Rate:CR_Quantity_at_Rate',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CR_Quantity_at_Rate
                )
    
    
    if CC_XR is not None and len(CC_XR)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CC_XR:CC_XR',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CC_XR
                )
    
    
    if CR_Cur_XR is not None and len(CR_Cur_XR)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CR_Cur_XR:CR_Cur_XR',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CR_Cur_XR
                )
    
    
    if CR_ST_at_Rate_Cur is not None and len(CR_ST_at_Rate_Cur)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CR_ST_at_Rate_Cur:CR_ST_at_Rate_Cur',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CR_ST_at_Rate_Cur
                )
    
    
    if CR_ST_at_CC_Cur is not None and len(CR_ST_at_CC_Cur)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CR_ST_at_CC_Cur:CR_ST_at_CC_Cur',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CR_ST_at_CC_Cur
                )
    
    
    if CR_ST_at_Cur is not None and len(CR_ST_at_Cur)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CR_ST_at_Cur:CR_ST_at_Cur',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CR_ST_at_Cur
                )
    
    
    if Cus_Name is not None and len(Cus_Name)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Cus_Name:Cus_Name',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Cus_Name
                )
    
    
    if CI_Name is not None and len(CI_Name)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CI_Name:CI_Name',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CI_Name
                )
    
    
    if CU_Description is not None and len(CU_Description)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CU_Description:CU_Description',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_Description
                )
    
    
    if CC_Description is not None and len(CC_Description)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CC_Description:CC_Description',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CC_Description
                )
    
    
    if Rat_Period_Description is not None and len(Rat_Period_Description)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Rat_Period_Description:Rat_Period_Description',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Rat_Period_Description
                )
    
    
    if CC_Code is not None and len(CC_Code)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CC_Code:CC_Code',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CC_Code
                )
    
    
    if Pla_Id is not None and len(Pla_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Pla_Id:Pla_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Pla_Id
                )
    
    
    if Pla_Name is not None and len(Pla_Name)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Pla_Name:Pla_Name',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Pla_Name
                )
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['User_Id', 'Cus_Id', 'CR_Date_From', 'CR_Date_To', 'CIT_Status', 'Cur_Code', 'CU_Id', 'CIT_Count', 'CIT_Quantity', 'CIT_Generation', 'CI_CC_Id', 'CU_Operation', 'Typ_Code', 'CC_Cur_Code', 'CI_Id', 'Rat_Id', 'Rat_Price', 'Rat_MU_Code', 'Rat_Cur_Code', 'Rat_Period', 'Rat_Hourly', 'Rat_Daily', 'Rat_Monthly', 'CR_Quantity', 'CR_Quantity_at_Rate', 'CC_XR', 'CR_Cur_XR', 'CR_ST_at_Rate_Cur', 'CR_ST_at_CC_Cur', 'CR_ST_at_Cur', 'Cus_Name', 'CI_Name', 'CU_Description', 'CC_Description', 'Rat_Period_Description', 'CC_Code', 'Pla_Id', 'Pla_Name']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['User_Id', 'Cus_Id', 'CR_Date_From', 'CR_Date_To', 'CIT_Status', 'Cur_Code', 'CU_Id', 'CIT_Count', 'CIT_Quantity', 'CIT_Generation', 'CI_CC_Id', 'CU_Operation', 'Typ_Code', 'CC_Cur_Code', 'CI_Id', 'Rat_Id', 'Rat_Price', 'Rat_MU_Code', 'Rat_Cur_Code', 'Rat_Period', 'Rat_Hourly', 'Rat_Daily', 'Rat_Monthly', 'CR_Quantity', 'CR_Quantity_at_Rate', 'CC_XR', 'CR_Cur_XR', 'CR_ST_at_Rate_Cur', 'CR_ST_at_CC_Cur', 'CR_ST_at_Cur', 'Cus_Name', 'CI_Name', 'CU_Description', 'CC_Description', 'Rat_Period_Description', 'CC_Code', 'Pla_Id', 'Pla_Name'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'User_Id':
                if value is not None:
                    query = query.filter_by(User_Id=value)
            if field == 'Cus_Id':
                if value is not None:
                    query = query.filter_by(Cus_Id=value)
            if field == 'CR_Date_From':
                if value is not None:
                    query = query.filter_by(CR_Date_From=value)
            if field == 'CR_Date_To':
                if value is not None:
                    query = query.filter_by(CR_Date_To=value)
            if field == 'CIT_Status':
                if value is not None:
                    query = query.filter_by(CIT_Status=value)
            if field == 'Cur_Code':
                if value is not None:
                    query = query.filter_by(Cur_Code=value)
            if field == 'CU_Id':
                if value is not None:
                    query = query.filter_by(CU_Id=value)
            if field == 'CIT_Count':
                if value is not None:
                    query = query.filter_by(CIT_Count=value)
            if field == 'CIT_Quantity':
                if value is not None:
                    query = query.filter_by(CIT_Quantity=value)
            if field == 'CIT_Generation':
                if value is not None:
                    query = query.filter_by(CIT_Generation=value)
            if field == 'CI_CC_Id':
                if value is not None:
                    query = query.filter_by(CI_CC_Id=value)
            if field == 'CU_Operation':
                if value is not None:
                    query = query.filter_by(CU_Operation=value)
            if field == 'Typ_Code':
                if value is not None:
                    query = query.filter_by(Typ_Code=value)
            if field == 'CC_Cur_Code':
                if value is not None:
                    query = query.filter_by(CC_Cur_Code=value)
            if field == 'CI_Id':
                if value is not None:
                    query = query.filter_by(CI_Id=value)
            if field == 'Rat_Id':
                if value is not None:
                    query = query.filter_by(Rat_Id=value)
            if field == 'Rat_Price':
                if value is not None:
                    query = query.filter_by(Rat_Price=value)
            if field == 'Rat_MU_Code':
                if value is not None:
                    query = query.filter_by(Rat_MU_Code=value)
            if field == 'Rat_Cur_Code':
                if value is not None:
                    query = query.filter_by(Rat_Cur_Code=value)
            if field == 'Rat_Period':
                if value is not None:
                    query = query.filter_by(Rat_Period=value)
            if field == 'Rat_Hourly':
                if value is not None:
                    query = query.filter_by(Rat_Hourly=value)
            if field == 'Rat_Daily':
                if value is not None:
                    query = query.filter_by(Rat_Daily=value)
            if field == 'Rat_Monthly':
                if value is not None:
                    query = query.filter_by(Rat_Monthly=value)
            if field == 'CR_Quantity':
                if value is not None:
                    query = query.filter_by(CR_Quantity=value)
            if field == 'CR_Quantity_at_Rate':
                if value is not None:
                    query = query.filter_by(CR_Quantity_at_Rate=value)
            if field == 'CC_XR':
                if value is not None:
                    query = query.filter_by(CC_XR=value)
            if field == 'CR_Cur_XR':
                if value is not None:
                    query = query.filter_by(CR_Cur_XR=value)
            if field == 'CR_ST_at_Rate_Cur':
                if value is not None:
                    query = query.filter_by(CR_ST_at_Rate_Cur=value)
            if field == 'CR_ST_at_CC_Cur':
                if value is not None:
                    query = query.filter_by(CR_ST_at_CC_Cur=value)
            if field == 'CR_ST_at_Cur':
                if value is not None:
                    query = query.filter_by(CR_ST_at_Cur=value)
            if field == 'Cus_Name':
                if value is not None:
                    query = query.filter_by(Cus_Name=value)
            if field == 'CI_Name':
                if value is not None:
                    query = query.filter_by(CI_Name=value)
            if field == 'CU_Description':
                if value is not None:
                    query = query.filter_by(CU_Description=value)
            if field == 'CC_Description':
                if value is not None:
                    query = query.filter_by(CC_Description=value)
            if field == 'Rat_Period_Description':
                if value is not None:
                    query = query.filter_by(Rat_Period_Description=value)
            if field == 'CC_Code':
                if value is not None:
                    query = query.filter_by(CC_Code=value)
            if field == 'Pla_Id':
                if value is not None:
                    query = query.filter_by(Pla_Id=value)
            if field == 'Pla_Name':
                if value is not None:
                    query = query.filter_by(Pla_Name=value)
            
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:37.839470
# ======================================================================
# gen_views_api.html:AG 2021-12-13 19:33:37.839496
# table_name: Charge_Resumes
# class_name: charge_resume
# is shardened: None
# Table 'Charge_Resumes' keys = User_Id,Cus_Id,CR_Date_From,CR_Date_To,CIT_Status,Cur_Code,CU_Id
# Errors: None
# PK field found 'User_Id' db.Integer
# Errors: None
# PK field found 'Cus_Id' db.Integer
# Errors: None
# PK field found 'CR_Date_From' db.Date
# Errors: None
# PK field found 'CR_Date_To' db.Date
# Errors: None
# PK field found 'CIT_Status' db.Integer
# Errors: None
# PK field found 'Cur_Code' db.String(3)
# Errors: None
# PK field found 'CU_Id' db.Integer
# Charge_Resumes id field is 'Charge_Resumes.User_Id' of type 'int:'

@main.route('/api/get/Charge_Resumes'     , methods=['GET'])
@main.route('/api/get/Charge_Resumes/<int:id>', methods=['GET'])
def api_get_Charge_Resumes(id=None):
    code       = API_OK
    message    = 'OK'
    rows       = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        #response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        #response.headers['Pragma']        = 'no-cache'
        try:
            id_counter = 0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values=[id]
            # Codigo para un solo campo de id
            # chequear si marcado explicitamente
            db.session.flush()
            query = db.session.query(Charge_Resumes)
            if id is not None:
                query = query.filter(Charge_Resumes.User_Id == id_values[id_counter])
                rows = query.one_or_none()
            else:
                if request.args is not None and len(request.args):
                    if 'User_Id' in request.args:
                        query = query.filter(Charge_Resumes.User_Id == request.args.get('User_Id'))
                    if 'Cus_Id' in request.args:
                        query = query.filter(Charge_Resumes.Cus_Id == request.args.get('Cus_Id'))
                    if 'CR_Date_From' in request.args:
                        query = query.filter(Charge_Resumes.CR_Date_From == request.args.get('CR_Date_From'))
                    if 'CR_Date_To' in request.args:
                        query = query.filter(Charge_Resumes.CR_Date_To == request.args.get('CR_Date_To'))
                    if 'CIT_Status' in request.args:
                        query = query.filter(Charge_Resumes.CIT_Status == request.args.get('CIT_Status'))
                    if 'Cur_Code' in request.args:
                        query = query.filter(Charge_Resumes.Cur_Code == request.args.get('Cur_Code'))
                    if 'CU_Id' in request.args:
                        query = query.filter(Charge_Resumes.CU_Id == request.args.get('CU_Id'))
                    if 'CIT_Count' in request.args:
                        query = query.filter(Charge_Resumes.CIT_Count == request.args.get('CIT_Count'))
                    if 'CIT_Quantity' in request.args:
                        query = query.filter(Charge_Resumes.CIT_Quantity == request.args.get('CIT_Quantity'))
                    if 'CIT_Generation' in request.args:
                        query = query.filter(Charge_Resumes.CIT_Generation == request.args.get('CIT_Generation'))
                    if 'CI_CC_Id' in request.args:
                        query = query.filter(Charge_Resumes.CI_CC_Id == request.args.get('CI_CC_Id'))
                    if 'CU_Operation' in request.args:
                        query = query.filter(Charge_Resumes.CU_Operation == request.args.get('CU_Operation'))
                    if 'Typ_Code' in request.args:
                        query = query.filter(Charge_Resumes.Typ_Code == request.args.get('Typ_Code'))
                    if 'CC_Cur_Code' in request.args:
                        query = query.filter(Charge_Resumes.CC_Cur_Code == request.args.get('CC_Cur_Code'))
                    if 'CI_Id' in request.args:
                        query = query.filter(Charge_Resumes.CI_Id == request.args.get('CI_Id'))
                    if 'Rat_Id' in request.args:
                        query = query.filter(Charge_Resumes.Rat_Id == request.args.get('Rat_Id'))
                    if 'Rat_Price' in request.args:
                        query = query.filter(Charge_Resumes.Rat_Price == request.args.get('Rat_Price'))
                    if 'Rat_MU_Code' in request.args:
                        query = query.filter(Charge_Resumes.Rat_MU_Code == request.args.get('Rat_MU_Code'))
                    if 'Rat_Cur_Code' in request.args:
                        query = query.filter(Charge_Resumes.Rat_Cur_Code == request.args.get('Rat_Cur_Code'))
                    if 'Rat_Period' in request.args:
                        query = query.filter(Charge_Resumes.Rat_Period == request.args.get('Rat_Period'))
                    if 'Rat_Hourly' in request.args:
                        query = query.filter(Charge_Resumes.Rat_Hourly == request.args.get('Rat_Hourly'))
                    if 'Rat_Daily' in request.args:
                        query = query.filter(Charge_Resumes.Rat_Daily == request.args.get('Rat_Daily'))
                    if 'Rat_Monthly' in request.args:
                        query = query.filter(Charge_Resumes.Rat_Monthly == request.args.get('Rat_Monthly'))
                    if 'CR_Quantity' in request.args:
                        query = query.filter(Charge_Resumes.CR_Quantity == request.args.get('CR_Quantity'))
                    if 'CR_Quantity_at_Rate' in request.args:
                        query = query.filter(Charge_Resumes.CR_Quantity_at_Rate == request.args.get('CR_Quantity_at_Rate'))
                    if 'CC_XR' in request.args:
                        query = query.filter(Charge_Resumes.CC_XR == request.args.get('CC_XR'))
                    if 'CR_Cur_XR' in request.args:
                        query = query.filter(Charge_Resumes.CR_Cur_XR == request.args.get('CR_Cur_XR'))
                    if 'CR_ST_at_Rate_Cur' in request.args:
                        query = query.filter(Charge_Resumes.CR_ST_at_Rate_Cur == request.args.get('CR_ST_at_Rate_Cur'))
                    if 'CR_ST_at_CC_Cur' in request.args:
                        query = query.filter(Charge_Resumes.CR_ST_at_CC_Cur == request.args.get('CR_ST_at_CC_Cur'))
                    if 'CR_ST_at_Cur' in request.args:
                        query = query.filter(Charge_Resumes.CR_ST_at_Cur == request.args.get('CR_ST_at_Cur'))
                    if 'Cus_Name' in request.args:
                        query = query.filter(Charge_Resumes.Cus_Name == request.args.get('Cus_Name'))
                    if 'CI_Name' in request.args:
                        query = query.filter(Charge_Resumes.CI_Name == request.args.get('CI_Name'))
                    if 'CU_Description' in request.args:
                        query = query.filter(Charge_Resumes.CU_Description == request.args.get('CU_Description'))
                    if 'CC_Description' in request.args:
                        query = query.filter(Charge_Resumes.CC_Description == request.args.get('CC_Description'))
                    if 'Rat_Period_Description' in request.args:
                        query = query.filter(Charge_Resumes.Rat_Period_Description == request.args.get('Rat_Period_Description'))
                    if 'CC_Code' in request.args:
                        query = query.filter(Charge_Resumes.CC_Code == request.args.get('CC_Code'))
                    if 'Pla_Id' in request.args:
                        query = query.filter(Charge_Resumes.Pla_Id == request.args.get('Pla_Id'))
                    if 'Pla_Name' in request.args:
                        query = query.filter(Charge_Resumes.Pla_Name == request.args.get('Pla_Name'))
                rows = query.all()
            if rows is not None:
                if type(rows) == list:
                    for i in range(len(rows)):
                        rows[i] = json.loads(rows[i].get_json())
                else:
                    rows = [json.loads(rows.get_json())]
            else:
                rows = []
            if len(rows) == 0:
                code = API_NO_DATA
                state = get_api_state(API_NO_DATA)
                
                if id is None:
                    message = f"No 'Charge_Resumes' records found"
                else:
                    message = f"No 'Charge_Resumes.User_Id' = {id} record found"
                
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Charge_Resumes',entities=rows,name=current_app.config['NAME'])

@main.route('/api/post/Charge_Resumes', methods=['POST'])
def api_post_Charge_Resumes():
    code    = API_OK
    message = 'OK'
    row     = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            row = Charge_Resumes()
            # Populates row from json, if ID=int:autoincrement then None
            row.User_Id = request.json.get('User_Id',None)
            row.Cus_Id = request.json.get('Cus_Id',None)
            row.CR_Date_From = request.json.get('CR_Date_From',None)
            row.CR_Date_To = request.json.get('CR_Date_To',None)
            row.CIT_Status = request.json.get('CIT_Status',None)
            row.Cur_Code = request.json.get('Cur_Code',None)
            row.CU_Id = request.json.get('CU_Id',None)
            row.CIT_Count = request.json.get('CIT_Count',0)
            row.CIT_Quantity = request.json.get('CIT_Quantity',0.000000000000)
            row.CIT_Generation = request.json.get('CIT_Generation',1)
            row.CI_CC_Id = request.json.get('CI_CC_Id',0)
            row.CU_Operation = request.json.get('CU_Operation',NONE)
            row.Typ_Code = request.json.get('Typ_Code',NUL)
            row.CC_Cur_Code = request.json.get('CC_Cur_Code',UF)
            row.CI_Id = request.json.get('CI_Id',1)
            row.Rat_Id = request.json.get('Rat_Id',0)
            row.Rat_Price = request.json.get('Rat_Price',0.000000000000)
            row.Rat_MU_Code = request.json.get('Rat_MU_Code',UNT)
            row.Rat_Cur_Code = request.json.get('Rat_Cur_Code',UF)
            row.Rat_Period = request.json.get('Rat_Period',1)
            row.Rat_Hourly = request.json.get('Rat_Hourly',0.000000000000)
            row.Rat_Daily = request.json.get('Rat_Daily',0.000000000000)
            row.Rat_Monthly = request.json.get('Rat_Monthly',0.000000000000)
            row.CR_Quantity = request.json.get('CR_Quantity',0.000000000000)
            row.CR_Quantity_at_Rate = request.json.get('CR_Quantity_at_Rate',0.000000000000)
            row.CC_XR = request.json.get('CC_XR',0.000000000000)
            row.CR_Cur_XR = request.json.get('CR_Cur_XR',0.000000000000)
            row.CR_ST_at_Rate_Cur = request.json.get('CR_ST_at_Rate_Cur',0.000000000000)
            row.CR_ST_at_CC_Cur = request.json.get('CR_ST_at_CC_Cur',0.000000000000)
            row.CR_ST_at_Cur = request.json.get('CR_ST_at_Cur',0.000000000000)
            row.Cus_Name = request.json.get('Cus_Name',None)
            row.CI_Name = request.json.get('CI_Name',None)
            row.CU_Description = request.json.get('CU_Description',None)
            row.CC_Description = request.json.get('CC_Description',None)
            row.Rat_Period_Description = request.json.get('Rat_Period_Description',None)
            row.CC_Code = request.json.get('CC_Code',None)
            row.Pla_Id = request.json.get('Pla_Id',0)
            row.Pla_Name = request.json.get('Pla_Name',None)
            # ----------------------------------------------------------
            db.session.add(row)
            db.session.flush()
            db.session.commit()
            db.session.flush()
            db.session.refresh(row)
            db.session.flush()
            message = f"Created 'Charge_Resumes' User_Id = {row.User_Id}"
            row     = json.loads(row.get_json())
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
    else:
        code    = API_ERROR
        message = 'Unauthorized request'            
    return get_api_response(code=code,message=message,kind='Charge_Resumes',entities=[row],name=current_app.config['NAME'])

@main.route('/api/put/Charge_Resumes/<int:id>', methods=['PUT'])
def api_put_Charge_Resumes(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Charge_Resumes()
            query = db.session.query(Charge_Resumes)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Charge_Resumes.User_Id == id_values[id_counter])
            id_counter += 1
            query = query.filter(Charge_Resumes.Cus_Id == id_values[id_counter])
            id_counter += 1
            query = query.filter(Charge_Resumes.CR_Date_From == id_values[id_counter])
            id_counter += 1
            query = query.filter(Charge_Resumes.CR_Date_To == id_values[id_counter])
            id_counter += 1
            query = query.filter(Charge_Resumes.CIT_Status == id_values[id_counter])
            id_counter += 1
            query = query.filter(Charge_Resumes.Cur_Code == id_values[id_counter])
            id_counter += 1
            query = query.filter(Charge_Resumes.CU_Id == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                if 'CIT_Count' in request.json.keys():
                    row.CIT_Count = request.json.get('CIT_Count')
                if 'CIT_Quantity' in request.json.keys():
                    row.CIT_Quantity = request.json.get('CIT_Quantity')
                if 'CIT_Generation' in request.json.keys():
                    row.CIT_Generation = request.json.get('CIT_Generation')
                if 'CI_CC_Id' in request.json.keys():
                    row.CI_CC_Id = request.json.get('CI_CC_Id')
                if 'CU_Operation' in request.json.keys():
                    row.CU_Operation = request.json.get('CU_Operation')
                if 'Typ_Code' in request.json.keys():
                    row.Typ_Code = request.json.get('Typ_Code')
                if 'CC_Cur_Code' in request.json.keys():
                    row.CC_Cur_Code = request.json.get('CC_Cur_Code')
                if 'CI_Id' in request.json.keys():
                    row.CI_Id = request.json.get('CI_Id')
                if 'Rat_Id' in request.json.keys():
                    row.Rat_Id = request.json.get('Rat_Id')
                if 'Rat_Price' in request.json.keys():
                    row.Rat_Price = request.json.get('Rat_Price')
                if 'Rat_MU_Code' in request.json.keys():
                    row.Rat_MU_Code = request.json.get('Rat_MU_Code')
                if 'Rat_Cur_Code' in request.json.keys():
                    row.Rat_Cur_Code = request.json.get('Rat_Cur_Code')
                if 'Rat_Period' in request.json.keys():
                    row.Rat_Period = request.json.get('Rat_Period')
                if 'Rat_Hourly' in request.json.keys():
                    row.Rat_Hourly = request.json.get('Rat_Hourly')
                if 'Rat_Daily' in request.json.keys():
                    row.Rat_Daily = request.json.get('Rat_Daily')
                if 'Rat_Monthly' in request.json.keys():
                    row.Rat_Monthly = request.json.get('Rat_Monthly')
                if 'CR_Quantity' in request.json.keys():
                    row.CR_Quantity = request.json.get('CR_Quantity')
                if 'CR_Quantity_at_Rate' in request.json.keys():
                    row.CR_Quantity_at_Rate = request.json.get('CR_Quantity_at_Rate')
                if 'CC_XR' in request.json.keys():
                    row.CC_XR = request.json.get('CC_XR')
                if 'CR_Cur_XR' in request.json.keys():
                    row.CR_Cur_XR = request.json.get('CR_Cur_XR')
                if 'CR_ST_at_Rate_Cur' in request.json.keys():
                    row.CR_ST_at_Rate_Cur = request.json.get('CR_ST_at_Rate_Cur')
                if 'CR_ST_at_CC_Cur' in request.json.keys():
                    row.CR_ST_at_CC_Cur = request.json.get('CR_ST_at_CC_Cur')
                if 'CR_ST_at_Cur' in request.json.keys():
                    row.CR_ST_at_Cur = request.json.get('CR_ST_at_Cur')
                if 'Cus_Name' in request.json.keys():
                    row.Cus_Name = request.json.get('Cus_Name')
                if 'CI_Name' in request.json.keys():
                    row.CI_Name = request.json.get('CI_Name')
                if 'CU_Description' in request.json.keys():
                    row.CU_Description = request.json.get('CU_Description')
                if 'CC_Description' in request.json.keys():
                    row.CC_Description = request.json.get('CC_Description')
                if 'Rat_Period_Description' in request.json.keys():
                    row.Rat_Period_Description = request.json.get('Rat_Period_Description')
                if 'CC_Code' in request.json.keys():
                    row.CC_Code = request.json.get('CC_Code')
                if 'Pla_Id' in request.json.keys():
                    row.Pla_Id = request.json.get('Pla_Id')
                if 'Pla_Name' in request.json.keys():
                    row.Pla_Name = request.json.get('Pla_Name')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Charge_Resumes' User_Id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found Charge_Resumes with User_Id = {id}"
                row     = None
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Charge_Resumes',entities=[row],name=current_app.config['NAME'])

@main.route('/api/patch/Charge_Resumes/<int:id>', methods=['PATCH'])
def api_patch_Charge_Resumes(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Charge_Resumes()
            query = db.session.query(Charge_Resumes)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Charge_Resumes.User_Id == id_values[id_counter])
            id_counter += 1
            query = query.filter(Charge_Resumes.Cus_Id == id_values[id_counter])
            id_counter += 1
            query = query.filter(Charge_Resumes.CR_Date_From == id_values[id_counter])
            id_counter += 1
            query = query.filter(Charge_Resumes.CR_Date_To == id_values[id_counter])
            id_counter += 1
            query = query.filter(Charge_Resumes.CIT_Status == id_values[id_counter])
            id_counter += 1
            query = query.filter(Charge_Resumes.Cur_Code == id_values[id_counter])
            id_counter += 1
            query = query.filter(Charge_Resumes.CU_Id == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                db.session.rollback()
                if request.values is not None and len(request.values):
                    if 'CIT_Count' in request.values:
                        row.CIT_Count = request.values.get('CIT_Count')
                    if 'CIT_Quantity' in request.values:
                        row.CIT_Quantity = request.values.get('CIT_Quantity')
                    if 'CIT_Generation' in request.values:
                        row.CIT_Generation = request.values.get('CIT_Generation')
                    if 'CI_CC_Id' in request.values:
                        row.CI_CC_Id = request.values.get('CI_CC_Id')
                    if 'CU_Operation' in request.values:
                        row.CU_Operation = request.values.get('CU_Operation')
                    if 'Typ_Code' in request.values:
                        row.Typ_Code = request.values.get('Typ_Code')
                    if 'CC_Cur_Code' in request.values:
                        row.CC_Cur_Code = request.values.get('CC_Cur_Code')
                    if 'CI_Id' in request.values:
                        row.CI_Id = request.values.get('CI_Id')
                    if 'Rat_Id' in request.values:
                        row.Rat_Id = request.values.get('Rat_Id')
                    if 'Rat_Price' in request.values:
                        row.Rat_Price = request.values.get('Rat_Price')
                    if 'Rat_MU_Code' in request.values:
                        row.Rat_MU_Code = request.values.get('Rat_MU_Code')
                    if 'Rat_Cur_Code' in request.values:
                        row.Rat_Cur_Code = request.values.get('Rat_Cur_Code')
                    if 'Rat_Period' in request.values:
                        row.Rat_Period = request.values.get('Rat_Period')
                    if 'Rat_Hourly' in request.values:
                        row.Rat_Hourly = request.values.get('Rat_Hourly')
                    if 'Rat_Daily' in request.values:
                        row.Rat_Daily = request.values.get('Rat_Daily')
                    if 'Rat_Monthly' in request.values:
                        row.Rat_Monthly = request.values.get('Rat_Monthly')
                    if 'CR_Quantity' in request.values:
                        row.CR_Quantity = request.values.get('CR_Quantity')
                    if 'CR_Quantity_at_Rate' in request.values:
                        row.CR_Quantity_at_Rate = request.values.get('CR_Quantity_at_Rate')
                    if 'CC_XR' in request.values:
                        row.CC_XR = request.values.get('CC_XR')
                    if 'CR_Cur_XR' in request.values:
                        row.CR_Cur_XR = request.values.get('CR_Cur_XR')
                    if 'CR_ST_at_Rate_Cur' in request.values:
                        row.CR_ST_at_Rate_Cur = request.values.get('CR_ST_at_Rate_Cur')
                    if 'CR_ST_at_CC_Cur' in request.values:
                        row.CR_ST_at_CC_Cur = request.values.get('CR_ST_at_CC_Cur')
                    if 'CR_ST_at_Cur' in request.values:
                        row.CR_ST_at_Cur = request.values.get('CR_ST_at_Cur')
                    if 'Cus_Name' in request.values:
                        row.Cus_Name = request.values.get('Cus_Name')
                    if 'CI_Name' in request.values:
                        row.CI_Name = request.values.get('CI_Name')
                    if 'CU_Description' in request.values:
                        row.CU_Description = request.values.get('CU_Description')
                    if 'CC_Description' in request.values:
                        row.CC_Description = request.values.get('CC_Description')
                    if 'Rat_Period_Description' in request.values:
                        row.Rat_Period_Description = request.values.get('Rat_Period_Description')
                    if 'CC_Code' in request.values:
                        row.CC_Code = request.values.get('CC_Code')
                    if 'Pla_Id' in request.values:
                        row.Pla_Id = request.values.get('Pla_Id')
                    if 'Pla_Name' in request.values:
                        row.Pla_Name = request.values.get('Pla_Name')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Charge_Resumes' User_Id = {id}"
                try:
                    row     = json.loads(row.get_json())
                except:
                    row     = None
            else:
                code    = API_NOT_FOUND
                message = f"Not found Charge_Resumes with User_Id = {id}"
                row     = None
                db.session.rollback()
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
            db.session.rollback()
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Charge_Resumes',entities=[row],name=current_app.config['NAME'])

@main.route('/api/delete/Charge_Resumes/<int:id>', methods=['DELETE'])
def api_delete_Charge_Resumes(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Charge_Resumes()
            query = db.session.query(Charge_Resumes)
            
            # First loop mandatory for row population ----------------------
            # detected primary key field: c.field
            query       = query.filter(Charge_Resumes.User_Id == id_values[id_counter])
            id_counter +=1
            # detected primary key field: c.field
            query       = query.filter(Charge_Resumes.Cus_Id == id_values[id_counter])
            id_counter +=1
            # detected primary key field: c.field
            query       = query.filter(Charge_Resumes.CR_Date_From == id_values[id_counter])
            id_counter +=1
            # detected primary key field: c.field
            query       = query.filter(Charge_Resumes.CR_Date_To == id_values[id_counter])
            id_counter +=1
            # detected primary key field: c.field
            query       = query.filter(Charge_Resumes.CIT_Status == id_values[id_counter])
            id_counter +=1
            # detected primary key field: c.field
            query       = query.filter(Charge_Resumes.Cur_Code == id_values[id_counter])
            id_counter +=1
            # detected primary key field: c.field
            query       = query.filter(Charge_Resumes.CU_Id == id_values[id_counter])
            id_counter +=1
            # --------------------------------------------------------------
            row = query.one_or_none()

            if row is not None:
                db.session.delete(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                message = f"Deleted 'Charge_Resumes' User_Id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found 'Charge_Resumes' with User_Id = {id}"
                row     = None        
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Charge_Resumes',entities=[],name=current_app.config['NAME'])

# ======================================================================# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2021-12-13 19:33:35
# =============================================================================
# gen_views.py:32 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_charge_unit_egm.py
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:37.959543
# ======================================================================        
# gen_views_form.html:AG 2021-12-13 19:33:37.959558
@main.route('/forms/Charge_Unit_EGM', methods=['GET', 'POST'])
@login_required

def forms_Charge_Unit_EGM():
    """ Form handling function for table Charge_Unit_EGM """
    logger.debug('forms_Charge_Unit_EGM(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Charge_Unit_EGM'
    class_name='charge_unit_egm'
    template_name='Charge_Unit_EGM'
    sharding=False
    CU_Id  =  request.args.get('CU_Id',0,type=int)
    parent_key   = request.args.get('parent_key',None,type=str)
    parent_value = request.args.get('parent_value',0,type=int)
    # Ensures DB Data is commited prior main query
    try:
        db.session.commit()
    except:
        db.session.rollback()
    row =  charge_unit_egm.query.filter(charge_unit_egm.CU_Id == CU_Id).first()
    if row is None:
        row=charge_unit_egm()
        session['is_new_row']=True
    session['data'] =  {  'CU_Id':row.CU_Id, 'Archive':row.Archive, 'Path':row.Path, 'Metric':row.Metric, 'Host':row.Host, 'Port':row.Port, 'User':row.User, 'Password':row.Password, 'Public_Key_File':row.Public_Key_File, 'Passphrase':row.Passphrase }
    
    if parent_key is not None:
       session['data'][parent_key] = parent_value
       print('parent_key  = ',parent_key)
       print('parent_value= ',parent_value)    
       print('session["data"][parent_key] = %s'%(parent_key,session['data'][parent_key]))
    
    form = frm_charge_unit_egm()
    
    if form.has_FKs:
        form.CU_Id.choices = db.session.query(charge_unit.CU_Id,charge_unit.CU_Description).order_by(charge_unit.CU_Description).all()

    
    # Actual Form activation here
    if form.validate_on_submit():
        # Code for SAVE option -----------------------------------------
        if form.submit_Save.data and current_user.role_id > 1:
            row.CU_Id = form.CU_Id.data
            row.Archive = form.Archive.data
            row.Path = form.Path.data
            row.Metric = form.Metric.data
            row.Host = form.Host.data
            row.Port = form.Port.data
            row.User = form.User.data
            row.Password = form.Password.data
            row.Public_Key_File = form.Public_Key_File.data
            row.Passphrase = form.Passphrase.data
            try:
               session['new_row']=str(row)
               db.session.flush()
               db.session.add(row)
               db.session.commit()
               db.session.flush()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New Charge Unit EGM created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>Charge Unit EGM CU_Id saved OK</b>')
                   flash(message)
               db.session.flush()
            except Exception as e:
               db.session.rollback()
               db.session.flush()
               message=Markup('ERROR saving Charge Unit EGM record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_Charge_Unit_EGM_query'))
        # --------------------------------------------------------------
        # Code for NEW option
        # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.flush()
            row=charge_unit_egm()
    
            return redirect(url_for('.forms_Charge_Unit_EGM'))    
    
        # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('Charge Unit EGM Record modifications discarded ...')
            flash(message)
        # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>Charge Unit EGM data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_'))    
    
    
    form.CU_Id.data = row.CU_Id
    form.Archive.data = row.Archive
    form.Path.data = row.Path
    form.Metric.data = row.Metric
    form.Host.data = row.Host
    form.Port.data = row.Port
    form.User.data = row.User
    form.Password.data = row.Password
    form.Public_Key_File.data = row.Public_Key_File
    form.Passphrase.data = row.Passphrase
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_Charge_Unit_EGM(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = []
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('charge_unit_egm.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:37.968352
# ======================================================================        
# gen_views_delete.html:AG 2021-12-13 19:33:37.968365
@main.route('/forms/Charge_Unit_EGM_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)

def forms_Charge_Unit_EGM_delete():
    """ Delete record handling function for table Charge_Unit_EGM """
    logger.debug('forms_Charge_Unit_EGM_delete(): Enter')
    CU_Id  =  request.args.get('CU_Id',0,type=int)
    row =  charge_unit_egm.query.filter(charge_unit_egm.CU_Id == CU_Id).first()

    if row is None:
        row=charge_unit_egm()
    session['data'] =  {  'CU_Id':row.CU_Id, 'Archive':row.Archive, 'Path':row.Path, 'Metric':row.Metric, 'Host':row.Host, 'Port':row.Port, 'User':row.User, 'Password':row.Password, 'Public_Key_File':row.Public_Key_File, 'Passphrase':row.Passphrase }
                       
    form = frm_charge_unit_egm_delete()

    # Tab['has_fks'] True
    
    pass # Tab['has_fks'] True
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.flush()
                db.session.delete(row)
                db.session.commit()
                db.session.flush()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('Charge Unit EGM CU_Id deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_Charge_Unit_EGM_delete',CU_Id=session['data']['CU_Id']))    
    
            return redirect(url_for('.select_Charge_Unit_EGM_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_Charge_Unit_EGM_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_Charge_Unit_EGM_query'))    
    
    logger.debug('forms_Charge_Unit_EGM_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('charge_unit_egm_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: Charge_Unit_EGM
# class_name: charge_unit_egm
# is shardened: None
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:37.990303
# ======================================================================

# gen_views_select_query.html:AG 2021-12-13 19:33:37.990316        
@main.route('/select/Charge_Unit_EGM_Query', methods=['GET','POST'])
@login_required

def select_Charge_Unit_EGM_query():
    """ Select rows handling function for table 'Charge_Unit_EGM' """
    logger.debug('select_Charge_Unit_EGM_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Charge_Unit_EGM'
    class_name='charge_unit_egm'
    template_name='Charge_Unit_EGM'
    sharding=False


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)

    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='charge_unit_egm',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='charge_unit_egm',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='charge_unit_egm',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    foreign_keys.update({'CU_Id':(charge_unit,'charge_unit','CU_Id','CU_Description','Charge Unit Id')})
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='charge_unit_egm'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    CU_Id =  request.args.get('CU_Id',None,type=str)
    Archive =  request.args.get('Archive',None,type=str)
    Path =  request.args.get('Path',None,type=str)
    Metric =  request.args.get('Metric',None,type=str)
    Host =  request.args.get('Host',None,type=str)
    Port =  request.args.get('Port',None,type=str)
    User =  request.args.get('User',None,type=str)
    Password =  request.args.get('Password',None,type=str)
    Public_Key_File =  request.args.get('Public_Key_File',None,type=str)
    Passphrase =  request.args.get('Passphrase',None,type=str)
    
    # Build default query all fields from table
    

    if CU_Id is not None and len(CU_Id)>0:
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys['CU_Id']
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)            
            set_query_option(   engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1=foreign_field,
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_Id
                )
                                
    
    
    if Archive is not None and len(Archive)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Archive:Archive',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Archive
                )
    
    
    if Path is not None and len(Path)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Path:Path',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Path
                )
    
    
    if Metric is not None and len(Metric)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Metric:Metric',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Metric
                )
    
    
    if Host is not None and len(Host)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Host:Host',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Host
                )
    
    
    if Port is not None and len(Port)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Port:Port',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Port
                )
    
    
    if User is not None and len(User)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='User:User',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%User
                )
    
    
    if Password is not None and len(Password)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Password:Password',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Password
                )
    
    
    if Public_Key_File is not None and len(Public_Key_File)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Public_Key_File:Public_Key_File',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Public_Key_File
                )
    
    
    if Passphrase is not None and len(Passphrase)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Passphrase:Passphrase',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Passphrase
                )
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['CU_Id', 'Archive', 'Path', 'Metric', 'Host', 'Port', 'User', 'Password', 'Public_Key_File', 'Passphrase']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['CU_Id', 'Archive', 'Path', 'Metric', 'Host', 'Port', 'User', 'Password', 'Public_Key_File', 'Passphrase'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'CU_Id':
                if value is not None:
                    query = query.filter_by(CU_Id=value)
            if field == 'Archive':
                if value is not None:
                    query = query.filter_by(Archive=value)
            if field == 'Path':
                if value is not None:
                    query = query.filter_by(Path=value)
            if field == 'Metric':
                if value is not None:
                    query = query.filter_by(Metric=value)
            if field == 'Host':
                if value is not None:
                    query = query.filter_by(Host=value)
            if field == 'Port':
                if value is not None:
                    query = query.filter_by(Port=value)
            if field == 'User':
                if value is not None:
                    query = query.filter_by(User=value)
            if field == 'Password':
                if value is not None:
                    query = query.filter_by(Password=value)
            if field == 'Public_Key_File':
                if value is not None:
                    query = query.filter_by(Public_Key_File=value)
            if field == 'Passphrase':
                if value is not None:
                    query = query.filter_by(Passphrase=value)
            # ------------------------------------------------------------------
    # JOIN other tables and generate foreign fields
    # Will replace class name by sharding class in joins structure
    # will have no effect in no sharding environment
    query = query.join(charge_unit,charge_unit_egm.CU_Id == charge_unit.CU_Id).add_columns(charge_unit.CU_Description)
    # ------------------------------------------------------------------
    
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:38.038058
# ======================================================================
# gen_views_api.html:AG 2021-12-13 19:33:38.038090
# table_name: Charge_Unit_EGM
# class_name: charge_unit_egm
# is shardened: None
# Table 'Charge_Unit_EGM' keys = CU_Id
# Errors: None
# PK field found 'CU_Id' db.Integer
# Charge_Unit_EGM id field is 'Charge_Unit_EGM.CU_Id' of type 'int:'

@main.route('/api/get/Charge_Unit_EGM'     , methods=['GET'])
@main.route('/api/get/Charge_Unit_EGM/<int:id>', methods=['GET'])
def api_get_Charge_Unit_EGM(id=None):
    code       = API_OK
    message    = 'OK'
    rows       = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        #response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        #response.headers['Pragma']        = 'no-cache'
        try:
            id_counter = 0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values=[id]
            # Codigo para un solo campo de id
            # chequear si marcado explicitamente
            db.session.flush()
            query = db.session.query(Charge_Unit_EGM)
            if id is not None:
                query = query.filter(Charge_Unit_EGM.CU_Id == id_values[id_counter])
                rows = query.one_or_none()
            else:
                if request.args is not None and len(request.args):
                    if 'CU_Id' in request.args:
                        query = query.filter(Charge_Unit_EGM.CU_Id == request.args.get('CU_Id'))
                    if 'Archive' in request.args:
                        query = query.filter(Charge_Unit_EGM.Archive == request.args.get('Archive'))
                    if 'Path' in request.args:
                        query = query.filter(Charge_Unit_EGM.Path == request.args.get('Path'))
                    if 'Metric' in request.args:
                        query = query.filter(Charge_Unit_EGM.Metric == request.args.get('Metric'))
                    if 'Host' in request.args:
                        query = query.filter(Charge_Unit_EGM.Host == request.args.get('Host'))
                    if 'Port' in request.args:
                        query = query.filter(Charge_Unit_EGM.Port == request.args.get('Port'))
                    if 'User' in request.args:
                        query = query.filter(Charge_Unit_EGM.User == request.args.get('User'))
                    if 'Password' in request.args:
                        query = query.filter(Charge_Unit_EGM.Password == request.args.get('Password'))
                    if 'Public_Key_File' in request.args:
                        query = query.filter(Charge_Unit_EGM.Public_Key_File == request.args.get('Public_Key_File'))
                    if 'Passphrase' in request.args:
                        query = query.filter(Charge_Unit_EGM.Passphrase == request.args.get('Passphrase'))
                rows = query.all()
            if rows is not None:
                if type(rows) == list:
                    for i in range(len(rows)):
                        rows[i] = json.loads(rows[i].get_json())
                else:
                    rows = [json.loads(rows.get_json())]
            else:
                rows = []
            if len(rows) == 0:
                code = API_NO_DATA
                state = get_api_state(API_NO_DATA)
                
                if id is None:
                    message = f"No 'Charge_Unit_EGM' records found"
                else:
                    message = f"No 'Charge_Unit_EGM.CU_Id' = {id} record found"
                
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Charge_Unit_EGM',entities=rows,name=current_app.config['NAME'])

@main.route('/api/post/Charge_Unit_EGM', methods=['POST'])
def api_post_Charge_Unit_EGM():
    code    = API_OK
    message = 'OK'
    row     = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            row = Charge_Unit_EGM()
            # Populates row from json, if ID=int:autoincrement then None
            row.CU_Id = request.json.get('CU_Id',None)
            row.Archive = request.json.get('Archive',None)
            row.Path = request.json.get('Path',None)
            row.Metric = request.json.get('Metric',None)
            row.Host = request.json.get('Host',localhost)
            row.Port = request.json.get('Port',22)
            row.User = request.json.get('User',None)
            row.Password = request.json.get('Password',None)
            row.Public_Key_File = request.json.get('Public_Key_File',None)
            row.Passphrase = request.json.get('Passphrase',None)
            # ----------------------------------------------------------
            db.session.add(row)
            db.session.flush()
            db.session.commit()
            db.session.flush()
            db.session.refresh(row)
            db.session.flush()
            message = f"Created 'Charge_Unit_EGM' CU_Id = {row.CU_Id}"
            row     = json.loads(row.get_json())
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
    else:
        code    = API_ERROR
        message = 'Unauthorized request'            
    return get_api_response(code=code,message=message,kind='Charge_Unit_EGM',entities=[row],name=current_app.config['NAME'])

@main.route('/api/put/Charge_Unit_EGM/<int:id>', methods=['PUT'])
def api_put_Charge_Unit_EGM(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Charge_Unit_EGM()
            query = db.session.query(Charge_Unit_EGM)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Charge_Unit_EGM.CU_Id == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                if 'Archive' in request.json.keys():
                    row.Archive = request.json.get('Archive')
                if 'Path' in request.json.keys():
                    row.Path = request.json.get('Path')
                if 'Metric' in request.json.keys():
                    row.Metric = request.json.get('Metric')
                if 'Host' in request.json.keys():
                    row.Host = request.json.get('Host')
                if 'Port' in request.json.keys():
                    row.Port = request.json.get('Port')
                if 'User' in request.json.keys():
                    row.User = request.json.get('User')
                if 'Password' in request.json.keys():
                    row.Password = request.json.get('Password')
                if 'Public_Key_File' in request.json.keys():
                    row.Public_Key_File = request.json.get('Public_Key_File')
                if 'Passphrase' in request.json.keys():
                    row.Passphrase = request.json.get('Passphrase')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Charge_Unit_EGM' CU_Id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found Charge_Unit_EGM with CU_Id = {id}"
                row     = None
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Charge_Unit_EGM',entities=[row],name=current_app.config['NAME'])

@main.route('/api/patch/Charge_Unit_EGM/<int:id>', methods=['PATCH'])
def api_patch_Charge_Unit_EGM(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Charge_Unit_EGM()
            query = db.session.query(Charge_Unit_EGM)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Charge_Unit_EGM.CU_Id == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                db.session.rollback()
                if request.values is not None and len(request.values):
                    if 'Archive' in request.values:
                        row.Archive = request.values.get('Archive')
                    if 'Path' in request.values:
                        row.Path = request.values.get('Path')
                    if 'Metric' in request.values:
                        row.Metric = request.values.get('Metric')
                    if 'Host' in request.values:
                        row.Host = request.values.get('Host')
                    if 'Port' in request.values:
                        row.Port = request.values.get('Port')
                    if 'User' in request.values:
                        row.User = request.values.get('User')
                    if 'Password' in request.values:
                        row.Password = request.values.get('Password')
                    if 'Public_Key_File' in request.values:
                        row.Public_Key_File = request.values.get('Public_Key_File')
                    if 'Passphrase' in request.values:
                        row.Passphrase = request.values.get('Passphrase')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Charge_Unit_EGM' CU_Id = {id}"
                try:
                    row     = json.loads(row.get_json())
                except:
                    row     = None
            else:
                code    = API_NOT_FOUND
                message = f"Not found Charge_Unit_EGM with CU_Id = {id}"
                row     = None
                db.session.rollback()
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
            db.session.rollback()
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Charge_Unit_EGM',entities=[row],name=current_app.config['NAME'])

@main.route('/api/delete/Charge_Unit_EGM/<int:id>', methods=['DELETE'])
def api_delete_Charge_Unit_EGM(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Charge_Unit_EGM()
            query = db.session.query(Charge_Unit_EGM)
            
            # First loop mandatory for row population ----------------------
            # detected primary key field: c.field
            query       = query.filter(Charge_Unit_EGM.CU_Id == id_values[id_counter])
            id_counter +=1
            # --------------------------------------------------------------
            row = query.one_or_none()

            if row is not None:
                db.session.delete(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                message = f"Deleted 'Charge_Unit_EGM' CU_Id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found 'Charge_Unit_EGM' with CU_Id = {id}"
                row     = None        
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Charge_Unit_EGM',entities=[],name=current_app.config['NAME'])

# ======================================================================# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2021-12-13 19:33:35
# =============================================================================
# gen_views.py:32 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_charge_units.py
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:38.208074
# ======================================================================        
# gen_views_form.html:AG 2021-12-13 19:33:38.208087
@main.route('/forms/Charge_Units', methods=['GET', 'POST'])
@login_required

def forms_Charge_Units():
    """ Form handling function for table Charge_Units """
    logger.debug('forms_Charge_Units(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Charge_Units'
    class_name='charge_unit'
    template_name='Charge_Units'
    sharding=False
    CU_Id  =  request.args.get('CU_Id',0,type=int)
    parent_key   = request.args.get('parent_key',None,type=str)
    parent_value = request.args.get('parent_value',0,type=int)
    # Ensures DB Data is commited prior main query
    try:
        db.session.commit()
    except:
        db.session.rollback()
    row =  charge_unit.query.filter(charge_unit.CU_Id == CU_Id).first()
    if row is None:
        row=charge_unit()
        session['is_new_row']=True
    session['data'] =  {  'CU_Id':row.CU_Id, 'CI_Id':row.CI_Id, 'CU_Description':row.CU_Description, 'CU_UUID':row.CU_UUID, 'CU_Is_Billeable':row.CU_Is_Billeable, 'CU_Is_Always_Billeable':row.CU_Is_Always_Billeable, 'CU_Quantity':row.CU_Quantity, 'CU_Operation':row.CU_Operation, 'Typ_Code':row.Typ_Code, 'CIT_Generation':row.CIT_Generation, 'Rat_Id':row.Rat_Id, 'CU_Reference_1':row.CU_Reference_1, 'CU_Reference_2':row.CU_Reference_2, 'CU_Reference_3':row.CU_Reference_3 }
    
    if parent_key is not None:
       session['data'][parent_key] = parent_value
       print('parent_key  = ',parent_key)
       print('parent_value= ',parent_value)    
       print('session["data"][parent_key] = %s'%(parent_key,session['data'][parent_key]))
    
    form = frm_charge_unit()
    
    if form.has_FKs:
        form.CI_Id.choices = db.session.query(configuration_item.CI_Id,configuration_item.CI_Name).order_by(configuration_item.CI_Name).all()
        form.CU_Operation.choices = db.session.query(cu_operation.CU_Operation,cu_operation.Value).order_by(cu_operation.Value).all()
        form.Typ_Code.choices = db.session.query(cu_type.Typ_Code,cu_type.Typ_Description).order_by(cu_type.Typ_Description).all()
        form.CIT_Generation.choices = db.session.query(cit_generation.CIT_Generation,cit_generation.Value).order_by(cit_generation.Value).all()

    
    # Actual Form activation here
    if form.validate_on_submit():
        # Code for SAVE option -----------------------------------------
        if form.submit_Save.data and current_user.role_id > 1:
            
            row.CI_Id = form.CI_Id.data
            row.CU_Description = form.CU_Description.data
            row.CU_UUID = form.CU_UUID.data
            row.CU_Is_Billeable = form.CU_Is_Billeable.data
            row.CU_Is_Always_Billeable = form.CU_Is_Always_Billeable.data
            row.CU_Quantity = form.CU_Quantity.data
            row.CU_Operation = form.CU_Operation.data
            row.Typ_Code = form.Typ_Code.data
            row.CIT_Generation = form.CIT_Generation.data
            row.Rat_Id = form.Rat_Id.data
            row.CU_Reference_1 = form.CU_Reference_1.data
            row.CU_Reference_2 = form.CU_Reference_2.data
            row.CU_Reference_3 = form.CU_Reference_3.data
            try:
               session['new_row']=str(row)
               db.session.flush()
               db.session.add(row)
               db.session.commit()
               db.session.flush()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New Charge Unit created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>Charge Unit CU_Id saved OK</b>')
                   flash(message)
               db.session.flush()
            except Exception as e:
               db.session.rollback()
               db.session.flush()
               message=Markup('ERROR saving Charge Unit record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_Charge_Units_query'))
        # --------------------------------------------------------------
        # Code for NEW option
        # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.flush()
            row=charge_unit()
    
            return redirect(url_for('.forms_Charge_Units',CU_Id=row.CU_Id))
    
        # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('Charge Unit Record modifications discarded ...')
            flash(message)
        # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>Charge Unit data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_Charge_Units',CU_Id=row.CU_Id))
    
    
    form.CI_Id.data = row.CI_Id
    form.CU_Description.data = row.CU_Description
    form.CU_UUID.data = row.CU_UUID
    form.CU_Is_Billeable.data = row.CU_Is_Billeable
    form.CU_Is_Always_Billeable.data = row.CU_Is_Always_Billeable
    form.CU_Quantity.data = row.CU_Quantity
    form.CU_Operation.data = row.CU_Operation
    form.Typ_Code.data = row.Typ_Code
    form.CIT_Generation.data = row.CIT_Generation
    form.Rat_Id.data = row.Rat_Id
    form.CU_Reference_1.data = row.CU_Reference_1
    form.CU_Reference_2.data = row.CU_Reference_2
    form.CU_Reference_3.data = row.CU_Reference_3
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_Charge_Units(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = [{'name': 'charge_items', 'class': 'charge_item', 'backref': 'charge_unit', 'caption': 'Charge Items', 'table': 'Charge_Items'}, {'name': 'charge_unit_egm', 'class': 'charge_unit_egm', 'backref': 'charge_unit', 'caption': 'Charge Unit EGM', 'table': 'Charge_Unit_EGM'}]
    
    from flask_sqlalchemy import Pagination
    # [{'name': 'charge_items', 'class': 'charge_item', 'backref': 'charge_unit', 'caption': 'Charge Items', 'table': 'Charge_Items'}, {'name': 'charge_unit_egm', 'class': 'charge_unit_egm', 'backref': 'charge_unit', 'caption': 'Charge Unit EGM', 'table': 'Charge_Unit_EGM'}]
    try:
        if hasattr(row, 'charge_items'):
            P.append(({'name': 'charge_items', 'class': 'charge_item', 'backref': 'charge_unit', 'caption': 'Charge Items', 'table': 'Charge_Items'},row.charge_items.paginate()))
    except Exception as e:
        print(f'Exception: {str(e)}')
    try:
        if hasattr(row, 'charge_unit_egm'):
            P.append(({'name': 'charge_unit_egm', 'class': 'charge_unit_egm', 'backref': 'charge_unit', 'caption': 'Charge Unit EGM', 'table': 'Charge_Unit_EGM'},row.charge_unit_egm.paginate()))
    except Exception as e:
        print(f'Exception: {str(e)}')
    
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('charge_units.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:38.217500
# ======================================================================        
# gen_views_delete.html:AG 2021-12-13 19:33:38.217513
@main.route('/forms/Charge_Units_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)
@admin_required
def forms_Charge_Units_delete():
    """ Delete record handling function for table Charge_Units """
    logger.debug('forms_Charge_Units_delete(): Enter')
    CU_Id  =  request.args.get('CU_Id',0,type=int)
    row =  charge_unit.query.filter(charge_unit.CU_Id == CU_Id).first()

    if row is None:
        row=charge_unit()
    session['data'] =  {  'CU_Id':row.CU_Id, 'CI_Id':row.CI_Id, 'CU_Description':row.CU_Description, 'CU_UUID':row.CU_UUID, 'CU_Is_Billeable':row.CU_Is_Billeable, 'CU_Is_Always_Billeable':row.CU_Is_Always_Billeable, 'CU_Quantity':row.CU_Quantity, 'CU_Operation':row.CU_Operation, 'Typ_Code':row.Typ_Code, 'CIT_Generation':row.CIT_Generation, 'Rat_Id':row.Rat_Id, 'CU_Reference_1':row.CU_Reference_1, 'CU_Reference_2':row.CU_Reference_2, 'CU_Reference_3':row.CU_Reference_3 }
                       
    form = frm_charge_unit_delete()

    # Tab['has_fks'] True
    
    pass # Tab['has_fks'] True
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.flush()
                db.session.delete(row)
                db.session.commit()
                db.session.flush()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('Charge Unit CU_Id deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_Charge_Units_delete',CU_Id=session['data']['CU_Id']))    
    
            return redirect(url_for('.select_Charge_Units_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_Charge_Units_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_Charge_Units_query'))    
    
    logger.debug('forms_Charge_Units_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('charge_units_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: Charge_Units
# class_name: charge_unit
# is shardened: False
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:38.237360
# ======================================================================

# gen_views_select_query.html:AG 2021-12-13 19:33:38.237375        
@main.route('/select/Charge_Units_Query', methods=['GET','POST'])
@login_required
@admin_required
def select_Charge_Units_query():
    """ Select rows handling function for table 'Charge_Units' """
    logger.debug('select_Charge_Units_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Charge_Units'
    class_name='charge_unit'
    template_name='Charge_Units'
    sharding=False


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)

    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='charge_unit',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='charge_unit',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='charge_unit',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    foreign_keys.update({'CI_Id':(configuration_item,'configuration_item','CI_Id','CI_Name','Configuration Item Id')})
    foreign_keys.update({'CU_Operation':(cu_operation,'cu_operation','CU_Operation','Value','Conversion Operation')})
    foreign_keys.update({'Typ_Code':(cu_type,'cu_type','Typ_Code','Typ_Description','Type')})
    foreign_keys.update({'CIT_Generation':(cit_generation,'cit_generation','CIT_Generation','Value','Item Generation Type')})
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='charge_unit'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    CU_Id =  request.args.get('CU_Id',None,type=str)
    CI_Id =  request.args.get('CI_Id',None,type=str)
    CU_Description =  request.args.get('CU_Description',None,type=str)
    CU_UUID =  request.args.get('CU_UUID',None,type=str)
    CU_Is_Billeable =  request.args.get('CU_Is_Billeable',None,type=str)
    CU_Is_Always_Billeable =  request.args.get('CU_Is_Always_Billeable',None,type=str)
    CU_Quantity =  request.args.get('CU_Quantity',None,type=str)
    CU_Operation =  request.args.get('CU_Operation',None,type=str)
    Typ_Code =  request.args.get('Typ_Code',None,type=str)
    CIT_Generation =  request.args.get('CIT_Generation',None,type=str)
    Rat_Id =  request.args.get('Rat_Id',None,type=str)
    CU_Reference_1 =  request.args.get('CU_Reference_1',None,type=str)
    CU_Reference_2 =  request.args.get('CU_Reference_2',None,type=str)
    CU_Reference_3 =  request.args.get('CU_Reference_3',None,type=str)
    
    # Build default query all fields from table
    

    if CU_Id is not None and len(CU_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CU_Id:Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_Id
                )
    
    
    if CI_Id is not None and len(CI_Id)>0:
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys['CI_Id']
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)            
            set_query_option(   engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1=foreign_field,
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CI_Id
                )
                                
    
    
    if CU_Description is not None and len(CU_Description)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CU_Description:Description',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_Description
                )
    
    
    if CU_UUID is not None and len(CU_UUID)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CU_UUID:UUID',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_UUID
                )
    
    
    if CU_Is_Billeable is not None and len(CU_Is_Billeable)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CU_Is_Billeable:Is Billeable',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_Is_Billeable
                )
    
    
    if CU_Is_Always_Billeable is not None and len(CU_Is_Always_Billeable)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CU_Is_Always_Billeable:Is Always Billeable',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_Is_Always_Billeable
                )
    
    
    if CU_Quantity is not None and len(CU_Quantity)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CU_Quantity:Quantity',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_Quantity
                )
    
    
    if CU_Operation is not None and len(CU_Operation)>0:
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys['CU_Operation']
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)            
            set_query_option(   engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1=foreign_field,
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_Operation
                )
                                
    
    
    if Typ_Code is not None and len(Typ_Code)>0:
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys['Typ_Code']
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)            
            set_query_option(   engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1=foreign_field,
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Typ_Code
                )
                                
    
    
    if CIT_Generation is not None and len(CIT_Generation)>0:
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys['CIT_Generation']
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)            
            set_query_option(   engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1=foreign_field,
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CIT_Generation
                )
                                
    
    
    if Rat_Id is not None and len(Rat_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Rat_Id:Rate Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Rat_Id
                )
    
    
    if CU_Reference_1 is not None and len(CU_Reference_1)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CU_Reference_1:Reference 1',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_Reference_1
                )
    
    
    if CU_Reference_2 is not None and len(CU_Reference_2)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CU_Reference_2:Reference 2',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_Reference_2
                )
    
    
    if CU_Reference_3 is not None and len(CU_Reference_3)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CU_Reference_3:Reference 3',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_Reference_3
                )
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['CU_Id', 'CI_Id', 'CU_Description', 'CU_UUID', 'CU_Is_Billeable', 'CU_Is_Always_Billeable', 'CU_Quantity', 'CU_Operation', 'Typ_Code', 'CIT_Generation', 'Rat_Id', 'CU_Reference_1', 'CU_Reference_2', 'CU_Reference_3']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['CU_Id', 'CI_Id', 'CU_Description', 'CU_UUID', 'CU_Is_Billeable', 'CU_Is_Always_Billeable', 'CU_Quantity', 'CU_Operation', 'Typ_Code', 'CIT_Generation', 'Rat_Id', 'CU_Reference_1', 'CU_Reference_2', 'CU_Reference_3'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'CU_Id':
                if value is not None:
                    query = query.filter_by(CU_Id=value)
            if field == 'CI_Id':
                if value is not None:
                    query = query.filter_by(CI_Id=value)
            if field == 'CU_Description':
                if value is not None:
                    query = query.filter_by(CU_Description=value)
            if field == 'CU_UUID':
                if value is not None:
                    query = query.filter_by(CU_UUID=value)
            if field == 'CU_Is_Billeable':
                if value is not None:
                    query = query.filter_by(CU_Is_Billeable=value)
            if field == 'CU_Is_Always_Billeable':
                if value is not None:
                    query = query.filter_by(CU_Is_Always_Billeable=value)
            if field == 'CU_Quantity':
                if value is not None:
                    query = query.filter_by(CU_Quantity=value)
            if field == 'CU_Operation':
                if value is not None:
                    query = query.filter_by(CU_Operation=value)
            if field == 'Typ_Code':
                if value is not None:
                    query = query.filter_by(Typ_Code=value)
            if field == 'CIT_Generation':
                if value is not None:
                    query = query.filter_by(CIT_Generation=value)
            if field == 'Rat_Id':
                if value is not None:
                    query = query.filter_by(Rat_Id=value)
            if field == 'CU_Reference_1':
                if value is not None:
                    query = query.filter_by(CU_Reference_1=value)
            if field == 'CU_Reference_2':
                if value is not None:
                    query = query.filter_by(CU_Reference_2=value)
            if field == 'CU_Reference_3':
                if value is not None:
                    query = query.filter_by(CU_Reference_3=value)
            # ------------------------------------------------------------------
    # JOIN other tables and generate foreign fields
    # Will replace class name by sharding class in joins structure
    # will have no effect in no sharding environment
    query = query.join(configuration_item,charge_unit.CI_Id == configuration_item.CI_Id).add_columns(configuration_item.CI_Name).join(cu_operation,charge_unit.CU_Operation == cu_operation.CU_Operation).add_columns(cu_operation.Value).join(cu_type,charge_unit.Typ_Code == cu_type.Typ_Code).add_columns(cu_type.Typ_Description).join(cit_generation,charge_unit.CIT_Generation == cit_generation.CIT_Generation).add_columns(cit_generation.Value)
    # ------------------------------------------------------------------
    
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:38.270988
# ======================================================================
# gen_views_api.html:AG 2021-12-13 19:33:38.271004
# table_name: Charge_Units
# class_name: charge_unit
# is shardened: False
# Table 'Charge_Units' keys = CU_Id
# Errors: None
# ID field found 'CU_Id' auto_increment db.Integer
# Charge_Units id field is 'Charge_Units.CU_Id' of type 'int:'

@main.route('/api/get/Charge_Units'     , methods=['GET'])
@main.route('/api/get/Charge_Units/<int:id>', methods=['GET'])
def api_get_Charge_Units(id=None):
    code       = API_OK
    message    = 'OK'
    rows       = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        #response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        #response.headers['Pragma']        = 'no-cache'
        try:
            id_counter = 0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values=[id]
            # Codigo para un solo campo de id
            # chequear si marcado explicitamente
            db.session.flush()
            query = db.session.query(Charge_Units)
            if id is not None:
                query = query.filter(Charge_Units.CU_Id == id_values[id_counter])
                rows = query.one_or_none()
            else:
                if request.args is not None and len(request.args):
                    if 'CU_Id' in request.args:
                        query = query.filter(Charge_Units.CU_Id == request.args.get('CU_Id'))
                    if 'CI_Id' in request.args:
                        query = query.filter(Charge_Units.CI_Id == request.args.get('CI_Id'))
                    if 'CU_Description' in request.args:
                        query = query.filter(Charge_Units.CU_Description == request.args.get('CU_Description'))
                    if 'CU_UUID' in request.args:
                        query = query.filter(Charge_Units.CU_UUID == request.args.get('CU_UUID'))
                    if 'CU_Is_Billeable' in request.args:
                        query = query.filter(Charge_Units.CU_Is_Billeable == request.args.get('CU_Is_Billeable'))
                    if 'CU_Is_Always_Billeable' in request.args:
                        query = query.filter(Charge_Units.CU_Is_Always_Billeable == request.args.get('CU_Is_Always_Billeable'))
                    if 'CU_Quantity' in request.args:
                        query = query.filter(Charge_Units.CU_Quantity == request.args.get('CU_Quantity'))
                    if 'CU_Operation' in request.args:
                        query = query.filter(Charge_Units.CU_Operation == request.args.get('CU_Operation'))
                    if 'Typ_Code' in request.args:
                        query = query.filter(Charge_Units.Typ_Code == request.args.get('Typ_Code'))
                    if 'CIT_Generation' in request.args:
                        query = query.filter(Charge_Units.CIT_Generation == request.args.get('CIT_Generation'))
                    if 'Rat_Id' in request.args:
                        query = query.filter(Charge_Units.Rat_Id == request.args.get('Rat_Id'))
                    if 'CU_Reference_1' in request.args:
                        query = query.filter(Charge_Units.CU_Reference_1 == request.args.get('CU_Reference_1'))
                    if 'CU_Reference_2' in request.args:
                        query = query.filter(Charge_Units.CU_Reference_2 == request.args.get('CU_Reference_2'))
                    if 'CU_Reference_3' in request.args:
                        query = query.filter(Charge_Units.CU_Reference_3 == request.args.get('CU_Reference_3'))
                rows = query.all()
            if rows is not None:
                if type(rows) == list:
                    for i in range(len(rows)):
                        rows[i] = json.loads(rows[i].get_json())
                else:
                    rows = [json.loads(rows.get_json())]
            else:
                rows = []
            if len(rows) == 0:
                code = API_NO_DATA
                state = get_api_state(API_NO_DATA)
                
                if id is None:
                    message = f"No 'Charge_Units' records found"
                else:
                    message = f"No 'Charge_Units.CU_Id' = {id} record found"
                
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Charge_Units',entities=rows,name=current_app.config['NAME'])

@main.route('/api/post/Charge_Units', methods=['POST'])
def api_post_Charge_Units():
    code    = API_OK
    message = 'OK'
    row     = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            row = Charge_Units()
            # Populates row from json, if ID=int:autoincrement then None
            row.CU_Id = None
            row.CI_Id = request.json.get('CI_Id',None)
            row.CU_Description = request.json.get('CU_Description',None)
            row.CU_UUID = request.json.get('CU_UUID',None)
            row.CU_Is_Billeable = request.json.get('CU_Is_Billeable',0)
            row.CU_Is_Always_Billeable = request.json.get('CU_Is_Always_Billeable',0)
            row.CU_Quantity = request.json.get('CU_Quantity',None)
            row.CU_Operation = request.json.get('CU_Operation',None)
            row.Typ_Code = request.json.get('Typ_Code',None)
            row.CIT_Generation = request.json.get('CIT_Generation',None)
            row.Rat_Id = request.json.get('Rat_Id',None)
            row.CU_Reference_1 = request.json.get('CU_Reference_1',None)
            row.CU_Reference_2 = request.json.get('CU_Reference_2',None)
            row.CU_Reference_3 = request.json.get('CU_Reference_3',None)
            # ----------------------------------------------------------
            db.session.add(row)
            db.session.flush()
            db.session.commit()
            db.session.flush()
            db.session.refresh(row)
            db.session.flush()
            message = f"Created 'Charge_Units' CU_Id = {row.CU_Id}"
            row     = json.loads(row.get_json())
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
    else:
        code    = API_ERROR
        message = 'Unauthorized request'            
    return get_api_response(code=code,message=message,kind='Charge_Units',entities=[row],name=current_app.config['NAME'])

@main.route('/api/put/Charge_Units/<int:id>', methods=['PUT'])
def api_put_Charge_Units(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Charge_Units()
            query = db.session.query(Charge_Units)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Charge_Units.CU_Id == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                if 'CI_Id' in request.json.keys():
                    row.CI_Id = request.json.get('CI_Id')
                if 'CU_Description' in request.json.keys():
                    row.CU_Description = request.json.get('CU_Description')
                if 'CU_UUID' in request.json.keys():
                    row.CU_UUID = request.json.get('CU_UUID')
                if 'CU_Is_Billeable' in request.json.keys():
                    row.CU_Is_Billeable = request.json.get('CU_Is_Billeable')
                if 'CU_Is_Always_Billeable' in request.json.keys():
                    row.CU_Is_Always_Billeable = request.json.get('CU_Is_Always_Billeable')
                if 'CU_Quantity' in request.json.keys():
                    row.CU_Quantity = request.json.get('CU_Quantity')
                if 'CU_Operation' in request.json.keys():
                    row.CU_Operation = request.json.get('CU_Operation')
                if 'Typ_Code' in request.json.keys():
                    row.Typ_Code = request.json.get('Typ_Code')
                if 'CIT_Generation' in request.json.keys():
                    row.CIT_Generation = request.json.get('CIT_Generation')
                if 'Rat_Id' in request.json.keys():
                    row.Rat_Id = request.json.get('Rat_Id')
                if 'CU_Reference_1' in request.json.keys():
                    row.CU_Reference_1 = request.json.get('CU_Reference_1')
                if 'CU_Reference_2' in request.json.keys():
                    row.CU_Reference_2 = request.json.get('CU_Reference_2')
                if 'CU_Reference_3' in request.json.keys():
                    row.CU_Reference_3 = request.json.get('CU_Reference_3')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Charge_Units' CU_Id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found Charge_Units with CU_Id = {id}"
                row     = None
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Charge_Units',entities=[row],name=current_app.config['NAME'])

@main.route('/api/patch/Charge_Units/<int:id>', methods=['PATCH'])
def api_patch_Charge_Units(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Charge_Units()
            query = db.session.query(Charge_Units)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Charge_Units.CU_Id == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                db.session.rollback()
                if request.values is not None and len(request.values):
                    if 'CI_Id' in request.values:
                        row.CI_Id = request.values.get('CI_Id')
                    if 'CU_Description' in request.values:
                        row.CU_Description = request.values.get('CU_Description')
                    if 'CU_UUID' in request.values:
                        row.CU_UUID = request.values.get('CU_UUID')
                    if 'CU_Is_Billeable' in request.values:
                        row.CU_Is_Billeable = request.values.get('CU_Is_Billeable')
                    if 'CU_Is_Always_Billeable' in request.values:
                        row.CU_Is_Always_Billeable = request.values.get('CU_Is_Always_Billeable')
                    if 'CU_Quantity' in request.values:
                        row.CU_Quantity = request.values.get('CU_Quantity')
                    if 'CU_Operation' in request.values:
                        row.CU_Operation = request.values.get('CU_Operation')
                    if 'Typ_Code' in request.values:
                        row.Typ_Code = request.values.get('Typ_Code')
                    if 'CIT_Generation' in request.values:
                        row.CIT_Generation = request.values.get('CIT_Generation')
                    if 'Rat_Id' in request.values:
                        row.Rat_Id = request.values.get('Rat_Id')
                    if 'CU_Reference_1' in request.values:
                        row.CU_Reference_1 = request.values.get('CU_Reference_1')
                    if 'CU_Reference_2' in request.values:
                        row.CU_Reference_2 = request.values.get('CU_Reference_2')
                    if 'CU_Reference_3' in request.values:
                        row.CU_Reference_3 = request.values.get('CU_Reference_3')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Charge_Units' CU_Id = {id}"
                try:
                    row     = json.loads(row.get_json())
                except:
                    row     = None
            else:
                code    = API_NOT_FOUND
                message = f"Not found Charge_Units with CU_Id = {id}"
                row     = None
                db.session.rollback()
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
            db.session.rollback()
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Charge_Units',entities=[row],name=current_app.config['NAME'])

@main.route('/api/delete/Charge_Units/<int:id>', methods=['DELETE'])
def api_delete_Charge_Units(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Charge_Units()
            query = db.session.query(Charge_Units)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Charge_Units.CU_Id == id)
            # --------------------------------------------------------------
            row = query.one_or_none()

            if row is not None:
                db.session.delete(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                message = f"Deleted 'Charge_Units' CU_Id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found 'Charge_Units' with CU_Id = {id}"
                row     = None        
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Charge_Units',entities=[],name=current_app.config['NAME'])

# ======================================================================# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2021-12-13 19:33:35
# =============================================================================
# gen_views.py:32 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_cit_generations.py
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:36.663879
# ======================================================================        
# gen_views_form.html:AG 2021-12-13 19:33:36.663902
@main.route('/forms/CIT_Generations', methods=['GET', 'POST'])
@login_required

def forms_CIT_Generations():
    """ Form handling function for table CIT_Generations """
    logger.debug('forms_CIT_Generations(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='CIT_Generations'
    class_name='cit_generation'
    template_name='CIT_Generations'
    sharding=False
    CIT_Generation  =  request.args.get('CIT_Generation',0,type=int)
    
    # Ensures DB Data is commited prior main query
    try:
        db.session.commit()
    except:
        db.session.rollback()
    row =  cit_generation.query.filter(cit_generation.CIT_Generation == CIT_Generation).first()
    if row is None:
        row=cit_generation()
        session['is_new_row']=True
    session['data'] =  {  'CIT_Generation':row.CIT_Generation, 'Value':row.Value }
    
    form = frm_cit_generation()
    
    # Actual Form activation here
    if form.validate_on_submit():
        # Code for SAVE option -----------------------------------------
        if form.submit_Save.data and current_user.role_id > 1:
            row.CIT_Generation = form.CIT_Generation.data
            row.Value = form.Value.data
            try:
               session['new_row']=str(row)
               db.session.flush()
               db.session.add(row)
               db.session.commit()
               db.session.flush()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New Configuration Item Generation Type created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>Configuration Item Generation Type CIT_Generation saved OK</b>')
                   flash(message)
               db.session.flush()
            except Exception as e:
               db.session.rollback()
               db.session.flush()
               message=Markup('ERROR saving Configuration Item Generation Type record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_CIT_Generations_query'))
        # --------------------------------------------------------------
        # Code for NEW option
        # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.flush()
            row=cit_generation()
    
            return redirect(url_for('.forms_CIT_Generations'))    
    
        # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('Configuration Item Generation Type Record modifications discarded ...')
            flash(message)
        # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>Configuration Item Generation Type data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_'))    
    
    
    form.CIT_Generation.data = row.CIT_Generation
    form.Value.data = row.Value
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_CIT_Generations(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = [{'name': 'charge_units', 'class': 'charge_unit', 'backref': 'cit_generation', 'caption': 'Charge Units', 'table': 'Charge_Units'}]
    
    from flask_sqlalchemy import Pagination
    # [{'name': 'charge_units', 'class': 'charge_unit', 'backref': 'cit_generation', 'caption': 'Charge Units', 'table': 'Charge_Units'}]
    try:
        if hasattr(row, 'charge_units'):
            P.append(({'name': 'charge_units', 'class': 'charge_unit', 'backref': 'cit_generation', 'caption': 'Charge Units', 'table': 'Charge_Units'},row.charge_units.paginate()))
    except Exception as e:
        print(f'Exception: {str(e)}')
    
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('cit_generations.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:36.674536
# ======================================================================        
# gen_views_delete.html:AG 2021-12-13 19:33:36.674551
@main.route('/forms/CIT_Generations_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)
@admin_required
def forms_CIT_Generations_delete():
    """ Delete record handling function for table CIT_Generations """
    logger.debug('forms_CIT_Generations_delete(): Enter')
    CIT_Generation  =  request.args.get('CIT_Generation',0,type=int)
    row =  cit_generation.query.filter(cit_generation.CIT_Generation == CIT_Generation).first()

    if row is None:
        row=cit_generation()
    session['data'] =  {  'CIT_Generation':row.CIT_Generation, 'Value':row.Value }
                       
    form = frm_cit_generation_delete()

    # Tab['has_fks'] False
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.flush()
                db.session.delete(row)
                db.session.commit()
                db.session.flush()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('Configuration Item Generation Type CIT_Generation deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_CIT_Generations_delete',CIT_Generation=session['data']['CIT_Generation']))    
    
            return redirect(url_for('.select_CIT_Generations_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_CIT_Generations_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_CIT_Generations_query'))    
    
    logger.debug('forms_CIT_Generations_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('cit_generations_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: CIT_Generations
# class_name: cit_generation
# is shardened: None
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:36.697905
# ======================================================================

# gen_views_select_query.html:AG 2021-12-13 19:33:36.697921        
@main.route('/select/CIT_Generations_Query', methods=['GET','POST'])
@login_required
@admin_required
def select_CIT_Generations_query():
    """ Select rows handling function for table 'CIT_Generations' """
    logger.debug('select_CIT_Generations_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='CIT_Generations'
    class_name='cit_generation'
    template_name='CIT_Generations'
    sharding=False


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)

    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='cit_generation',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='cit_generation',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='cit_generation',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='cit_generation'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    CIT_Generation =  request.args.get('CIT_Generation',None,type=str)
    Value =  request.args.get('Value',None,type=str)
    
    # Build default query all fields from table
    

    if CIT_Generation is not None and len(CIT_Generation)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CIT_Generation:CIT_Generation',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CIT_Generation
                )
    
    
    if Value is not None and len(Value)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Value:Value',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Value
                )
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['CIT_Generation', 'Value']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['CIT_Generation', 'Value'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'CIT_Generation':
                if value is not None:
                    query = query.filter_by(CIT_Generation=value)
            if field == 'Value':
                if value is not None:
                    query = query.filter_by(Value=value)
            
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:36.737032
# ======================================================================
# gen_views_api.html:AG 2021-12-13 19:33:36.737047
# table_name: CIT_Generations
# class_name: cit_generation
# is shardened: None
# Table 'CIT_Generations' keys = CIT_Generation
# Errors: None
# PK field found 'CIT_Generation' db.Integer
# CIT_Generations id field is 'CIT_Generations.CIT_Generation' of type 'int:'

@main.route('/api/get/CIT_Generations'     , methods=['GET'])
@main.route('/api/get/CIT_Generations/<int:id>', methods=['GET'])
def api_get_CIT_Generations(id=None):
    code       = API_OK
    message    = 'OK'
    rows       = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        #response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        #response.headers['Pragma']        = 'no-cache'
        try:
            id_counter = 0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values=[id]
            # Codigo para un solo campo de id
            # chequear si marcado explicitamente
            db.session.flush()
            query = db.session.query(CIT_Generations)
            if id is not None:
                query = query.filter(CIT_Generations.CIT_Generation == id_values[id_counter])
                rows = query.one_or_none()
            else:
                if request.args is not None and len(request.args):
                    if 'CIT_Generation' in request.args:
                        query = query.filter(CIT_Generations.CIT_Generation == request.args.get('CIT_Generation'))
                    if 'Value' in request.args:
                        query = query.filter(CIT_Generations.Value == request.args.get('Value'))
                rows = query.all()
            if rows is not None:
                if type(rows) == list:
                    for i in range(len(rows)):
                        rows[i] = json.loads(rows[i].get_json())
                else:
                    rows = [json.loads(rows.get_json())]
            else:
                rows = []
            if len(rows) == 0:
                code = API_NO_DATA
                state = get_api_state(API_NO_DATA)
                
                if id is None:
                    message = f"No 'CIT_Generations' records found"
                else:
                    message = f"No 'CIT_Generations.CIT_Generation' = {id} record found"
                
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='CIT_Generations',entities=rows,name=current_app.config['NAME'])

@main.route('/api/post/CIT_Generations', methods=['POST'])
def api_post_CIT_Generations():
    code    = API_OK
    message = 'OK'
    row     = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            row = CIT_Generations()
            # Populates row from json, if ID=int:autoincrement then None
            row.CIT_Generation = request.json.get('CIT_Generation',None)
            row.Value = request.json.get('Value',None)
            # ----------------------------------------------------------
            db.session.add(row)
            db.session.flush()
            db.session.commit()
            db.session.flush()
            db.session.refresh(row)
            db.session.flush()
            message = f"Created 'CIT_Generations' CIT_Generation = {row.CIT_Generation}"
            row     = json.loads(row.get_json())
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
    else:
        code    = API_ERROR
        message = 'Unauthorized request'            
    return get_api_response(code=code,message=message,kind='CIT_Generations',entities=[row],name=current_app.config['NAME'])

@main.route('/api/put/CIT_Generations/<int:id>', methods=['PUT'])
def api_put_CIT_Generations(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = CIT_Generations()
            query = db.session.query(CIT_Generations)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(CIT_Generations.CIT_Generation == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                if 'Value' in request.json.keys():
                    row.Value = request.json.get('Value')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'CIT_Generations' CIT_Generation = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found CIT_Generations with CIT_Generation = {id}"
                row     = None
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='CIT_Generations',entities=[row],name=current_app.config['NAME'])

@main.route('/api/patch/CIT_Generations/<int:id>', methods=['PATCH'])
def api_patch_CIT_Generations(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = CIT_Generations()
            query = db.session.query(CIT_Generations)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(CIT_Generations.CIT_Generation == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                db.session.rollback()
                if request.values is not None and len(request.values):
                    if 'Value' in request.values:
                        row.Value = request.values.get('Value')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'CIT_Generations' CIT_Generation = {id}"
                try:
                    row     = json.loads(row.get_json())
                except:
                    row     = None
            else:
                code    = API_NOT_FOUND
                message = f"Not found CIT_Generations with CIT_Generation = {id}"
                row     = None
                db.session.rollback()
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
            db.session.rollback()
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='CIT_Generations',entities=[row],name=current_app.config['NAME'])

@main.route('/api/delete/CIT_Generations/<int:id>', methods=['DELETE'])
def api_delete_CIT_Generations(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = CIT_Generations()
            query = db.session.query(CIT_Generations)
            
            # First loop mandatory for row population ----------------------
            # detected primary key field: c.field
            query       = query.filter(CIT_Generations.CIT_Generation == id_values[id_counter])
            id_counter +=1
            # --------------------------------------------------------------
            row = query.one_or_none()

            if row is not None:
                db.session.delete(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                message = f"Deleted 'CIT_Generations' CIT_Generation = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found 'CIT_Generations' with CIT_Generation = {id}"
                row     = None        
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='CIT_Generations',entities=[],name=current_app.config['NAME'])

# ======================================================================# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2021-12-13 19:33:35
# =============================================================================
# gen_views.py:32 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_cit_statuses.py
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:36.845030
# ======================================================================        
# gen_views_form.html:AG 2021-12-13 19:33:36.845045
@main.route('/forms/CIT_Statuses', methods=['GET', 'POST'])
@login_required

def forms_CIT_Statuses():
    """ Form handling function for table CIT_Statuses """
    logger.debug('forms_CIT_Statuses(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='CIT_Statuses'
    class_name='cit_status'
    template_name='CIT_Statuses'
    sharding=False
    CIT_Status  =  request.args.get('CIT_Status',0,type=int)
    
    # Ensures DB Data is commited prior main query
    try:
        db.session.commit()
    except:
        db.session.rollback()
    row =  cit_status.query.filter(cit_status.CIT_Status == CIT_Status).first()
    if row is None:
        row=cit_status()
        session['is_new_row']=True
    session['data'] =  {  'CIT_Status':row.CIT_Status, 'Value':row.Value }
    
    form = frm_cit_status()
    
    # Actual Form activation here
    if form.validate_on_submit():
        # Code for SAVE option -----------------------------------------
        if form.submit_Save.data and current_user.role_id > 1:
            row.CIT_Status = form.CIT_Status.data
            row.Value = form.Value.data
            try:
               session['new_row']=str(row)
               db.session.flush()
               db.session.add(row)
               db.session.commit()
               db.session.flush()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New Configuration Item Status Type created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>Configuration Item Status Type CIT_Status saved OK</b>')
                   flash(message)
               db.session.flush()
            except Exception as e:
               db.session.rollback()
               db.session.flush()
               message=Markup('ERROR saving Configuration Item Status Type record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_CIT_Statuses_query'))
        # --------------------------------------------------------------
        # Code for NEW option
        # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.flush()
            row=cit_status()
    
            return redirect(url_for('.forms_CIT_Statuses'))    
    
        # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('Configuration Item Status Type Record modifications discarded ...')
            flash(message)
        # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>Configuration Item Status Type data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_'))    
    
    
    form.CIT_Status.data = row.CIT_Status
    form.Value.data = row.Value
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_CIT_Statuses(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = [{'name': 'charge_items', 'class': 'charge_item', 'backref': 'cit_status', 'caption': 'Charge Items', 'table': 'Charge_Items'}]
    
    from flask_sqlalchemy import Pagination
    # [{'name': 'charge_items', 'class': 'charge_item', 'backref': 'cit_status', 'caption': 'Charge Items', 'table': 'Charge_Items'}]
    try:
        if hasattr(row, 'charge_items'):
            P.append(({'name': 'charge_items', 'class': 'charge_item', 'backref': 'cit_status', 'caption': 'Charge Items', 'table': 'Charge_Items'},row.charge_items.paginate()))
    except Exception as e:
        print(f'Exception: {str(e)}')
    
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('cit_statuses.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:36.857025
# ======================================================================        
# gen_views_delete.html:AG 2021-12-13 19:33:36.857040
@main.route('/forms/CIT_Statuses_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)
@admin_required
def forms_CIT_Statuses_delete():
    """ Delete record handling function for table CIT_Statuses """
    logger.debug('forms_CIT_Statuses_delete(): Enter')
    CIT_Status  =  request.args.get('CIT_Status',0,type=int)
    row =  cit_status.query.filter(cit_status.CIT_Status == CIT_Status).first()

    if row is None:
        row=cit_status()
    session['data'] =  {  'CIT_Status':row.CIT_Status, 'Value':row.Value }
                       
    form = frm_cit_status_delete()

    # Tab['has_fks'] False
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.flush()
                db.session.delete(row)
                db.session.commit()
                db.session.flush()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('Configuration Item Status Type CIT_Status deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_CIT_Statuses_delete',CIT_Status=session['data']['CIT_Status']))    
    
            return redirect(url_for('.select_CIT_Statuses_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_CIT_Statuses_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_CIT_Statuses_query'))    
    
    logger.debug('forms_CIT_Statuses_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('cit_statuses_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: CIT_Statuses
# class_name: cit_status
# is shardened: None
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:36.911836
# ======================================================================

# gen_views_select_query.html:AG 2021-12-13 19:33:36.911867        
@main.route('/select/CIT_Statuses_Query', methods=['GET','POST'])
@login_required
@admin_required
def select_CIT_Statuses_query():
    """ Select rows handling function for table 'CIT_Statuses' """
    logger.debug('select_CIT_Statuses_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='CIT_Statuses'
    class_name='cit_status'
    template_name='CIT_Statuses'
    sharding=False


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)

    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='cit_status',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='cit_status',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='cit_status',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='cit_status'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    CIT_Status =  request.args.get('CIT_Status',None,type=str)
    Value =  request.args.get('Value',None,type=str)
    
    # Build default query all fields from table
    

    if CIT_Status is not None and len(CIT_Status)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CIT_Status:CIT Status',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CIT_Status
                )
    
    
    if Value is not None and len(Value)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Value:Vallue',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Value
                )
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['CIT_Status', 'Value']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['CIT_Status', 'Value'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'CIT_Status':
                if value is not None:
                    query = query.filter_by(CIT_Status=value)
            if field == 'Value':
                if value is not None:
                    query = query.filter_by(Value=value)
            
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:36.959482
# ======================================================================
# gen_views_api.html:AG 2021-12-13 19:33:36.959498
# table_name: CIT_Statuses
# class_name: cit_status
# is shardened: None
# Table 'CIT_Statuses' keys = CIT_Status
# Errors: None
# PK field found 'CIT_Status' db.Integer
# CIT_Statuses id field is 'CIT_Statuses.CIT_Status' of type 'int:'

@main.route('/api/get/CIT_Statuses'     , methods=['GET'])
@main.route('/api/get/CIT_Statuses/<int:id>', methods=['GET'])
def api_get_CIT_Statuses(id=None):
    code       = API_OK
    message    = 'OK'
    rows       = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        #response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        #response.headers['Pragma']        = 'no-cache'
        try:
            id_counter = 0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values=[id]
            # Codigo para un solo campo de id
            # chequear si marcado explicitamente
            db.session.flush()
            query = db.session.query(CIT_Statuses)
            if id is not None:
                query = query.filter(CIT_Statuses.CIT_Status == id_values[id_counter])
                rows = query.one_or_none()
            else:
                if request.args is not None and len(request.args):
                    if 'CIT_Status' in request.args:
                        query = query.filter(CIT_Statuses.CIT_Status == request.args.get('CIT_Status'))
                    if 'Value' in request.args:
                        query = query.filter(CIT_Statuses.Value == request.args.get('Value'))
                rows = query.all()
            if rows is not None:
                if type(rows) == list:
                    for i in range(len(rows)):
                        rows[i] = json.loads(rows[i].get_json())
                else:
                    rows = [json.loads(rows.get_json())]
            else:
                rows = []
            if len(rows) == 0:
                code = API_NO_DATA
                state = get_api_state(API_NO_DATA)
                
                if id is None:
                    message = f"No 'CIT_Statuses' records found"
                else:
                    message = f"No 'CIT_Statuses.CIT_Status' = {id} record found"
                
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='CIT_Statuses',entities=rows,name=current_app.config['NAME'])

@main.route('/api/post/CIT_Statuses', methods=['POST'])
def api_post_CIT_Statuses():
    code    = API_OK
    message = 'OK'
    row     = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            row = CIT_Statuses()
            # Populates row from json, if ID=int:autoincrement then None
            row.CIT_Status = request.json.get('CIT_Status',None)
            row.Value = request.json.get('Value',None)
            # ----------------------------------------------------------
            db.session.add(row)
            db.session.flush()
            db.session.commit()
            db.session.flush()
            db.session.refresh(row)
            db.session.flush()
            message = f"Created 'CIT_Statuses' CIT_Status = {row.CIT_Status}"
            row     = json.loads(row.get_json())
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
    else:
        code    = API_ERROR
        message = 'Unauthorized request'            
    return get_api_response(code=code,message=message,kind='CIT_Statuses',entities=[row],name=current_app.config['NAME'])

@main.route('/api/put/CIT_Statuses/<int:id>', methods=['PUT'])
def api_put_CIT_Statuses(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = CIT_Statuses()
            query = db.session.query(CIT_Statuses)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(CIT_Statuses.CIT_Status == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                if 'Value' in request.json.keys():
                    row.Value = request.json.get('Value')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'CIT_Statuses' CIT_Status = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found CIT_Statuses with CIT_Status = {id}"
                row     = None
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='CIT_Statuses',entities=[row],name=current_app.config['NAME'])

@main.route('/api/patch/CIT_Statuses/<int:id>', methods=['PATCH'])
def api_patch_CIT_Statuses(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = CIT_Statuses()
            query = db.session.query(CIT_Statuses)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(CIT_Statuses.CIT_Status == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                db.session.rollback()
                if request.values is not None and len(request.values):
                    if 'Value' in request.values:
                        row.Value = request.values.get('Value')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'CIT_Statuses' CIT_Status = {id}"
                try:
                    row     = json.loads(row.get_json())
                except:
                    row     = None
            else:
                code    = API_NOT_FOUND
                message = f"Not found CIT_Statuses with CIT_Status = {id}"
                row     = None
                db.session.rollback()
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
            db.session.rollback()
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='CIT_Statuses',entities=[row],name=current_app.config['NAME'])

@main.route('/api/delete/CIT_Statuses/<int:id>', methods=['DELETE'])
def api_delete_CIT_Statuses(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = CIT_Statuses()
            query = db.session.query(CIT_Statuses)
            
            # First loop mandatory for row population ----------------------
            # detected primary key field: c.field
            query       = query.filter(CIT_Statuses.CIT_Status == id_values[id_counter])
            id_counter +=1
            # --------------------------------------------------------------
            row = query.one_or_none()

            if row is not None:
                db.session.delete(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                message = f"Deleted 'CIT_Statuses' CIT_Status = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found 'CIT_Statuses' with CIT_Status = {id}"
                row     = None        
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='CIT_Statuses',entities=[],name=current_app.config['NAME'])

# ======================================================================# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2021-12-13 19:33:35
# =============================================================================
# gen_views.py:32 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_configuration_items.py
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:38.404336
# ======================================================================        
# gen_views_form.html:AG 2021-12-13 19:33:38.404351
@main.route('/forms/Configuration_Items', methods=['GET', 'POST'])
@login_required

def forms_Configuration_Items():
    """ Form handling function for table Configuration_Items """
    logger.debug('forms_Configuration_Items(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Configuration_Items'
    class_name='configuration_item'
    template_name='Configuration_Items'
    sharding=False
    CI_Id  =  request.args.get('CI_Id',0,type=int)
    
    # Ensures DB Data is commited prior main query
    try:
        db.session.commit()
    except:
        db.session.rollback()
    row =  configuration_item.query.filter(configuration_item.CI_Id == CI_Id).first()
    if row is None:
        row=configuration_item()
        session['is_new_row']=True
    session['data'] =  {  'CI_Id':row.CI_Id, 'CI_Name':row.CI_Name, 'CI_UUID':row.CI_UUID, 'Pla_Id':row.Pla_Id, 'CC_Id':row.CC_Id, 'Cus_Id':row.Cus_Id, 'CI_Commissioning_DateTime':row.CI_Commissioning_DateTime, 'CI_Decommissioning_DateTime':row.CI_Decommissioning_DateTime }
    
    form = frm_configuration_item()
    
    if form.has_FKs:
        form.Pla_Id.choices = db.session.query(platform.Pla_Id,platform.Pla_Name).order_by(platform.Pla_Name).all()
        form.CC_Id.choices = db.session.query(cost_center.CC_Id,cost_center.CC_Description).order_by(cost_center.CC_Description).all()
        form.Cus_Id.choices = db.session.query(customer.Cus_Id,customer.Cus_Name).order_by(customer.Cus_Name).all()

    
    # Actual Form activation here
    if form.validate_on_submit():
        # Code for SAVE option -----------------------------------------
        if form.submit_Save.data and current_user.role_id > 1:
            
            row.CI_Name = form.CI_Name.data
            row.CI_UUID = form.CI_UUID.data
            row.Pla_Id = form.Pla_Id.data
            row.CC_Id = form.CC_Id.data
            row.Cus_Id = form.Cus_Id.data
            row.CI_Commissioning_DateTime = form.CI_Commissioning_DateTime.data
            row.CI_Decommissioning_DateTime = form.CI_Decommissioning_DateTime.data
            try:
               session['new_row']=str(row)
               db.session.flush()
               db.session.add(row)
               db.session.commit()
               db.session.flush()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New Configuration Item created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>Configuration Item CI_Id saved OK</b>')
                   flash(message)
               db.session.flush()
            except Exception as e:
               db.session.rollback()
               db.session.flush()
               message=Markup('ERROR saving Configuration Item record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_Configuration_Items_query'))
        # --------------------------------------------------------------
        # Code for NEW option
        # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.flush()
            row=configuration_item()
    
            return redirect(url_for('.forms_Configuration_Items',CI_Id=row.CI_Id))
    
        # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('Configuration Item Record modifications discarded ...')
            flash(message)
        # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>Configuration Item data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_Configuration_Items',CI_Id=row.CI_Id))
    
    
    form.CI_Name.data = row.CI_Name
    form.CI_UUID.data = row.CI_UUID
    form.Pla_Id.data = row.Pla_Id
    form.CC_Id.data = row.CC_Id
    form.Cus_Id.data = row.Cus_Id
    form.CI_Commissioning_DateTime.data = row.CI_Commissioning_DateTime
    form.CI_Decommissioning_DateTime.data = row.CI_Decommissioning_DateTime
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_Configuration_Items(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = [{'name': 'charge_units', 'class': 'charge_unit', 'backref': 'configuration_item', 'caption': 'Charge Units', 'table': 'Charge_Units'}, {'name': 'rates', 'class': 'rate', 'backref': 'configuration_item', 'caption': 'Rates', 'table': 'Rates'}]
    
    from flask_sqlalchemy import Pagination
    # [{'name': 'charge_units', 'class': 'charge_unit', 'backref': 'configuration_item', 'caption': 'Charge Units', 'table': 'Charge_Units'}, {'name': 'rates', 'class': 'rate', 'backref': 'configuration_item', 'caption': 'Rates', 'table': 'Rates'}]
    try:
        if hasattr(row, 'charge_units'):
            P.append(({'name': 'charge_units', 'class': 'charge_unit', 'backref': 'configuration_item', 'caption': 'Charge Units', 'table': 'Charge_Units'},row.charge_units.paginate()))
    except Exception as e:
        print(f'Exception: {str(e)}')
    try:
        if hasattr(row, 'rates'):
            P.append(({'name': 'rates', 'class': 'rate', 'backref': 'configuration_item', 'caption': 'Rates', 'table': 'Rates'},row.rates.paginate()))
    except Exception as e:
        print(f'Exception: {str(e)}')
    
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('configuration_items.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:38.412845
# ======================================================================        
# gen_views_delete.html:AG 2021-12-13 19:33:38.412857
@main.route('/forms/Configuration_Items_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)
@admin_required
def forms_Configuration_Items_delete():
    """ Delete record handling function for table Configuration_Items """
    logger.debug('forms_Configuration_Items_delete(): Enter')
    CI_Id  =  request.args.get('CI_Id',0,type=int)
    row =  configuration_item.query.filter(configuration_item.CI_Id == CI_Id).first()

    if row is None:
        row=configuration_item()
    session['data'] =  {  'CI_Id':row.CI_Id, 'CI_Name':row.CI_Name, 'CI_UUID':row.CI_UUID, 'Pla_Id':row.Pla_Id, 'CC_Id':row.CC_Id, 'Cus_Id':row.Cus_Id, 'CI_Commissioning_DateTime':row.CI_Commissioning_DateTime, 'CI_Decommissioning_DateTime':row.CI_Decommissioning_DateTime }
                       
    form = frm_configuration_item_delete()

    # Tab['has_fks'] True
    
    pass # Tab['has_fks'] True
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.flush()
                db.session.delete(row)
                db.session.commit()
                db.session.flush()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('Configuration Item CI_Id deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_Configuration_Items_delete',CI_Id=session['data']['CI_Id']))    
    
            return redirect(url_for('.select_Configuration_Items_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_Configuration_Items_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_Configuration_Items_query'))    
    
    logger.debug('forms_Configuration_Items_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('configuration_items_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: Configuration_Items
# class_name: configuration_item
# is shardened: None
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:38.431372
# ======================================================================

# gen_views_select_query.html:AG 2021-12-13 19:33:38.431388        
@main.route('/select/Configuration_Items_Query', methods=['GET','POST'])
@login_required
@admin_required
def select_Configuration_Items_query():
    """ Select rows handling function for table 'Configuration_Items' """
    logger.debug('select_Configuration_Items_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Configuration_Items'
    class_name='configuration_item'
    template_name='Configuration_Items'
    sharding=False


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)

    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='configuration_item',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='configuration_item',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='configuration_item',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    foreign_keys.update({'Pla_Id':(platform,'platform','Pla_Id','Pla_Name','Platform Id')})
    foreign_keys.update({'CC_Id':(cost_center,'cost_center','CC_Id','CC_Description','Cost Center Id')})
    foreign_keys.update({'Cus_Id':(customer,'customer','Cus_Id','Cus_Name','Customer Id')})
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='configuration_item'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    CI_Id =  request.args.get('CI_Id',None,type=str)
    CI_Name =  request.args.get('CI_Name',None,type=str)
    CI_UUID =  request.args.get('CI_UUID',None,type=str)
    Pla_Id =  request.args.get('Pla_Id',None,type=str)
    CC_Id =  request.args.get('CC_Id',None,type=str)
    Cus_Id =  request.args.get('Cus_Id',None,type=str)
    CI_Commissioning_DateTime =  request.args.get('CI_Commissioning_DateTime',None,type=str)
    CI_Decommissioning_DateTime =  request.args.get('CI_Decommissioning_DateTime',None,type=str)
    
    # Build default query all fields from table
    

    if CI_Id is not None and len(CI_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CI_Id:Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CI_Id
                )
    
    
    if CI_Name is not None and len(CI_Name)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CI_Name:Name',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CI_Name
                )
    
    
    if CI_UUID is not None and len(CI_UUID)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CI_UUID:UUID',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CI_UUID
                )
    
    
    if Pla_Id is not None and len(Pla_Id)>0:
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys['Pla_Id']
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)            
            set_query_option(   engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1=foreign_field,
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Pla_Id
                )
                                
    
    
    if CC_Id is not None and len(CC_Id)>0:
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys['CC_Id']
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)            
            set_query_option(   engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1=foreign_field,
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CC_Id
                )
                                
    
    
    if Cus_Id is not None and len(Cus_Id)>0:
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys['Cus_Id']
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)            
            set_query_option(   engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1=foreign_field,
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Cus_Id
                )
                                
    
    
    if CI_Commissioning_DateTime is not None and len(CI_Commissioning_DateTime)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CI_Commissioning_DateTime:Commissioning Date and Time',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CI_Commissioning_DateTime
                )
    
    
    if CI_Decommissioning_DateTime is not None and len(CI_Decommissioning_DateTime)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CI_Decommissioning_DateTime:Decommissioning Date and Time',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CI_Decommissioning_DateTime
                )
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['CI_Id', 'CI_Name', 'CI_UUID', 'Pla_Id', 'CC_Id', 'Cus_Id', 'CI_Commissioning_DateTime', 'CI_Decommissioning_DateTime']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['CI_Id', 'CI_Name', 'CI_UUID', 'Pla_Id', 'CC_Id', 'Cus_Id', 'CI_Commissioning_DateTime', 'CI_Decommissioning_DateTime'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'CI_Id':
                if value is not None:
                    query = query.filter_by(CI_Id=value)
            if field == 'CI_Name':
                if value is not None:
                    query = query.filter_by(CI_Name=value)
            if field == 'CI_UUID':
                if value is not None:
                    query = query.filter_by(CI_UUID=value)
            if field == 'Pla_Id':
                if value is not None:
                    query = query.filter_by(Pla_Id=value)
            if field == 'CC_Id':
                if value is not None:
                    query = query.filter_by(CC_Id=value)
            if field == 'Cus_Id':
                if value is not None:
                    query = query.filter_by(Cus_Id=value)
            if field == 'CI_Commissioning_DateTime':
                if value is not None:
                    query = query.filter_by(CI_Commissioning_DateTime=value)
            if field == 'CI_Decommissioning_DateTime':
                if value is not None:
                    query = query.filter_by(CI_Decommissioning_DateTime=value)
            # ------------------------------------------------------------------
    # JOIN other tables and generate foreign fields
    # Will replace class name by sharding class in joins structure
    # will have no effect in no sharding environment
    query = query.join(platform,configuration_item.Pla_Id == platform.Pla_Id).add_columns(platform.Pla_Name).join(cost_center,configuration_item.CC_Id == cost_center.CC_Id).add_columns(cost_center.CC_Description).join(customer,configuration_item.Cus_Id == customer.Cus_Id).add_columns(customer.Cus_Name)
    # ------------------------------------------------------------------
    
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:38.460592
# ======================================================================
# gen_views_api.html:AG 2021-12-13 19:33:38.460605
# table_name: Configuration_Items
# class_name: configuration_item
# is shardened: None
# Table 'Configuration_Items' keys = CI_Id
# Errors: None
# ID field found 'CI_Id' auto_increment db.Integer
# Configuration_Items id field is 'Configuration_Items.CI_Id' of type 'int:'

@main.route('/api/get/Configuration_Items'     , methods=['GET'])
@main.route('/api/get/Configuration_Items/<int:id>', methods=['GET'])
def api_get_Configuration_Items(id=None):
    code       = API_OK
    message    = 'OK'
    rows       = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        #response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        #response.headers['Pragma']        = 'no-cache'
        try:
            id_counter = 0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values=[id]
            # Codigo para un solo campo de id
            # chequear si marcado explicitamente
            db.session.flush()
            query = db.session.query(Configuration_Items)
            if id is not None:
                query = query.filter(Configuration_Items.CI_Id == id_values[id_counter])
                rows = query.one_or_none()
            else:
                if request.args is not None and len(request.args):
                    if 'CI_Id' in request.args:
                        query = query.filter(Configuration_Items.CI_Id == request.args.get('CI_Id'))
                    if 'CI_Name' in request.args:
                        query = query.filter(Configuration_Items.CI_Name == request.args.get('CI_Name'))
                    if 'CI_UUID' in request.args:
                        query = query.filter(Configuration_Items.CI_UUID == request.args.get('CI_UUID'))
                    if 'Pla_Id' in request.args:
                        query = query.filter(Configuration_Items.Pla_Id == request.args.get('Pla_Id'))
                    if 'CC_Id' in request.args:
                        query = query.filter(Configuration_Items.CC_Id == request.args.get('CC_Id'))
                    if 'Cus_Id' in request.args:
                        query = query.filter(Configuration_Items.Cus_Id == request.args.get('Cus_Id'))
                    if 'CI_Commissioning_DateTime' in request.args:
                        query = query.filter(Configuration_Items.CI_Commissioning_DateTime == request.args.get('CI_Commissioning_DateTime'))
                    if 'CI_Decommissioning_DateTime' in request.args:
                        query = query.filter(Configuration_Items.CI_Decommissioning_DateTime == request.args.get('CI_Decommissioning_DateTime'))
                rows = query.all()
            if rows is not None:
                if type(rows) == list:
                    for i in range(len(rows)):
                        rows[i] = json.loads(rows[i].get_json())
                else:
                    rows = [json.loads(rows.get_json())]
            else:
                rows = []
            if len(rows) == 0:
                code = API_NO_DATA
                state = get_api_state(API_NO_DATA)
                
                if id is None:
                    message = f"No 'Configuration_Items' records found"
                else:
                    message = f"No 'Configuration_Items.CI_Id' = {id} record found"
                
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Configuration_Items',entities=rows,name=current_app.config['NAME'])

@main.route('/api/post/Configuration_Items', methods=['POST'])
def api_post_Configuration_Items():
    code    = API_OK
    message = 'OK'
    row     = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            row = Configuration_Items()
            # Populates row from json, if ID=int:autoincrement then None
            row.CI_Id = None
            row.CI_Name = request.json.get('CI_Name',None)
            row.CI_UUID = request.json.get('CI_UUID',None)
            row.Pla_Id = request.json.get('Pla_Id',None)
            row.CC_Id = request.json.get('CC_Id',None)
            row.Cus_Id = request.json.get('Cus_Id',1)
            row.CI_Commissioning_DateTime = request.json.get('CI_Commissioning_DateTime',None)
            row.CI_Decommissioning_DateTime = request.json.get('CI_Decommissioning_DateTime',None)
            # ----------------------------------------------------------
            db.session.add(row)
            db.session.flush()
            db.session.commit()
            db.session.flush()
            db.session.refresh(row)
            db.session.flush()
            message = f"Created 'Configuration_Items' CI_Id = {row.CI_Id}"
            row     = json.loads(row.get_json())
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
    else:
        code    = API_ERROR
        message = 'Unauthorized request'            
    return get_api_response(code=code,message=message,kind='Configuration_Items',entities=[row],name=current_app.config['NAME'])

@main.route('/api/put/Configuration_Items/<int:id>', methods=['PUT'])
def api_put_Configuration_Items(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Configuration_Items()
            query = db.session.query(Configuration_Items)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Configuration_Items.CI_Id == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                if 'CI_Name' in request.json.keys():
                    row.CI_Name = request.json.get('CI_Name')
                if 'CI_UUID' in request.json.keys():
                    row.CI_UUID = request.json.get('CI_UUID')
                if 'Pla_Id' in request.json.keys():
                    row.Pla_Id = request.json.get('Pla_Id')
                if 'CC_Id' in request.json.keys():
                    row.CC_Id = request.json.get('CC_Id')
                if 'Cus_Id' in request.json.keys():
                    row.Cus_Id = request.json.get('Cus_Id')
                if 'CI_Commissioning_DateTime' in request.json.keys():
                    row.CI_Commissioning_DateTime = request.json.get('CI_Commissioning_DateTime')
                if 'CI_Decommissioning_DateTime' in request.json.keys():
                    row.CI_Decommissioning_DateTime = request.json.get('CI_Decommissioning_DateTime')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Configuration_Items' CI_Id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found Configuration_Items with CI_Id = {id}"
                row     = None
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Configuration_Items',entities=[row],name=current_app.config['NAME'])

@main.route('/api/patch/Configuration_Items/<int:id>', methods=['PATCH'])
def api_patch_Configuration_Items(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Configuration_Items()
            query = db.session.query(Configuration_Items)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Configuration_Items.CI_Id == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                db.session.rollback()
                if request.values is not None and len(request.values):
                    if 'CI_Name' in request.values:
                        row.CI_Name = request.values.get('CI_Name')
                    if 'CI_UUID' in request.values:
                        row.CI_UUID = request.values.get('CI_UUID')
                    if 'Pla_Id' in request.values:
                        row.Pla_Id = request.values.get('Pla_Id')
                    if 'CC_Id' in request.values:
                        row.CC_Id = request.values.get('CC_Id')
                    if 'Cus_Id' in request.values:
                        row.Cus_Id = request.values.get('Cus_Id')
                    if 'CI_Commissioning_DateTime' in request.values:
                        row.CI_Commissioning_DateTime = request.values.get('CI_Commissioning_DateTime')
                    if 'CI_Decommissioning_DateTime' in request.values:
                        row.CI_Decommissioning_DateTime = request.values.get('CI_Decommissioning_DateTime')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Configuration_Items' CI_Id = {id}"
                try:
                    row     = json.loads(row.get_json())
                except:
                    row     = None
            else:
                code    = API_NOT_FOUND
                message = f"Not found Configuration_Items with CI_Id = {id}"
                row     = None
                db.session.rollback()
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
            db.session.rollback()
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Configuration_Items',entities=[row],name=current_app.config['NAME'])

@main.route('/api/delete/Configuration_Items/<int:id>', methods=['DELETE'])
def api_delete_Configuration_Items(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Configuration_Items()
            query = db.session.query(Configuration_Items)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Configuration_Items.CI_Id == id)
            # --------------------------------------------------------------
            row = query.one_or_none()

            if row is not None:
                db.session.delete(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                message = f"Deleted 'Configuration_Items' CI_Id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found 'Configuration_Items' with CI_Id = {id}"
                row     = None        
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Configuration_Items',entities=[],name=current_app.config['NAME'])

# ======================================================================# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2021-12-13 19:33:35
# =============================================================================
# gen_views.py:32 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_cost_centers.py
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:38.568534
# ======================================================================        
# gen_views_form.html:AG 2021-12-13 19:33:38.568555
@main.route('/forms/Cost_Centers', methods=['GET', 'POST'])
@login_required

def forms_Cost_Centers():
    """ Form handling function for table Cost_Centers """
    logger.debug('forms_Cost_Centers(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Cost_Centers'
    class_name='cost_center'
    template_name='Cost_Centers'
    sharding=False
    CC_Id  =  request.args.get('CC_Id',0,type=int)
    
    # Ensures DB Data is commited prior main query
    try:
        db.session.commit()
    except:
        db.session.rollback()
    row =  cost_center.query.filter(cost_center.CC_Id == CC_Id).first()
    if row is None:
        row=cost_center()
        session['is_new_row']=True
    session['data'] =  {  'CC_Id':row.CC_Id, 'CC_Code':row.CC_Code, 'CC_Description':row.CC_Description, 'Cur_Code':row.Cur_Code, 'CC_Parent_Code':row.CC_Parent_Code, 'CC_Reg_Exp':row.CC_Reg_Exp, 'CC_Reference':row.CC_Reference, 'Cus_Id':row.Cus_Id }
    
    form = frm_cost_center()
    
    if form.has_FKs:
        form.Cur_Code.choices = db.session.query(currency.Cur_Code,currency.Cur_Name).order_by(currency.Cur_Name).all()

    
    # Actual Form activation here
    if form.validate_on_submit():
        # Code for SAVE option -----------------------------------------
        if form.submit_Save.data and current_user.role_id > 1:
            
            row.CC_Code = form.CC_Code.data
            row.CC_Description = form.CC_Description.data
            row.Cur_Code = form.Cur_Code.data
            row.CC_Parent_Code = form.CC_Parent_Code.data
            row.CC_Reg_Exp = form.CC_Reg_Exp.data
            row.CC_Reference = form.CC_Reference.data
            row.Cus_Id = form.Cus_Id.data
            try:
               session['new_row']=str(row)
               db.session.flush()
               db.session.add(row)
               db.session.commit()
               db.session.flush()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New Cost Center created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>Cost Center CC_Id saved OK</b>')
                   flash(message)
               db.session.flush()
            except Exception as e:
               db.session.rollback()
               db.session.flush()
               message=Markup('ERROR saving Cost Center record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_Cost_Centers_query'))
        # --------------------------------------------------------------
        # Code for NEW option
        # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.flush()
            row=cost_center()
    
            return redirect(url_for('.forms_Cost_Centers',CC_Id=row.CC_Id))
    
        # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('Cost Center Record modifications discarded ...')
            flash(message)
        # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>Cost Center data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_Cost_Centers',CC_Id=row.CC_Id))
    
    
    form.CC_Code.data = row.CC_Code
    form.CC_Description.data = row.CC_Description
    form.Cur_Code.data = row.Cur_Code
    form.CC_Parent_Code.data = row.CC_Parent_Code
    form.CC_Reg_Exp.data = row.CC_Reg_Exp
    form.CC_Reference.data = row.CC_Reference
    form.Cus_Id.data = row.Cus_Id
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_Cost_Centers(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = [{'name': 'configuration_items', 'class': 'configuration_item', 'backref': 'cost_center', 'caption': 'Configuration Items', 'table': 'Configuration_Items'}, {'name': 'customers', 'class': 'customer', 'backref': 'cost_center', 'caption': 'Customers', 'table': 'Customers'}, {'name': 'rates', 'class': 'rate', 'backref': 'cost_center', 'caption': 'Rates', 'table': 'Rates'}, {'name': 'users', 'class': 'User', 'backref': 'cost_center', 'caption': 'Users', 'table': 'Users'}]
    
    from flask_sqlalchemy import Pagination
    # [{'name': 'configuration_items', 'class': 'configuration_item', 'backref': 'cost_center', 'caption': 'Configuration Items', 'table': 'Configuration_Items'}, {'name': 'customers', 'class': 'customer', 'backref': 'cost_center', 'caption': 'Customers', 'table': 'Customers'}, {'name': 'rates', 'class': 'rate', 'backref': 'cost_center', 'caption': 'Rates', 'table': 'Rates'}, {'name': 'users', 'class': 'User', 'backref': 'cost_center', 'caption': 'Users', 'table': 'Users'}]
    try:
        if hasattr(row, 'configuration_items'):
            P.append(({'name': 'configuration_items', 'class': 'configuration_item', 'backref': 'cost_center', 'caption': 'Configuration Items', 'table': 'Configuration_Items'},row.configuration_items.paginate()))
    except Exception as e:
        print(f'Exception: {str(e)}')
    try:
        if hasattr(row, 'customers'):
            P.append(({'name': 'customers', 'class': 'customer', 'backref': 'cost_center', 'caption': 'Customers', 'table': 'Customers'},row.customers.paginate()))
    except Exception as e:
        print(f'Exception: {str(e)}')
    try:
        if hasattr(row, 'rates'):
            P.append(({'name': 'rates', 'class': 'rate', 'backref': 'cost_center', 'caption': 'Rates', 'table': 'Rates'},row.rates.paginate()))
    except Exception as e:
        print(f'Exception: {str(e)}')
    try:
        if hasattr(row, 'users'):
            P.append(({'name': 'users', 'class': 'User', 'backref': 'cost_center', 'caption': 'Users', 'table': 'Users'},row.users.paginate()))
    except Exception as e:
        print(f'Exception: {str(e)}')
    
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('cost_centers.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:38.578025
# ======================================================================        
# gen_views_delete.html:AG 2021-12-13 19:33:38.578038
@main.route('/forms/Cost_Centers_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)
@admin_required
def forms_Cost_Centers_delete():
    """ Delete record handling function for table Cost_Centers """
    logger.debug('forms_Cost_Centers_delete(): Enter')
    CC_Id  =  request.args.get('CC_Id',0,type=int)
    row =  cost_center.query.filter(cost_center.CC_Id == CC_Id).first()

    if row is None:
        row=cost_center()
    session['data'] =  {  'CC_Id':row.CC_Id, 'CC_Code':row.CC_Code, 'CC_Description':row.CC_Description, 'Cur_Code':row.Cur_Code, 'CC_Parent_Code':row.CC_Parent_Code, 'CC_Reg_Exp':row.CC_Reg_Exp, 'CC_Reference':row.CC_Reference, 'Cus_Id':row.Cus_Id }
                       
    form = frm_cost_center_delete()

    # Tab['has_fks'] True
    
    pass # Tab['has_fks'] True
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.flush()
                db.session.delete(row)
                db.session.commit()
                db.session.flush()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('Cost Center CC_Id deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_Cost_Centers_delete',CC_Id=session['data']['CC_Id']))    
    
            return redirect(url_for('.select_Cost_Centers_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_Cost_Centers_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_Cost_Centers_query'))    
    
    logger.debug('forms_Cost_Centers_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('cost_centers_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: Cost_Centers
# class_name: cost_center
# is shardened: None
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:38.596933
# ======================================================================

# gen_views_select_query.html:AG 2021-12-13 19:33:38.596966        
@main.route('/select/Cost_Centers_Query', methods=['GET','POST'])
@login_required
@admin_required
def select_Cost_Centers_query():
    """ Select rows handling function for table 'Cost_Centers' """
    logger.debug('select_Cost_Centers_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Cost_Centers'
    class_name='cost_center'
    template_name='Cost_Centers'
    sharding=False


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)

    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='cost_center',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='cost_center',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='cost_center',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    foreign_keys.update({'Cur_Code':(currency,'currency','Cur_Code','Cur_Name','Currency Code')})
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='cost_center'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    CC_Id =  request.args.get('CC_Id',None,type=str)
    CC_Code =  request.args.get('CC_Code',None,type=str)
    CC_Description =  request.args.get('CC_Description',None,type=str)
    Cur_Code =  request.args.get('Cur_Code',None,type=str)
    CC_Parent_Code =  request.args.get('CC_Parent_Code',None,type=str)
    CC_Reference =  request.args.get('CC_Reference',None,type=str)
    Cus_Id =  request.args.get('Cus_Id',None,type=str)
    
    # Build default query all fields from table
    

    if CC_Id is not None and len(CC_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CC_Id:Cost Center Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CC_Id
                )
    
    
    if CC_Code is not None and len(CC_Code)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CC_Code:Code',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CC_Code
                )
    
    
    if CC_Description is not None and len(CC_Description)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CC_Description:Description',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CC_Description
                )
    
    
    if Cur_Code is not None and len(Cur_Code)>0:
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys['Cur_Code']
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)            
            set_query_option(   engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1=foreign_field,
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Cur_Code
                )
                                
    
    
    if CC_Parent_Code is not None and len(CC_Parent_Code)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CC_Parent_Code:Parent Code',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CC_Parent_Code
                )
    
    
    
    if CC_Reference is not None and len(CC_Reference)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CC_Reference:Reference',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CC_Reference
                )
    
    
    if Cus_Id is not None and len(Cus_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Cus_Id:Cus_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Cus_Id
                )
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['CC_Id', 'CC_Code', 'CC_Description', 'Cur_Code', 'CC_Parent_Code', 'CC_Reg_Exp', 'CC_Reference', 'Cus_Id']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['CC_Id', 'CC_Code', 'CC_Description', 'Cur_Code', 'CC_Parent_Code', 'CC_Reg_Exp', 'CC_Reference', 'Cus_Id'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'CC_Id':
                if value is not None:
                    query = query.filter_by(CC_Id=value)
            if field == 'CC_Code':
                if value is not None:
                    query = query.filter_by(CC_Code=value)
            if field == 'CC_Description':
                if value is not None:
                    query = query.filter_by(CC_Description=value)
            if field == 'Cur_Code':
                if value is not None:
                    query = query.filter_by(Cur_Code=value)
            if field == 'CC_Parent_Code':
                if value is not None:
                    query = query.filter_by(CC_Parent_Code=value)
            if field == 'CC_Reg_Exp':
                if value is not None:
                    query = query.filter_by(CC_Reg_Exp=value)
            if field == 'CC_Reference':
                if value is not None:
                    query = query.filter_by(CC_Reference=value)
            if field == 'Cus_Id':
                if value is not None:
                    query = query.filter_by(Cus_Id=value)
            # ------------------------------------------------------------------
    # JOIN other tables and generate foreign fields
    # Will replace class name by sharding class in joins structure
    # will have no effect in no sharding environment
    query = query.join(currency,cost_center.Cur_Code == currency.Cur_Code).add_columns(currency.Cur_Name)
    # ------------------------------------------------------------------
    
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:38.629070
# ======================================================================
# gen_views_api.html:AG 2021-12-13 19:33:38.629085
# table_name: Cost_Centers
# class_name: cost_center
# is shardened: None
# Table 'Cost_Centers' keys = CC_Id
# Errors: None
# ID field found 'CC_Id' auto_increment db.Integer
# Cost_Centers id field is 'Cost_Centers.CC_Id' of type 'int:'

@main.route('/api/get/Cost_Centers'     , methods=['GET'])
@main.route('/api/get/Cost_Centers/<int:id>', methods=['GET'])
def api_get_Cost_Centers(id=None):
    code       = API_OK
    message    = 'OK'
    rows       = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        #response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        #response.headers['Pragma']        = 'no-cache'
        try:
            id_counter = 0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values=[id]
            # Codigo para un solo campo de id
            # chequear si marcado explicitamente
            db.session.flush()
            query = db.session.query(Cost_Centers)
            if id is not None:
                query = query.filter(Cost_Centers.CC_Id == id_values[id_counter])
                rows = query.one_or_none()
            else:
                if request.args is not None and len(request.args):
                    if 'CC_Id' in request.args:
                        query = query.filter(Cost_Centers.CC_Id == request.args.get('CC_Id'))
                    if 'CC_Code' in request.args:
                        query = query.filter(Cost_Centers.CC_Code == request.args.get('CC_Code'))
                    if 'CC_Description' in request.args:
                        query = query.filter(Cost_Centers.CC_Description == request.args.get('CC_Description'))
                    if 'Cur_Code' in request.args:
                        query = query.filter(Cost_Centers.Cur_Code == request.args.get('Cur_Code'))
                    if 'CC_Parent_Code' in request.args:
                        query = query.filter(Cost_Centers.CC_Parent_Code == request.args.get('CC_Parent_Code'))
                    if 'CC_Reg_Exp' in request.args:
                        query = query.filter(Cost_Centers.CC_Reg_Exp == request.args.get('CC_Reg_Exp'))
                    if 'CC_Reference' in request.args:
                        query = query.filter(Cost_Centers.CC_Reference == request.args.get('CC_Reference'))
                    if 'Cus_Id' in request.args:
                        query = query.filter(Cost_Centers.Cus_Id == request.args.get('Cus_Id'))
                rows = query.all()
            if rows is not None:
                if type(rows) == list:
                    for i in range(len(rows)):
                        rows[i] = json.loads(rows[i].get_json())
                else:
                    rows = [json.loads(rows.get_json())]
            else:
                rows = []
            if len(rows) == 0:
                code = API_NO_DATA
                state = get_api_state(API_NO_DATA)
                
                if id is None:
                    message = f"No 'Cost_Centers' records found"
                else:
                    message = f"No 'Cost_Centers.CC_Id' = {id} record found"
                
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Cost_Centers',entities=rows,name=current_app.config['NAME'])

@main.route('/api/post/Cost_Centers', methods=['POST'])
def api_post_Cost_Centers():
    code    = API_OK
    message = 'OK'
    row     = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            row = Cost_Centers()
            # Populates row from json, if ID=int:autoincrement then None
            row.CC_Id = None
            row.CC_Code = request.json.get('CC_Code',None)
            row.CC_Description = request.json.get('CC_Description',None)
            row.Cur_Code = request.json.get('Cur_Code',None)
            row.CC_Parent_Code = request.json.get('CC_Parent_Code',1)
            row.CC_Reg_Exp = request.json.get('CC_Reg_Exp',None)
            row.CC_Reference = request.json.get('CC_Reference',None)
            row.Cus_Id = request.json.get('Cus_Id',None)
            # ----------------------------------------------------------
            db.session.add(row)
            db.session.flush()
            db.session.commit()
            db.session.flush()
            db.session.refresh(row)
            db.session.flush()
            message = f"Created 'Cost_Centers' CC_Id = {row.CC_Id}"
            row     = json.loads(row.get_json())
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
    else:
        code    = API_ERROR
        message = 'Unauthorized request'            
    return get_api_response(code=code,message=message,kind='Cost_Centers',entities=[row],name=current_app.config['NAME'])

@main.route('/api/put/Cost_Centers/<int:id>', methods=['PUT'])
def api_put_Cost_Centers(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Cost_Centers()
            query = db.session.query(Cost_Centers)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Cost_Centers.CC_Id == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                if 'CC_Code' in request.json.keys():
                    row.CC_Code = request.json.get('CC_Code')
                if 'CC_Description' in request.json.keys():
                    row.CC_Description = request.json.get('CC_Description')
                if 'Cur_Code' in request.json.keys():
                    row.Cur_Code = request.json.get('Cur_Code')
                if 'CC_Parent_Code' in request.json.keys():
                    row.CC_Parent_Code = request.json.get('CC_Parent_Code')
                if 'CC_Reg_Exp' in request.json.keys():
                    row.CC_Reg_Exp = request.json.get('CC_Reg_Exp')
                if 'CC_Reference' in request.json.keys():
                    row.CC_Reference = request.json.get('CC_Reference')
                if 'Cus_Id' in request.json.keys():
                    row.Cus_Id = request.json.get('Cus_Id')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Cost_Centers' CC_Id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found Cost_Centers with CC_Id = {id}"
                row     = None
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Cost_Centers',entities=[row],name=current_app.config['NAME'])

@main.route('/api/patch/Cost_Centers/<int:id>', methods=['PATCH'])
def api_patch_Cost_Centers(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Cost_Centers()
            query = db.session.query(Cost_Centers)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Cost_Centers.CC_Id == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                db.session.rollback()
                if request.values is not None and len(request.values):
                    if 'CC_Code' in request.values:
                        row.CC_Code = request.values.get('CC_Code')
                    if 'CC_Description' in request.values:
                        row.CC_Description = request.values.get('CC_Description')
                    if 'Cur_Code' in request.values:
                        row.Cur_Code = request.values.get('Cur_Code')
                    if 'CC_Parent_Code' in request.values:
                        row.CC_Parent_Code = request.values.get('CC_Parent_Code')
                    if 'CC_Reg_Exp' in request.values:
                        row.CC_Reg_Exp = request.values.get('CC_Reg_Exp')
                    if 'CC_Reference' in request.values:
                        row.CC_Reference = request.values.get('CC_Reference')
                    if 'Cus_Id' in request.values:
                        row.Cus_Id = request.values.get('Cus_Id')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Cost_Centers' CC_Id = {id}"
                try:
                    row     = json.loads(row.get_json())
                except:
                    row     = None
            else:
                code    = API_NOT_FOUND
                message = f"Not found Cost_Centers with CC_Id = {id}"
                row     = None
                db.session.rollback()
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
            db.session.rollback()
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Cost_Centers',entities=[row],name=current_app.config['NAME'])

@main.route('/api/delete/Cost_Centers/<int:id>', methods=['DELETE'])
def api_delete_Cost_Centers(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Cost_Centers()
            query = db.session.query(Cost_Centers)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Cost_Centers.CC_Id == id)
            # --------------------------------------------------------------
            row = query.one_or_none()

            if row is not None:
                db.session.delete(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                message = f"Deleted 'Cost_Centers' CC_Id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found 'Cost_Centers' with CC_Id = {id}"
                row     = None        
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Cost_Centers',entities=[],name=current_app.config['NAME'])

# ======================================================================# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2021-12-13 19:33:35
# =============================================================================
# gen_views.py:32 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_countries_currencies.py
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:38.925439
# ======================================================================        
# gen_views_form.html:AG 2021-12-13 19:33:38.925454
@main.route('/forms/Countries_Currencies', methods=['GET', 'POST'])
@login_required

def forms_Countries_Currencies():
    """ Form handling function for table Countries_Currencies """
    logger.debug('forms_Countries_Currencies(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Countries_Currencies'
    class_name='country_currency'
    template_name='Countries_Currencies'
    sharding=False
    Cou_Code  =  request.args.get('Cou_Code',0,type=int)
    Cur_Code  =  request.args.get('Cur_Code',0,type=int)
    
    # Ensures DB Data is commited prior main query
    try:
        db.session.commit()
    except:
        db.session.rollback()
    row =  country_currency.query.filter(country_currency.Cou_Code == Cou_Code,country_currency.Cur_Code == Cur_Code).first()
    if row is None:
        row=country_currency()
        session['is_new_row']=True
    session['data'] =  {  'Cou_Code':row.Cou_Code, 'Cur_Code':row.Cur_Code, 'Cou_Cur_Comment':row.Cou_Cur_Comment }
    
    form = frm_country_currency()
    
    if form.has_FKs:
        form.Cou_Code.choices = db.session.query(country.Cou_Code,country.Cou_Name).order_by(country.Cou_Name).all()
        form.Cur_Code.choices = db.session.query(currency.Cur_Code,currency.Cur_Name).order_by(currency.Cur_Name).all()

    
    # Actual Form activation here
    if form.validate_on_submit():
        # Code for SAVE option -----------------------------------------
        if form.submit_Save.data and current_user.role_id > 1:
            row.Cou_Code = form.Cou_Code.data
            row.Cur_Code = form.Cur_Code.data
            row.Cou_Cur_Comment = form.Cou_Cur_Comment.data
            try:
               session['new_row']=str(row)
               db.session.flush()
               db.session.add(row)
               db.session.commit()
               db.session.flush()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New Country vs Currency created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>Country vs Currency Cou_Code,Cur_Code saved OK</b>')
                   flash(message)
               db.session.flush()
            except Exception as e:
               db.session.rollback()
               db.session.flush()
               message=Markup('ERROR saving Country vs Currency record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_Countries_Currencies_query'))
        # --------------------------------------------------------------
        # Code for NEW option
        # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.flush()
            row=country_currency()
    
            return redirect(url_for('.forms_Countries_Currencies'))    
    
        # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('Country vs Currency Record modifications discarded ...')
            flash(message)
        # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>Country vs Currency data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_'))    
    
    
    form.Cou_Code.data = row.Cou_Code
    form.Cur_Code.data = row.Cur_Code
    form.Cou_Cur_Comment.data = row.Cou_Cur_Comment
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_Countries_Currencies(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = []
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('countries_currencies.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:38.935285
# ======================================================================        
# gen_views_delete.html:AG 2021-12-13 19:33:38.935302
@main.route('/forms/Countries_Currencies_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)
@admin_required
def forms_Countries_Currencies_delete():
    """ Delete record handling function for table Countries_Currencies """
    logger.debug('forms_Countries_Currencies_delete(): Enter')
    Cou_Code  =  request.args.get('Cou_Code',0,type=int)
    Cur_Code  =  request.args.get('Cur_Code',0,type=int)
    row =  country_currency.query.filter(country_currency.Cou_Code == Cou_Code,country_currency.Cur_Code == Cur_Code).first()

    if row is None:
        row=country_currency()
    session['data'] =  {  'Cou_Code':row.Cou_Code, 'Cur_Code':row.Cur_Code, 'Cou_Cur_Comment':row.Cou_Cur_Comment }
                       
    form = frm_country_currency_delete()

    # Tab['has_fks'] True
    
    pass # Tab['has_fks'] True
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.flush()
                db.session.delete(row)
                db.session.commit()
                db.session.flush()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('Country vs Currency Cou_Code,Cur_Code deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_Countries_Currencies_delete',Cou_Code=session['data']['Cou_Code'],Cur_Code=session['data']['Cur_Code']))    
    
            return redirect(url_for('.select_Countries_Currencies_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_Countries_Currencies_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_Countries_Currencies_query'))    
    
    logger.debug('forms_Countries_Currencies_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('countries_currencies_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: Countries_Currencies
# class_name: country_currency
# is shardened: None
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:38.953091
# ======================================================================

# gen_views_select_query.html:AG 2021-12-13 19:33:38.953126        
@main.route('/select/Countries_Currencies_Query', methods=['GET','POST'])
@login_required
@admin_required
def select_Countries_Currencies_query():
    """ Select rows handling function for table 'Countries_Currencies' """
    logger.debug('select_Countries_Currencies_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Countries_Currencies'
    class_name='country_currency'
    template_name='Countries_Currencies'
    sharding=False


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)

    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='country_currency',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='country_currency',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='country_currency',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    foreign_keys.update({'Cou_Code':(country,'country','Cou_Code','Cou_Name','Country Code')})
    foreign_keys.update({'Cur_Code':(currency,'currency','Cur_Code','Cur_Name','Currency Code')})
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='country_currency'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    Cou_Code =  request.args.get('Cou_Code',None,type=str)
    Cur_Code =  request.args.get('Cur_Code',None,type=str)
    Cou_Cur_Comment =  request.args.get('Cou_Cur_Comment',None,type=str)
    
    # Build default query all fields from table
    

    if Cou_Code is not None and len(Cou_Code)>0:
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys['Cou_Code']
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)            
            set_query_option(   engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1=foreign_field,
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Cou_Code
                )
                                
    
    
    if Cur_Code is not None and len(Cur_Code)>0:
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys['Cur_Code']
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)            
            set_query_option(   engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1=foreign_field,
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Cur_Code
                )
                                
    
    
    if Cou_Cur_Comment is not None and len(Cou_Cur_Comment)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Cou_Cur_Comment:Comment',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Cou_Cur_Comment
                )
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['Cou_Code', 'Cur_Code', 'Cou_Cur_Comment']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['Cou_Code', 'Cur_Code', 'Cou_Cur_Comment'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'Cou_Code':
                if value is not None:
                    query = query.filter_by(Cou_Code=value)
            if field == 'Cur_Code':
                if value is not None:
                    query = query.filter_by(Cur_Code=value)
            if field == 'Cou_Cur_Comment':
                if value is not None:
                    query = query.filter_by(Cou_Cur_Comment=value)
            # ------------------------------------------------------------------
    # JOIN other tables and generate foreign fields
    # Will replace class name by sharding class in joins structure
    # will have no effect in no sharding environment
    query = query.join(country,country_currency.Cou_Code == country.Cou_Code).add_columns(country.Cou_Name).join(currency,country_currency.Cur_Code == currency.Cur_Code).add_columns(currency.Cur_Name)
    # ------------------------------------------------------------------
    
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:38.998015
# ======================================================================
# gen_views_api.html:AG 2021-12-13 19:33:38.998039
# table_name: Countries_Currencies
# class_name: country_currency
# is shardened: None
# Table 'Countries_Currencies' keys = Cou_Code,Cur_Code
# Errors: None
# PK field found 'Cou_Code' db.String(2)
# Errors: None
# PK field found 'Cur_Code' db.String(3)
# Countries_Currencies id field is 'Countries_Currencies.Cou_Code' of type ''

@main.route('/api/get/Countries_Currencies'     , methods=['GET'])
@main.route('/api/get/Countries_Currencies/<id>', methods=['GET'])
def api_get_Countries_Currencies(id=None):
    code       = API_OK
    message    = 'OK'
    rows       = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        #response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        #response.headers['Pragma']        = 'no-cache'
        try:
            id_counter = 0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values=[id]
            # Codigo para un solo campo de id
            # chequear si marcado explicitamente
            db.session.flush()
            query = db.session.query(Countries_Currencies)
            if id is not None:
                query = query.filter(Countries_Currencies.Cou_Code == id_values[id_counter])
                rows = query.one_or_none()
            else:
                if request.args is not None and len(request.args):
                    if 'Cou_Code' in request.args:
                        query = query.filter(Countries_Currencies.Cou_Code == request.args.get('Cou_Code'))
                    if 'Cur_Code' in request.args:
                        query = query.filter(Countries_Currencies.Cur_Code == request.args.get('Cur_Code'))
                    if 'Cou_Cur_Comment' in request.args:
                        query = query.filter(Countries_Currencies.Cou_Cur_Comment == request.args.get('Cou_Cur_Comment'))
                rows = query.all()
            if rows is not None:
                if type(rows) == list:
                    for i in range(len(rows)):
                        rows[i] = json.loads(rows[i].get_json())
                else:
                    rows = [json.loads(rows.get_json())]
            else:
                rows = []
            if len(rows) == 0:
                code = API_NO_DATA
                state = get_api_state(API_NO_DATA)
                
                if id is None:
                    message = f"No 'Countries_Currencies' records found"
                else:
                    message = f"No 'Countries_Currencies.Cou_Code' = {id} record found"
                
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Countries_Currencies',entities=rows,name=current_app.config['NAME'])

@main.route('/api/post/Countries_Currencies', methods=['POST'])
def api_post_Countries_Currencies():
    code    = API_OK
    message = 'OK'
    row     = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            row = Countries_Currencies()
            # Populates row from json, if ID=int:autoincrement then None
            row.Cou_Code = request.json.get('Cou_Code',None)
            row.Cur_Code = request.json.get('Cur_Code',None)
            row.Cou_Cur_Comment = request.json.get('Cou_Cur_Comment',None)
            # ----------------------------------------------------------
            db.session.add(row)
            db.session.flush()
            db.session.commit()
            db.session.flush()
            db.session.refresh(row)
            db.session.flush()
            message = f"Created 'Countries_Currencies' Cou_Code = {row.Cou_Code}"
            row     = json.loads(row.get_json())
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
    else:
        code    = API_ERROR
        message = 'Unauthorized request'            
    return get_api_response(code=code,message=message,kind='Countries_Currencies',entities=[row],name=current_app.config['NAME'])

@main.route('/api/put/Countries_Currencies/<id>', methods=['PUT'])
def api_put_Countries_Currencies(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Countries_Currencies()
            query = db.session.query(Countries_Currencies)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Countries_Currencies.Cou_Code == id_values[id_counter])
            id_counter += 1
            query = query.filter(Countries_Currencies.Cur_Code == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                if 'Cou_Cur_Comment' in request.json.keys():
                    row.Cou_Cur_Comment = request.json.get('Cou_Cur_Comment')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Countries_Currencies' Cou_Code = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found Countries_Currencies with Cou_Code = {id}"
                row     = None
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Countries_Currencies',entities=[row],name=current_app.config['NAME'])

@main.route('/api/patch/Countries_Currencies/<id>', methods=['PATCH'])
def api_patch_Countries_Currencies(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Countries_Currencies()
            query = db.session.query(Countries_Currencies)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Countries_Currencies.Cou_Code == id_values[id_counter])
            id_counter += 1
            query = query.filter(Countries_Currencies.Cur_Code == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                db.session.rollback()
                if request.values is not None and len(request.values):
                    if 'Cou_Cur_Comment' in request.values:
                        row.Cou_Cur_Comment = request.values.get('Cou_Cur_Comment')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Countries_Currencies' Cou_Code = {id}"
                try:
                    row     = json.loads(row.get_json())
                except:
                    row     = None
            else:
                code    = API_NOT_FOUND
                message = f"Not found Countries_Currencies with Cou_Code = {id}"
                row     = None
                db.session.rollback()
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
            db.session.rollback()
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Countries_Currencies',entities=[row],name=current_app.config['NAME'])

@main.route('/api/delete/Countries_Currencies/<id>', methods=['DELETE'])
def api_delete_Countries_Currencies(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Countries_Currencies()
            query = db.session.query(Countries_Currencies)
            
            # First loop mandatory for row population ----------------------
            # detected primary key field: c.field
            query       = query.filter(Countries_Currencies.Cou_Code == id_values[id_counter])
            id_counter +=1
            # detected primary key field: c.field
            query       = query.filter(Countries_Currencies.Cur_Code == id_values[id_counter])
            id_counter +=1
            # --------------------------------------------------------------
            row = query.one_or_none()

            if row is not None:
                db.session.delete(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                message = f"Deleted 'Countries_Currencies' Cou_Code = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found 'Countries_Currencies' with Cou_Code = {id}"
                row     = None        
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Countries_Currencies',entities=[],name=current_app.config['NAME'])

# ======================================================================# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2021-12-13 19:33:35
# =============================================================================
# gen_views.py:32 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_countries.py
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:38.735864
# ======================================================================        
# gen_views_form.html:AG 2021-12-13 19:33:38.735892
@main.route('/forms/Countries', methods=['GET', 'POST'])
@login_required

def forms_Countries():
    """ Form handling function for table Countries """
    logger.debug('forms_Countries(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Countries'
    class_name='country'
    template_name='Countries'
    sharding=False
    Cou_Code  =  request.args.get('Cou_Code',0,type=int)
    
    # Ensures DB Data is commited prior main query
    try:
        db.session.commit()
    except:
        db.session.rollback()
    row =  country.query.filter(country.Cou_Code == Cou_Code).first()
    if row is None:
        row=country()
        session['is_new_row']=True
    session['data'] =  {  'Cou_Code':row.Cou_Code, 'Cou_Name':row.Cou_Name, 'Cou_A3':row.Cou_A3, 'Cou_N':row.Cou_N }
    
    form = frm_country()
    
    # Actual Form activation here
    if form.validate_on_submit():
        # Code for SAVE option -----------------------------------------
        if form.submit_Save.data and current_user.role_id > 1:
            row.Cou_Code = form.Cou_Code.data
            row.Cou_Name = form.Cou_Name.data
            row.Cou_A3 = form.Cou_A3.data
            row.Cou_N = form.Cou_N.data
            try:
               session['new_row']=str(row)
               db.session.flush()
               db.session.add(row)
               db.session.commit()
               db.session.flush()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New Country created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>Country Cou_Code saved OK</b>')
                   flash(message)
               db.session.flush()
            except Exception as e:
               db.session.rollback()
               db.session.flush()
               message=Markup('ERROR saving Country record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_Countries_query'))
        # --------------------------------------------------------------
        # Code for NEW option
        # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.flush()
            row=country()
    
            return redirect(url_for('.forms_Countries'))    
    
        # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('Country Record modifications discarded ...')
            flash(message)
        # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>Country data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_'))    
    
    
    form.Cou_Code.data = row.Cou_Code
    form.Cou_Name.data = row.Cou_Name
    form.Cou_A3.data = row.Cou_A3
    form.Cou_N.data = row.Cou_N
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_Countries(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = [{'name': 'countries_currencies', 'class': 'country_currency', 'backref': 'country', 'caption': 'Countries vs Currencies', 'table': 'Countries_Currencies'}]
    
    from flask_sqlalchemy import Pagination
    # [{'name': 'countries_currencies', 'class': 'country_currency', 'backref': 'country', 'caption': 'Countries vs Currencies', 'table': 'Countries_Currencies'}]
    try:
        if hasattr(row, 'countries_currencies'):
            P.append(({'name': 'countries_currencies', 'class': 'country_currency', 'backref': 'country', 'caption': 'Countries vs Currencies', 'table': 'Countries_Currencies'},row.countries_currencies.paginate()))
    except Exception as e:
        print(f'Exception: {str(e)}')
    
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('countries.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:38.748468
# ======================================================================        
# gen_views_delete.html:AG 2021-12-13 19:33:38.748483
@main.route('/forms/Countries_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)
@admin_required
def forms_Countries_delete():
    """ Delete record handling function for table Countries """
    logger.debug('forms_Countries_delete(): Enter')
    Cou_Code  =  request.args.get('Cou_Code',0,type=int)
    row =  country.query.filter(country.Cou_Code == Cou_Code).first()

    if row is None:
        row=country()
    session['data'] =  {  'Cou_Code':row.Cou_Code, 'Cou_Name':row.Cou_Name, 'Cou_A3':row.Cou_A3, 'Cou_N':row.Cou_N }
                       
    form = frm_country_delete()

    # Tab['has_fks'] False
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.flush()
                db.session.delete(row)
                db.session.commit()
                db.session.flush()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('Country Cou_Code deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_Countries_delete',Cou_Code=session['data']['Cou_Code']))    
    
            return redirect(url_for('.select_Countries_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_Countries_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_Countries_query'))    
    
    logger.debug('forms_Countries_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('countries_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: Countries
# class_name: country
# is shardened: None
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:38.769104
# ======================================================================

# gen_views_select_query.html:AG 2021-12-13 19:33:38.769130        
@main.route('/select/Countries_Query', methods=['GET','POST'])
@login_required
@admin_required
def select_Countries_query():
    """ Select rows handling function for table 'Countries' """
    logger.debug('select_Countries_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Countries'
    class_name='country'
    template_name='Countries'
    sharding=False


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)

    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='country',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='country',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='country',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='country'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    Cou_Code =  request.args.get('Cou_Code',None,type=str)
    Cou_Name =  request.args.get('Cou_Name',None,type=str)
    Cou_A3 =  request.args.get('Cou_A3',None,type=str)
    Cou_N =  request.args.get('Cou_N',None,type=str)
    
    # Build default query all fields from table
    

    if Cou_Code is not None and len(Cou_Code)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Cou_Code:Code',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Cou_Code
                )
    
    
    if Cou_Name is not None and len(Cou_Name)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Cou_Name:Name',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Cou_Name
                )
    
    
    if Cou_A3 is not None and len(Cou_A3)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Cou_A3:Alphanum Code',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Cou_A3
                )
    
    
    if Cou_N is not None and len(Cou_N)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Cou_N:ISO Numeric Code',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Cou_N
                )
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['Cou_Code', 'Cou_Name', 'Cou_A3', 'Cou_N']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['Cou_Code', 'Cou_Name', 'Cou_A3', 'Cou_N'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'Cou_Code':
                if value is not None:
                    query = query.filter_by(Cou_Code=value)
            if field == 'Cou_Name':
                if value is not None:
                    query = query.filter_by(Cou_Name=value)
            if field == 'Cou_A3':
                if value is not None:
                    query = query.filter_by(Cou_A3=value)
            if field == 'Cou_N':
                if value is not None:
                    query = query.filter_by(Cou_N=value)
            
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:38.802893
# ======================================================================
# gen_views_api.html:AG 2021-12-13 19:33:38.802909
# table_name: Countries
# class_name: country
# is shardened: None
# Table 'Countries' keys = Cou_Code
# Errors: None
# PK field found 'Cou_Code' db.String(2)
# Countries id field is 'Countries.Cou_Code' of type ''

@main.route('/api/get/Countries'     , methods=['GET'])
@main.route('/api/get/Countries/<id>', methods=['GET'])
def api_get_Countries(id=None):
    code       = API_OK
    message    = 'OK'
    rows       = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        #response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        #response.headers['Pragma']        = 'no-cache'
        try:
            id_counter = 0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values=[id]
            # Codigo para un solo campo de id
            # chequear si marcado explicitamente
            db.session.flush()
            query = db.session.query(Countries)
            if id is not None:
                query = query.filter(Countries.Cou_Code == id_values[id_counter])
                rows = query.one_or_none()
            else:
                if request.args is not None and len(request.args):
                    if 'Cou_Code' in request.args:
                        query = query.filter(Countries.Cou_Code == request.args.get('Cou_Code'))
                    if 'Cou_Name' in request.args:
                        query = query.filter(Countries.Cou_Name == request.args.get('Cou_Name'))
                    if 'Cou_A3' in request.args:
                        query = query.filter(Countries.Cou_A3 == request.args.get('Cou_A3'))
                    if 'Cou_N' in request.args:
                        query = query.filter(Countries.Cou_N == request.args.get('Cou_N'))
                rows = query.all()
            if rows is not None:
                if type(rows) == list:
                    for i in range(len(rows)):
                        rows[i] = json.loads(rows[i].get_json())
                else:
                    rows = [json.loads(rows.get_json())]
            else:
                rows = []
            if len(rows) == 0:
                code = API_NO_DATA
                state = get_api_state(API_NO_DATA)
                
                if id is None:
                    message = f"No 'Countries' records found"
                else:
                    message = f"No 'Countries.Cou_Code' = {id} record found"
                
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Countries',entities=rows,name=current_app.config['NAME'])

@main.route('/api/post/Countries', methods=['POST'])
def api_post_Countries():
    code    = API_OK
    message = 'OK'
    row     = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            row = Countries()
            # Populates row from json, if ID=int:autoincrement then None
            row.Cou_Code = request.json.get('Cou_Code',None)
            row.Cou_Name = request.json.get('Cou_Name',None)
            row.Cou_A3 = request.json.get('Cou_A3',None)
            row.Cou_N = request.json.get('Cou_N',None)
            # ----------------------------------------------------------
            db.session.add(row)
            db.session.flush()
            db.session.commit()
            db.session.flush()
            db.session.refresh(row)
            db.session.flush()
            message = f"Created 'Countries' Cou_Code = {row.Cou_Code}"
            row     = json.loads(row.get_json())
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
    else:
        code    = API_ERROR
        message = 'Unauthorized request'            
    return get_api_response(code=code,message=message,kind='Countries',entities=[row],name=current_app.config['NAME'])

@main.route('/api/put/Countries/<id>', methods=['PUT'])
def api_put_Countries(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Countries()
            query = db.session.query(Countries)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Countries.Cou_Code == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                if 'Cou_Name' in request.json.keys():
                    row.Cou_Name = request.json.get('Cou_Name')
                if 'Cou_A3' in request.json.keys():
                    row.Cou_A3 = request.json.get('Cou_A3')
                if 'Cou_N' in request.json.keys():
                    row.Cou_N = request.json.get('Cou_N')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Countries' Cou_Code = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found Countries with Cou_Code = {id}"
                row     = None
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Countries',entities=[row],name=current_app.config['NAME'])

@main.route('/api/patch/Countries/<id>', methods=['PATCH'])
def api_patch_Countries(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Countries()
            query = db.session.query(Countries)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Countries.Cou_Code == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                db.session.rollback()
                if request.values is not None and len(request.values):
                    if 'Cou_Name' in request.values:
                        row.Cou_Name = request.values.get('Cou_Name')
                    if 'Cou_A3' in request.values:
                        row.Cou_A3 = request.values.get('Cou_A3')
                    if 'Cou_N' in request.values:
                        row.Cou_N = request.values.get('Cou_N')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Countries' Cou_Code = {id}"
                try:
                    row     = json.loads(row.get_json())
                except:
                    row     = None
            else:
                code    = API_NOT_FOUND
                message = f"Not found Countries with Cou_Code = {id}"
                row     = None
                db.session.rollback()
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
            db.session.rollback()
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Countries',entities=[row],name=current_app.config['NAME'])

@main.route('/api/delete/Countries/<id>', methods=['DELETE'])
def api_delete_Countries(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Countries()
            query = db.session.query(Countries)
            
            # First loop mandatory for row population ----------------------
            # detected primary key field: c.field
            query       = query.filter(Countries.Cou_Code == id_values[id_counter])
            id_counter +=1
            # --------------------------------------------------------------
            row = query.one_or_none()

            if row is not None:
                db.session.delete(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                message = f"Deleted 'Countries' Cou_Code = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found 'Countries' with Cou_Code = {id}"
                row     = None        
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Countries',entities=[],name=current_app.config['NAME'])

# ======================================================================# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2021-12-13 19:33:35
# =============================================================================
# gen_views.py:32 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_cu_operations.py
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:37.066421
# ======================================================================        
# gen_views_form.html:AG 2021-12-13 19:33:37.066455
@main.route('/forms/CU_Operations', methods=['GET', 'POST'])
@login_required

def forms_CU_Operations():
    """ Form handling function for table CU_Operations """
    logger.debug('forms_CU_Operations(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='CU_Operations'
    class_name='cu_operation'
    template_name='CU_Operations'
    sharding=False
    CU_Operation  =  request.args.get('CU_Operation',0,type=int)
    
    # Ensures DB Data is commited prior main query
    try:
        db.session.commit()
    except:
        db.session.rollback()
    row =  cu_operation.query.filter(cu_operation.CU_Operation == CU_Operation).first()
    if row is None:
        row=cu_operation()
        session['is_new_row']=True
    session['data'] =  {  'CU_Operation':row.CU_Operation, 'Value':row.Value, 'Is_Multiply':row.Is_Multiply, 'Factor':row.Factor }
    
    form = frm_cu_operation()
    
    # Actual Form activation here
    if form.validate_on_submit():
        # Code for SAVE option -----------------------------------------
        if form.submit_Save.data and current_user.role_id > 1:
            row.CU_Operation = form.CU_Operation.data
            row.Value = form.Value.data
            row.Is_Multiply = form.Is_Multiply.data
            row.Factor = form.Factor.data
            try:
               session['new_row']=str(row)
               db.session.flush()
               db.session.add(row)
               db.session.commit()
               db.session.flush()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New Charge Unit Conversion Operation created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>Charge Unit Conversion Operation CU_Operation saved OK</b>')
                   flash(message)
               db.session.flush()
            except Exception as e:
               db.session.rollback()
               db.session.flush()
               message=Markup('ERROR saving Charge Unit Conversion Operation record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_CU_Operations_query'))
        # --------------------------------------------------------------
        # Code for NEW option
        # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.flush()
            row=cu_operation()
    
            return redirect(url_for('.forms_CU_Operations'))    
    
        # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('Charge Unit Conversion Operation Record modifications discarded ...')
            flash(message)
        # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>Charge Unit Conversion Operation data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_'))    
    
    
    form.CU_Operation.data = row.CU_Operation
    form.Value.data = row.Value
    form.Is_Multiply.data = row.Is_Multiply
    form.Factor.data = row.Factor
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_CU_Operations(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = [{'name': 'charge_units', 'class': 'charge_unit', 'backref': 'cu_operation', 'caption': 'Charge Units', 'table': 'Charge_Units'}]
    
    from flask_sqlalchemy import Pagination
    # [{'name': 'charge_units', 'class': 'charge_unit', 'backref': 'cu_operation', 'caption': 'Charge Units', 'table': 'Charge_Units'}]
    try:
        if hasattr(row, 'charge_units'):
            P.append(({'name': 'charge_units', 'class': 'charge_unit', 'backref': 'cu_operation', 'caption': 'Charge Units', 'table': 'Charge_Units'},row.charge_units.paginate()))
    except Exception as e:
        print(f'Exception: {str(e)}')
    
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('cu_operations.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:37.075775
# ======================================================================        
# gen_views_delete.html:AG 2021-12-13 19:33:37.075790
@main.route('/forms/CU_Operations_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)
@admin_required
def forms_CU_Operations_delete():
    """ Delete record handling function for table CU_Operations """
    logger.debug('forms_CU_Operations_delete(): Enter')
    CU_Operation  =  request.args.get('CU_Operation',0,type=int)
    row =  cu_operation.query.filter(cu_operation.CU_Operation == CU_Operation).first()

    if row is None:
        row=cu_operation()
    session['data'] =  {  'CU_Operation':row.CU_Operation, 'Value':row.Value, 'Is_Multiply':row.Is_Multiply, 'Factor':row.Factor }
                       
    form = frm_cu_operation_delete()

    # Tab['has_fks'] False
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.flush()
                db.session.delete(row)
                db.session.commit()
                db.session.flush()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('Charge Unit Conversion Operation CU_Operation deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_CU_Operations_delete',CU_Operation=session['data']['CU_Operation']))    
    
            return redirect(url_for('.select_CU_Operations_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_CU_Operations_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_CU_Operations_query'))    
    
    logger.debug('forms_CU_Operations_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('cu_operations_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: CU_Operations
# class_name: cu_operation
# is shardened: None
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:37.112713
# ======================================================================

# gen_views_select_query.html:AG 2021-12-13 19:33:37.112727        
@main.route('/select/CU_Operations_Query', methods=['GET','POST'])
@login_required
@admin_required
def select_CU_Operations_query():
    """ Select rows handling function for table 'CU_Operations' """
    logger.debug('select_CU_Operations_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='CU_Operations'
    class_name='cu_operation'
    template_name='CU_Operations'
    sharding=False


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)

    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='cu_operation',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='cu_operation',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='cu_operation',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='cu_operation'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    CU_Operation =  request.args.get('CU_Operation',None,type=str)
    Value =  request.args.get('Value',None,type=str)
    Is_Multiply =  request.args.get('Is_Multiply',None,type=str)
    Factor =  request.args.get('Factor',None,type=str)
    
    # Build default query all fields from table
    

    if CU_Operation is not None and len(CU_Operation)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CU_Operation:Operation',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_Operation
                )
    
    
    if Value is not None and len(Value)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Value:Value',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Value
                )
    
    
    if Is_Multiply is not None and len(Is_Multiply)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Is_Multiply:Is Multiply',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Is_Multiply
                )
    
    
    if Factor is not None and len(Factor)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Factor:Factor',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Factor
                )
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['CU_Operation', 'Value', 'Is_Multiply', 'Factor']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['CU_Operation', 'Value', 'Is_Multiply', 'Factor'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'CU_Operation':
                if value is not None:
                    query = query.filter_by(CU_Operation=value)
            if field == 'Value':
                if value is not None:
                    query = query.filter_by(Value=value)
            if field == 'Is_Multiply':
                if value is not None:
                    query = query.filter_by(Is_Multiply=value)
            if field == 'Factor':
                if value is not None:
                    query = query.filter_by(Factor=value)
            
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:37.155348
# ======================================================================
# gen_views_api.html:AG 2021-12-13 19:33:37.155373
# table_name: CU_Operations
# class_name: cu_operation
# is shardened: None
# Table 'CU_Operations' keys = CU_Operation
# Errors: None
# PK field found 'CU_Operation' db.String(10)
# CU_Operations id field is 'CU_Operations.CU_Operation' of type ''

@main.route('/api/get/CU_Operations'     , methods=['GET'])
@main.route('/api/get/CU_Operations/<id>', methods=['GET'])
def api_get_CU_Operations(id=None):
    code       = API_OK
    message    = 'OK'
    rows       = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        #response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        #response.headers['Pragma']        = 'no-cache'
        try:
            id_counter = 0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values=[id]
            # Codigo para un solo campo de id
            # chequear si marcado explicitamente
            db.session.flush()
            query = db.session.query(CU_Operations)
            if id is not None:
                query = query.filter(CU_Operations.CU_Operation == id_values[id_counter])
                rows = query.one_or_none()
            else:
                if request.args is not None and len(request.args):
                    if 'CU_Operation' in request.args:
                        query = query.filter(CU_Operations.CU_Operation == request.args.get('CU_Operation'))
                    if 'Value' in request.args:
                        query = query.filter(CU_Operations.Value == request.args.get('Value'))
                    if 'Is_Multiply' in request.args:
                        query = query.filter(CU_Operations.Is_Multiply == request.args.get('Is_Multiply'))
                    if 'Factor' in request.args:
                        query = query.filter(CU_Operations.Factor == request.args.get('Factor'))
                rows = query.all()
            if rows is not None:
                if type(rows) == list:
                    for i in range(len(rows)):
                        rows[i] = json.loads(rows[i].get_json())
                else:
                    rows = [json.loads(rows.get_json())]
            else:
                rows = []
            if len(rows) == 0:
                code = API_NO_DATA
                state = get_api_state(API_NO_DATA)
                
                if id is None:
                    message = f"No 'CU_Operations' records found"
                else:
                    message = f"No 'CU_Operations.CU_Operation' = {id} record found"
                
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='CU_Operations',entities=rows,name=current_app.config['NAME'])

@main.route('/api/post/CU_Operations', methods=['POST'])
def api_post_CU_Operations():
    code    = API_OK
    message = 'OK'
    row     = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            row = CU_Operations()
            # Populates row from json, if ID=int:autoincrement then None
            row.CU_Operation = request.json.get('CU_Operation',None)
            row.Value = request.json.get('Value',None)
            row.Is_Multiply = request.json.get('Is_Multiply',None)
            row.Factor = request.json.get('Factor',None)
            # ----------------------------------------------------------
            db.session.add(row)
            db.session.flush()
            db.session.commit()
            db.session.flush()
            db.session.refresh(row)
            db.session.flush()
            message = f"Created 'CU_Operations' CU_Operation = {row.CU_Operation}"
            row     = json.loads(row.get_json())
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
    else:
        code    = API_ERROR
        message = 'Unauthorized request'            
    return get_api_response(code=code,message=message,kind='CU_Operations',entities=[row],name=current_app.config['NAME'])

@main.route('/api/put/CU_Operations/<id>', methods=['PUT'])
def api_put_CU_Operations(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = CU_Operations()
            query = db.session.query(CU_Operations)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(CU_Operations.CU_Operation == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                if 'Value' in request.json.keys():
                    row.Value = request.json.get('Value')
                if 'Is_Multiply' in request.json.keys():
                    row.Is_Multiply = request.json.get('Is_Multiply')
                if 'Factor' in request.json.keys():
                    row.Factor = request.json.get('Factor')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'CU_Operations' CU_Operation = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found CU_Operations with CU_Operation = {id}"
                row     = None
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='CU_Operations',entities=[row],name=current_app.config['NAME'])

@main.route('/api/patch/CU_Operations/<id>', methods=['PATCH'])
def api_patch_CU_Operations(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = CU_Operations()
            query = db.session.query(CU_Operations)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(CU_Operations.CU_Operation == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                db.session.rollback()
                if request.values is not None and len(request.values):
                    if 'Value' in request.values:
                        row.Value = request.values.get('Value')
                    if 'Is_Multiply' in request.values:
                        row.Is_Multiply = request.values.get('Is_Multiply')
                    if 'Factor' in request.values:
                        row.Factor = request.values.get('Factor')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'CU_Operations' CU_Operation = {id}"
                try:
                    row     = json.loads(row.get_json())
                except:
                    row     = None
            else:
                code    = API_NOT_FOUND
                message = f"Not found CU_Operations with CU_Operation = {id}"
                row     = None
                db.session.rollback()
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
            db.session.rollback()
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='CU_Operations',entities=[row],name=current_app.config['NAME'])

@main.route('/api/delete/CU_Operations/<id>', methods=['DELETE'])
def api_delete_CU_Operations(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = CU_Operations()
            query = db.session.query(CU_Operations)
            
            # First loop mandatory for row population ----------------------
            # detected primary key field: c.field
            query       = query.filter(CU_Operations.CU_Operation == id_values[id_counter])
            id_counter +=1
            # --------------------------------------------------------------
            row = query.one_or_none()

            if row is not None:
                db.session.delete(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                message = f"Deleted 'CU_Operations' CU_Operation = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found 'CU_Operations' with CU_Operation = {id}"
                row     = None        
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='CU_Operations',entities=[],name=current_app.config['NAME'])

# ======================================================================# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2021-12-13 19:33:35
# =============================================================================
# gen_views.py:32 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_currencies.py
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:39.095305
# ======================================================================        
# gen_views_form.html:AG 2021-12-13 19:33:39.095321
@main.route('/forms/Currencies', methods=['GET', 'POST'])
@login_required

def forms_Currencies():
    """ Form handling function for table Currencies """
    logger.debug('forms_Currencies(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Currencies'
    class_name='currency'
    template_name='Currencies'
    sharding=False
    Cur_Code  =  request.args.get('Cur_Code',0,type=int)
    
    # Ensures DB Data is commited prior main query
    try:
        db.session.commit()
    except:
        db.session.rollback()
    row =  currency.query.filter(currency.Cur_Code == Cur_Code).first()
    if row is None:
        row=currency()
        session['is_new_row']=True
    session['data'] =  {  'Cur_Code':row.Cur_Code, 'Cur_Name':row.Cur_Name, 'Cur_Id':row.Cur_Id, 'Cur_Comment':row.Cur_Comment }
    
    form = frm_currency()
    
    # Actual Form activation here
    if form.validate_on_submit():
        # Code for SAVE option -----------------------------------------
        if form.submit_Save.data and current_user.role_id > 1:
            row.Cur_Code = form.Cur_Code.data
            row.Cur_Name = form.Cur_Name.data
            row.Cur_Id = form.Cur_Id.data
            row.Cur_Comment = form.Cur_Comment.data
            try:
               session['new_row']=str(row)
               db.session.flush()
               db.session.add(row)
               db.session.commit()
               db.session.flush()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New Currency created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>Currency Cur_Code saved OK</b>')
                   flash(message)
               db.session.flush()
            except Exception as e:
               db.session.rollback()
               db.session.flush()
               message=Markup('ERROR saving Currency record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_Currencies_query'))
        # --------------------------------------------------------------
        # Code for NEW option
        # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.flush()
            row=currency()
    
            return redirect(url_for('.forms_Currencies'))    
    
        # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('Currency Record modifications discarded ...')
            flash(message)
        # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>Currency data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_'))    
    
    
    form.Cur_Code.data = row.Cur_Code
    form.Cur_Name.data = row.Cur_Name
    form.Cur_Id.data = row.Cur_Id
    form.Cur_Comment.data = row.Cur_Comment
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_Currencies(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = [{'name': 'cost_centers', 'class': 'cost_center', 'backref': 'currency', 'caption': 'Cost Centers', 'table': 'Cost_Centers'}, {'name': 'countries_currencies', 'class': 'country_currency', 'backref': 'currency', 'caption': 'Countries vs Currencies', 'table': 'Countries_Currencies'}, {'name': 'exchange_rates', 'class': 'exchange_rate', 'backref': 'currency', 'caption': 'Exchange Rates', 'table': 'Exchange_Rates'}, {'name': 'rates', 'class': 'rate', 'backref': 'currency', 'caption': 'Rates', 'table': 'Rates'}]
    
    from flask_sqlalchemy import Pagination
    # [{'name': 'cost_centers', 'class': 'cost_center', 'backref': 'currency', 'caption': 'Cost Centers', 'table': 'Cost_Centers'}, {'name': 'countries_currencies', 'class': 'country_currency', 'backref': 'currency', 'caption': 'Countries vs Currencies', 'table': 'Countries_Currencies'}, {'name': 'exchange_rates', 'class': 'exchange_rate', 'backref': 'currency', 'caption': 'Exchange Rates', 'table': 'Exchange_Rates'}, {'name': 'rates', 'class': 'rate', 'backref': 'currency', 'caption': 'Rates', 'table': 'Rates'}]
    try:
        if hasattr(row, 'cost_centers'):
            P.append(({'name': 'cost_centers', 'class': 'cost_center', 'backref': 'currency', 'caption': 'Cost Centers', 'table': 'Cost_Centers'},row.cost_centers.paginate()))
    except Exception as e:
        print(f'Exception: {str(e)}')
    try:
        if hasattr(row, 'countries_currencies'):
            P.append(({'name': 'countries_currencies', 'class': 'country_currency', 'backref': 'currency', 'caption': 'Countries vs Currencies', 'table': 'Countries_Currencies'},row.countries_currencies.paginate()))
    except Exception as e:
        print(f'Exception: {str(e)}')
    try:
        if hasattr(row, 'exchange_rates'):
            P.append(({'name': 'exchange_rates', 'class': 'exchange_rate', 'backref': 'currency', 'caption': 'Exchange Rates', 'table': 'Exchange_Rates'},row.exchange_rates.paginate()))
    except Exception as e:
        print(f'Exception: {str(e)}')
    try:
        if hasattr(row, 'rates'):
            P.append(({'name': 'rates', 'class': 'rate', 'backref': 'currency', 'caption': 'Rates', 'table': 'Rates'},row.rates.paginate()))
    except Exception as e:
        print(f'Exception: {str(e)}')
    
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('currencies.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:39.105404
# ======================================================================        
# gen_views_delete.html:AG 2021-12-13 19:33:39.105420
@main.route('/forms/Currencies_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)
@admin_required
def forms_Currencies_delete():
    """ Delete record handling function for table Currencies """
    logger.debug('forms_Currencies_delete(): Enter')
    Cur_Code  =  request.args.get('Cur_Code',0,type=int)
    row =  currency.query.filter(currency.Cur_Code == Cur_Code).first()

    if row is None:
        row=currency()
    session['data'] =  {  'Cur_Code':row.Cur_Code, 'Cur_Name':row.Cur_Name, 'Cur_Id':row.Cur_Id, 'Cur_Comment':row.Cur_Comment }
                       
    form = frm_currency_delete()

    # Tab['has_fks'] False
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.flush()
                db.session.delete(row)
                db.session.commit()
                db.session.flush()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('Currency Cur_Code deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_Currencies_delete',Cur_Code=session['data']['Cur_Code']))    
    
            return redirect(url_for('.select_Currencies_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_Currencies_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_Currencies_query'))    
    
    logger.debug('forms_Currencies_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('currencies_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: Currencies
# class_name: currency
# is shardened: None
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:39.124961
# ======================================================================

# gen_views_select_query.html:AG 2021-12-13 19:33:39.125009        
@main.route('/select/Currencies_Query', methods=['GET','POST'])
@login_required
@admin_required
def select_Currencies_query():
    """ Select rows handling function for table 'Currencies' """
    logger.debug('select_Currencies_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Currencies'
    class_name='currency'
    template_name='Currencies'
    sharding=False


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)

    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='currency',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='currency',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='currency',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='currency'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    Cur_Code =  request.args.get('Cur_Code',None,type=str)
    Cur_Name =  request.args.get('Cur_Name',None,type=str)
    Cur_Id =  request.args.get('Cur_Id',None,type=str)
    Cur_Comment =  request.args.get('Cur_Comment',None,type=str)
    
    # Build default query all fields from table
    

    if Cur_Code is not None and len(Cur_Code)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Cur_Code:Code',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Cur_Code
                )
    
    
    if Cur_Name is not None and len(Cur_Name)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Cur_Name:Name',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Cur_Name
                )
    
    
    if Cur_Id is not None and len(Cur_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Cur_Id:Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Cur_Id
                )
    
    
    if Cur_Comment is not None and len(Cur_Comment)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Cur_Comment:Comment',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Cur_Comment
                )
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['Cur_Code', 'Cur_Name', 'Cur_Id', 'Cur_Comment']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['Cur_Code', 'Cur_Name', 'Cur_Id', 'Cur_Comment'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'Cur_Code':
                if value is not None:
                    query = query.filter_by(Cur_Code=value)
            if field == 'Cur_Name':
                if value is not None:
                    query = query.filter_by(Cur_Name=value)
            if field == 'Cur_Id':
                if value is not None:
                    query = query.filter_by(Cur_Id=value)
            if field == 'Cur_Comment':
                if value is not None:
                    query = query.filter_by(Cur_Comment=value)
            
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:39.155700
# ======================================================================
# gen_views_api.html:AG 2021-12-13 19:33:39.155715
# table_name: Currencies
# class_name: currency
# is shardened: None
# Table 'Currencies' keys = Cur_Code
# Errors: None
# PK field found 'Cur_Code' db.String(3)
# Currencies id field is 'Currencies.Cur_Code' of type ''

@main.route('/api/get/Currencies'     , methods=['GET'])
@main.route('/api/get/Currencies/<id>', methods=['GET'])
def api_get_Currencies(id=None):
    code       = API_OK
    message    = 'OK'
    rows       = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        #response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        #response.headers['Pragma']        = 'no-cache'
        try:
            id_counter = 0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values=[id]
            # Codigo para un solo campo de id
            # chequear si marcado explicitamente
            db.session.flush()
            query = db.session.query(Currencies)
            if id is not None:
                query = query.filter(Currencies.Cur_Code == id_values[id_counter])
                rows = query.one_or_none()
            else:
                if request.args is not None and len(request.args):
                    if 'Cur_Code' in request.args:
                        query = query.filter(Currencies.Cur_Code == request.args.get('Cur_Code'))
                    if 'Cur_Name' in request.args:
                        query = query.filter(Currencies.Cur_Name == request.args.get('Cur_Name'))
                    if 'Cur_Id' in request.args:
                        query = query.filter(Currencies.Cur_Id == request.args.get('Cur_Id'))
                    if 'Cur_Comment' in request.args:
                        query = query.filter(Currencies.Cur_Comment == request.args.get('Cur_Comment'))
                rows = query.all()
            if rows is not None:
                if type(rows) == list:
                    for i in range(len(rows)):
                        rows[i] = json.loads(rows[i].get_json())
                else:
                    rows = [json.loads(rows.get_json())]
            else:
                rows = []
            if len(rows) == 0:
                code = API_NO_DATA
                state = get_api_state(API_NO_DATA)
                
                if id is None:
                    message = f"No 'Currencies' records found"
                else:
                    message = f"No 'Currencies.Cur_Code' = {id} record found"
                
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Currencies',entities=rows,name=current_app.config['NAME'])

@main.route('/api/post/Currencies', methods=['POST'])
def api_post_Currencies():
    code    = API_OK
    message = 'OK'
    row     = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            row = Currencies()
            # Populates row from json, if ID=int:autoincrement then None
            row.Cur_Code = request.json.get('Cur_Code',None)
            row.Cur_Name = request.json.get('Cur_Name',None)
            row.Cur_Id = request.json.get('Cur_Id',None)
            row.Cur_Comment = request.json.get('Cur_Comment',None)
            # ----------------------------------------------------------
            db.session.add(row)
            db.session.flush()
            db.session.commit()
            db.session.flush()
            db.session.refresh(row)
            db.session.flush()
            message = f"Created 'Currencies' Cur_Code = {row.Cur_Code}"
            row     = json.loads(row.get_json())
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
    else:
        code    = API_ERROR
        message = 'Unauthorized request'            
    return get_api_response(code=code,message=message,kind='Currencies',entities=[row],name=current_app.config['NAME'])

@main.route('/api/put/Currencies/<id>', methods=['PUT'])
def api_put_Currencies(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Currencies()
            query = db.session.query(Currencies)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Currencies.Cur_Code == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                if 'Cur_Name' in request.json.keys():
                    row.Cur_Name = request.json.get('Cur_Name')
                if 'Cur_Id' in request.json.keys():
                    row.Cur_Id = request.json.get('Cur_Id')
                if 'Cur_Comment' in request.json.keys():
                    row.Cur_Comment = request.json.get('Cur_Comment')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Currencies' Cur_Code = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found Currencies with Cur_Code = {id}"
                row     = None
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Currencies',entities=[row],name=current_app.config['NAME'])

@main.route('/api/patch/Currencies/<id>', methods=['PATCH'])
def api_patch_Currencies(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Currencies()
            query = db.session.query(Currencies)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Currencies.Cur_Code == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                db.session.rollback()
                if request.values is not None and len(request.values):
                    if 'Cur_Name' in request.values:
                        row.Cur_Name = request.values.get('Cur_Name')
                    if 'Cur_Id' in request.values:
                        row.Cur_Id = request.values.get('Cur_Id')
                    if 'Cur_Comment' in request.values:
                        row.Cur_Comment = request.values.get('Cur_Comment')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Currencies' Cur_Code = {id}"
                try:
                    row     = json.loads(row.get_json())
                except:
                    row     = None
            else:
                code    = API_NOT_FOUND
                message = f"Not found Currencies with Cur_Code = {id}"
                row     = None
                db.session.rollback()
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
            db.session.rollback()
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Currencies',entities=[row],name=current_app.config['NAME'])

@main.route('/api/delete/Currencies/<id>', methods=['DELETE'])
def api_delete_Currencies(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Currencies()
            query = db.session.query(Currencies)
            
            # First loop mandatory for row population ----------------------
            # detected primary key field: c.field
            query       = query.filter(Currencies.Cur_Code == id_values[id_counter])
            id_counter +=1
            # --------------------------------------------------------------
            row = query.one_or_none()

            if row is not None:
                db.session.delete(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                message = f"Deleted 'Currencies' Cur_Code = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found 'Currencies' with Cur_Code = {id}"
                row     = None        
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Currencies',entities=[],name=current_app.config['NAME'])

# ======================================================================# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2021-12-13 19:33:35
# =============================================================================
# gen_views.py:32 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_customers.py
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:39.281000
# ======================================================================        
# gen_views_form.html:AG 2021-12-13 19:33:39.281019
@main.route('/forms/Customers', methods=['GET', 'POST'])
@login_required

def forms_Customers():
    """ Form handling function for table Customers """
    logger.debug('forms_Customers(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Customers'
    class_name='customer'
    template_name='Customers'
    sharding=False
    Cus_Id  =  request.args.get('Cus_Id',0,type=int)
    
    # Ensures DB Data is commited prior main query
    try:
        db.session.commit()
    except:
        db.session.rollback()
    row =  customer.query.filter(customer.Cus_Id == Cus_Id).first()
    if row is None:
        row=customer()
        session['is_new_row']=True
    session['data'] =  {  'Cus_Id':row.Cus_Id, 'Cus_Name':row.Cus_Name, 'CC_Id':row.CC_Id }
    
    form = frm_customer()
    
    if form.has_FKs:
        form.CC_Id.choices = db.session.query(cost_center.CC_Id,cost_center.CC_Description).order_by(cost_center.CC_Description).all()

    
    # Actual Form activation here
    if form.validate_on_submit():
        # Code for SAVE option -----------------------------------------
        if form.submit_Save.data and current_user.role_id > 1:
            
            row.Cus_Name = form.Cus_Name.data
            row.CC_Id = form.CC_Id.data
            try:
               session['new_row']=str(row)
               db.session.flush()
               db.session.add(row)
               db.session.commit()
               db.session.flush()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New Customer created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>Customer Cus_Id saved OK</b>')
                   flash(message)
               db.session.flush()
            except Exception as e:
               db.session.rollback()
               db.session.flush()
               message=Markup('ERROR saving Customer record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_Customers_query'))
        # --------------------------------------------------------------
        # Code for NEW option
        # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.flush()
            row=customer()
    
            return redirect(url_for('.forms_Customers',Cus_Id=row.Cus_Id))
    
        # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('Customer Record modifications discarded ...')
            flash(message)
        # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>Customer data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_Customers',Cus_Id=row.Cus_Id))
    
    
    form.Cus_Name.data = row.Cus_Name
    form.CC_Id.data = row.CC_Id
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_Customers(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = [{'name': 'configuration_items', 'class': 'configuration_item', 'backref': 'customer', 'caption': 'Configuration Items', 'table': 'Configuration_Items'}, {'name': 'rates', 'class': 'rate', 'backref': 'customer', 'caption': 'Rates', 'table': 'Rates'}]
    
    from flask_sqlalchemy import Pagination
    # [{'name': 'configuration_items', 'class': 'configuration_item', 'backref': 'customer', 'caption': 'Configuration Items', 'table': 'Configuration_Items'}, {'name': 'rates', 'class': 'rate', 'backref': 'customer', 'caption': 'Rates', 'table': 'Rates'}]
    try:
        if hasattr(row, 'configuration_items'):
            P.append(({'name': 'configuration_items', 'class': 'configuration_item', 'backref': 'customer', 'caption': 'Configuration Items', 'table': 'Configuration_Items'},row.configuration_items.paginate()))
    except Exception as e:
        print(f'Exception: {str(e)}')
    try:
        if hasattr(row, 'rates'):
            P.append(({'name': 'rates', 'class': 'rate', 'backref': 'customer', 'caption': 'Rates', 'table': 'Rates'},row.rates.paginate()))
    except Exception as e:
        print(f'Exception: {str(e)}')
    
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('customers.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:39.290975
# ======================================================================        
# gen_views_delete.html:AG 2021-12-13 19:33:39.290991
@main.route('/forms/Customers_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)
@admin_required
def forms_Customers_delete():
    """ Delete record handling function for table Customers """
    logger.debug('forms_Customers_delete(): Enter')
    Cus_Id  =  request.args.get('Cus_Id',0,type=int)
    row =  customer.query.filter(customer.Cus_Id == Cus_Id).first()

    if row is None:
        row=customer()
    session['data'] =  {  'Cus_Id':row.Cus_Id, 'Cus_Name':row.Cus_Name, 'CC_Id':row.CC_Id }
                       
    form = frm_customer_delete()

    # Tab['has_fks'] True
    
    pass # Tab['has_fks'] True
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.flush()
                db.session.delete(row)
                db.session.commit()
                db.session.flush()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('Customer Cus_Id deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_Customers_delete',Cus_Id=session['data']['Cus_Id']))    
    
            return redirect(url_for('.select_Customers_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_Customers_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_Customers_query'))    
    
    logger.debug('forms_Customers_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('customers_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: Customers
# class_name: customer
# is shardened: None
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:39.314735
# ======================================================================

# gen_views_select_query.html:AG 2021-12-13 19:33:39.314752        
@main.route('/select/Customers_Query', methods=['GET','POST'])
@login_required
@admin_required
def select_Customers_query():
    """ Select rows handling function for table 'Customers' """
    logger.debug('select_Customers_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Customers'
    class_name='customer'
    template_name='Customers'
    sharding=False


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)

    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='customer',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='customer',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='customer',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    foreign_keys.update({'CC_Id':(cost_center,'cost_center','CC_Id','CC_Description','Cost Center Id')})
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='customer'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    Cus_Id =  request.args.get('Cus_Id',None,type=str)
    Cus_Name =  request.args.get('Cus_Name',None,type=str)
    CC_Id =  request.args.get('CC_Id',None,type=str)
    
    # Build default query all fields from table
    

    if Cus_Id is not None and len(Cus_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Cus_Id:Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Cus_Id
                )
    
    
    if Cus_Name is not None and len(Cus_Name)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Cus_Name:Name',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Cus_Name
                )
    
    
    if CC_Id is not None and len(CC_Id)>0:
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys['CC_Id']
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)            
            set_query_option(   engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1=foreign_field,
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CC_Id
                )
                                
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['Cus_Id', 'Cus_Name', 'CC_Id']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['Cus_Id', 'Cus_Name', 'CC_Id'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'Cus_Id':
                if value is not None:
                    query = query.filter_by(Cus_Id=value)
            if field == 'Cus_Name':
                if value is not None:
                    query = query.filter_by(Cus_Name=value)
            if field == 'CC_Id':
                if value is not None:
                    query = query.filter_by(CC_Id=value)
            # ------------------------------------------------------------------
    # JOIN other tables and generate foreign fields
    # Will replace class name by sharding class in joins structure
    # will have no effect in no sharding environment
    query = query.join(cost_center,customer.CC_Id == cost_center.CC_Id).add_columns(cost_center.CC_Description)
    # ------------------------------------------------------------------
    
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:39.353863
# ======================================================================
# gen_views_api.html:AG 2021-12-13 19:33:39.353879
# table_name: Customers
# class_name: customer
# is shardened: None
# Table 'Customers' keys = Cus_Id
# Errors: None
# ID field found 'Cus_Id' auto_increment db.Integer
# Customers id field is 'Customers.Cus_Id' of type 'int:'

@main.route('/api/get/Customers'     , methods=['GET'])
@main.route('/api/get/Customers/<int:id>', methods=['GET'])
def api_get_Customers(id=None):
    code       = API_OK
    message    = 'OK'
    rows       = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        #response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        #response.headers['Pragma']        = 'no-cache'
        try:
            id_counter = 0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values=[id]
            # Codigo para un solo campo de id
            # chequear si marcado explicitamente
            db.session.flush()
            query = db.session.query(Customers)
            if id is not None:
                query = query.filter(Customers.Cus_Id == id_values[id_counter])
                rows = query.one_or_none()
            else:
                if request.args is not None and len(request.args):
                    if 'Cus_Id' in request.args:
                        query = query.filter(Customers.Cus_Id == request.args.get('Cus_Id'))
                    if 'Cus_Name' in request.args:
                        query = query.filter(Customers.Cus_Name == request.args.get('Cus_Name'))
                    if 'CC_Id' in request.args:
                        query = query.filter(Customers.CC_Id == request.args.get('CC_Id'))
                rows = query.all()
            if rows is not None:
                if type(rows) == list:
                    for i in range(len(rows)):
                        rows[i] = json.loads(rows[i].get_json())
                else:
                    rows = [json.loads(rows.get_json())]
            else:
                rows = []
            if len(rows) == 0:
                code = API_NO_DATA
                state = get_api_state(API_NO_DATA)
                
                if id is None:
                    message = f"No 'Customers' records found"
                else:
                    message = f"No 'Customers.Cus_Id' = {id} record found"
                
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Customers',entities=rows,name=current_app.config['NAME'])

@main.route('/api/post/Customers', methods=['POST'])
def api_post_Customers():
    code    = API_OK
    message = 'OK'
    row     = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            row = Customers()
            # Populates row from json, if ID=int:autoincrement then None
            row.Cus_Id = None
            row.Cus_Name = request.json.get('Cus_Name',None)
            row.CC_Id = request.json.get('CC_Id',None)
            # ----------------------------------------------------------
            db.session.add(row)
            db.session.flush()
            db.session.commit()
            db.session.flush()
            db.session.refresh(row)
            db.session.flush()
            message = f"Created 'Customers' Cus_Id = {row.Cus_Id}"
            row     = json.loads(row.get_json())
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
    else:
        code    = API_ERROR
        message = 'Unauthorized request'            
    return get_api_response(code=code,message=message,kind='Customers',entities=[row],name=current_app.config['NAME'])

@main.route('/api/put/Customers/<int:id>', methods=['PUT'])
def api_put_Customers(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Customers()
            query = db.session.query(Customers)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Customers.Cus_Id == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                if 'Cus_Name' in request.json.keys():
                    row.Cus_Name = request.json.get('Cus_Name')
                if 'CC_Id' in request.json.keys():
                    row.CC_Id = request.json.get('CC_Id')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Customers' Cus_Id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found Customers with Cus_Id = {id}"
                row     = None
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Customers',entities=[row],name=current_app.config['NAME'])

@main.route('/api/patch/Customers/<int:id>', methods=['PATCH'])
def api_patch_Customers(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Customers()
            query = db.session.query(Customers)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Customers.Cus_Id == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                db.session.rollback()
                if request.values is not None and len(request.values):
                    if 'Cus_Name' in request.values:
                        row.Cus_Name = request.values.get('Cus_Name')
                    if 'CC_Id' in request.values:
                        row.CC_Id = request.values.get('CC_Id')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Customers' Cus_Id = {id}"
                try:
                    row     = json.loads(row.get_json())
                except:
                    row     = None
            else:
                code    = API_NOT_FOUND
                message = f"Not found Customers with Cus_Id = {id}"
                row     = None
                db.session.rollback()
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
            db.session.rollback()
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Customers',entities=[row],name=current_app.config['NAME'])

@main.route('/api/delete/Customers/<int:id>', methods=['DELETE'])
def api_delete_Customers(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Customers()
            query = db.session.query(Customers)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Customers.Cus_Id == id)
            # --------------------------------------------------------------
            row = query.one_or_none()

            if row is not None:
                db.session.delete(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                message = f"Deleted 'Customers' Cus_Id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found 'Customers' with Cus_Id = {id}"
                row     = None        
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Customers',entities=[],name=current_app.config['NAME'])

# ======================================================================# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2021-12-13 19:33:35
# =============================================================================
# gen_views.py:32 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_cu_types.py
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:37.254847
# ======================================================================        
# gen_views_form.html:AG 2021-12-13 19:33:37.254864
@main.route('/forms/CU_Types', methods=['GET', 'POST'])
@login_required

def forms_CU_Types():
    """ Form handling function for table CU_Types """
    logger.debug('forms_CU_Types(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='CU_Types'
    class_name='cu_type'
    template_name='CU_Types'
    sharding=False
    Typ_Code  =  request.args.get('Typ_Code',0,type=int)
    
    # Ensures DB Data is commited prior main query
    try:
        db.session.commit()
    except:
        db.session.rollback()
    row =  cu_type.query.filter(cu_type.Typ_Code == Typ_Code).first()
    if row is None:
        row=cu_type()
        session['is_new_row']=True
    session['data'] =  {  'Typ_Code':row.Typ_Code, 'Typ_Description':row.Typ_Description }
    
    form = frm_cu_type()
    
    # Actual Form activation here
    if form.validate_on_submit():
        # Code for SAVE option -----------------------------------------
        if form.submit_Save.data and current_user.role_id > 1:
            row.Typ_Code = form.Typ_Code.data
            row.Typ_Description = form.Typ_Description.data
            try:
               session['new_row']=str(row)
               db.session.flush()
               db.session.add(row)
               db.session.commit()
               db.session.flush()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New Configuration Unit Type created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>Configuration Unit Type Typ_Code saved OK</b>')
                   flash(message)
               db.session.flush()
            except Exception as e:
               db.session.rollback()
               db.session.flush()
               message=Markup('ERROR saving Configuration Unit Type record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_CU_Types_query'))
        # --------------------------------------------------------------
        # Code for NEW option
        # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.flush()
            row=cu_type()
    
            return redirect(url_for('.forms_CU_Types'))    
    
        # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('Configuration Unit Type Record modifications discarded ...')
            flash(message)
        # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>Configuration Unit Type data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_'))    
    
    
    form.Typ_Code.data = row.Typ_Code
    form.Typ_Description.data = row.Typ_Description
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_CU_Types(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = [{'name': 'charge_units', 'class': 'charge_unit', 'backref': 'cu_type', 'caption': 'Charge Units', 'table': 'Charge_Units'}, {'name': 'rates', 'class': 'rate', 'backref': 'cu_type', 'caption': 'Rates', 'table': 'Rates'}]
    
    from flask_sqlalchemy import Pagination
    # [{'name': 'charge_units', 'class': 'charge_unit', 'backref': 'cu_type', 'caption': 'Charge Units', 'table': 'Charge_Units'}, {'name': 'rates', 'class': 'rate', 'backref': 'cu_type', 'caption': 'Rates', 'table': 'Rates'}]
    try:
        if hasattr(row, 'charge_units'):
            P.append(({'name': 'charge_units', 'class': 'charge_unit', 'backref': 'cu_type', 'caption': 'Charge Units', 'table': 'Charge_Units'},row.charge_units.paginate()))
    except Exception as e:
        print(f'Exception: {str(e)}')
    try:
        if hasattr(row, 'rates'):
            P.append(({'name': 'rates', 'class': 'rate', 'backref': 'cu_type', 'caption': 'Rates', 'table': 'Rates'},row.rates.paginate()))
    except Exception as e:
        print(f'Exception: {str(e)}')
    
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('cu_types.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:37.265019
# ======================================================================        
# gen_views_delete.html:AG 2021-12-13 19:33:37.265034
@main.route('/forms/CU_Types_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)
@admin_required
def forms_CU_Types_delete():
    """ Delete record handling function for table CU_Types """
    logger.debug('forms_CU_Types_delete(): Enter')
    Typ_Code  =  request.args.get('Typ_Code',0,type=int)
    row =  cu_type.query.filter(cu_type.Typ_Code == Typ_Code).first()

    if row is None:
        row=cu_type()
    session['data'] =  {  'Typ_Code':row.Typ_Code, 'Typ_Description':row.Typ_Description }
                       
    form = frm_cu_type_delete()

    # Tab['has_fks'] False
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.flush()
                db.session.delete(row)
                db.session.commit()
                db.session.flush()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('Configuration Unit Type Typ_Code deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_CU_Types_delete',Typ_Code=session['data']['Typ_Code']))    
    
            return redirect(url_for('.select_CU_Types_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_CU_Types_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_CU_Types_query'))    
    
    logger.debug('forms_CU_Types_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('cu_types_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: CU_Types
# class_name: cu_type
# is shardened: None
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:37.285259
# ======================================================================

# gen_views_select_query.html:AG 2021-12-13 19:33:37.285275        
@main.route('/select/CU_Types_Query', methods=['GET','POST'])
@login_required
@admin_required
def select_CU_Types_query():
    """ Select rows handling function for table 'CU_Types' """
    logger.debug('select_CU_Types_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='CU_Types'
    class_name='cu_type'
    template_name='CU_Types'
    sharding=False


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)

    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='cu_type',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='cu_type',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='cu_type',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='cu_type'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    Typ_Code =  request.args.get('Typ_Code',None,type=str)
    Typ_Description =  request.args.get('Typ_Description',None,type=str)
    
    # Build default query all fields from table
    

    if Typ_Code is not None and len(Typ_Code)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Typ_Code:Type',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Typ_Code
                )
    
    
    if Typ_Description is not None and len(Typ_Description)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Typ_Description:Description',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Typ_Description
                )
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['Typ_Code', 'Typ_Description']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['Typ_Code', 'Typ_Description'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'Typ_Code':
                if value is not None:
                    query = query.filter_by(Typ_Code=value)
            if field == 'Typ_Description':
                if value is not None:
                    query = query.filter_by(Typ_Description=value)
            
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:37.319679
# ======================================================================
# gen_views_api.html:AG 2021-12-13 19:33:37.319695
# table_name: CU_Types
# class_name: cu_type
# is shardened: None
# Table 'CU_Types' keys = Typ_Code
# Errors: None
# PK field found 'Typ_Code' db.String(10)
# CU_Types id field is 'CU_Types.Typ_Code' of type ''

@main.route('/api/get/CU_Types'     , methods=['GET'])
@main.route('/api/get/CU_Types/<id>', methods=['GET'])
def api_get_CU_Types(id=None):
    code       = API_OK
    message    = 'OK'
    rows       = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        #response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        #response.headers['Pragma']        = 'no-cache'
        try:
            id_counter = 0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values=[id]
            # Codigo para un solo campo de id
            # chequear si marcado explicitamente
            db.session.flush()
            query = db.session.query(CU_Types)
            if id is not None:
                query = query.filter(CU_Types.Typ_Code == id_values[id_counter])
                rows = query.one_or_none()
            else:
                if request.args is not None and len(request.args):
                    if 'Typ_Code' in request.args:
                        query = query.filter(CU_Types.Typ_Code == request.args.get('Typ_Code'))
                    if 'Typ_Description' in request.args:
                        query = query.filter(CU_Types.Typ_Description == request.args.get('Typ_Description'))
                rows = query.all()
            if rows is not None:
                if type(rows) == list:
                    for i in range(len(rows)):
                        rows[i] = json.loads(rows[i].get_json())
                else:
                    rows = [json.loads(rows.get_json())]
            else:
                rows = []
            if len(rows) == 0:
                code = API_NO_DATA
                state = get_api_state(API_NO_DATA)
                
                if id is None:
                    message = f"No 'CU_Types' records found"
                else:
                    message = f"No 'CU_Types.Typ_Code' = {id} record found"
                
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='CU_Types',entities=rows,name=current_app.config['NAME'])

@main.route('/api/post/CU_Types', methods=['POST'])
def api_post_CU_Types():
    code    = API_OK
    message = 'OK'
    row     = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            row = CU_Types()
            # Populates row from json, if ID=int:autoincrement then None
            row.Typ_Code = request.json.get('Typ_Code',None)
            row.Typ_Description = request.json.get('Typ_Description',None)
            # ----------------------------------------------------------
            db.session.add(row)
            db.session.flush()
            db.session.commit()
            db.session.flush()
            db.session.refresh(row)
            db.session.flush()
            message = f"Created 'CU_Types' Typ_Code = {row.Typ_Code}"
            row     = json.loads(row.get_json())
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
    else:
        code    = API_ERROR
        message = 'Unauthorized request'            
    return get_api_response(code=code,message=message,kind='CU_Types',entities=[row],name=current_app.config['NAME'])

@main.route('/api/put/CU_Types/<id>', methods=['PUT'])
def api_put_CU_Types(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = CU_Types()
            query = db.session.query(CU_Types)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(CU_Types.Typ_Code == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                if 'Typ_Description' in request.json.keys():
                    row.Typ_Description = request.json.get('Typ_Description')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'CU_Types' Typ_Code = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found CU_Types with Typ_Code = {id}"
                row     = None
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='CU_Types',entities=[row],name=current_app.config['NAME'])

@main.route('/api/patch/CU_Types/<id>', methods=['PATCH'])
def api_patch_CU_Types(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = CU_Types()
            query = db.session.query(CU_Types)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(CU_Types.Typ_Code == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                db.session.rollback()
                if request.values is not None and len(request.values):
                    if 'Typ_Description' in request.values:
                        row.Typ_Description = request.values.get('Typ_Description')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'CU_Types' Typ_Code = {id}"
                try:
                    row     = json.loads(row.get_json())
                except:
                    row     = None
            else:
                code    = API_NOT_FOUND
                message = f"Not found CU_Types with Typ_Code = {id}"
                row     = None
                db.session.rollback()
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
            db.session.rollback()
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='CU_Types',entities=[row],name=current_app.config['NAME'])

@main.route('/api/delete/CU_Types/<id>', methods=['DELETE'])
def api_delete_CU_Types(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = CU_Types()
            query = db.session.query(CU_Types)
            
            # First loop mandatory for row population ----------------------
            # detected primary key field: c.field
            query       = query.filter(CU_Types.Typ_Code == id_values[id_counter])
            id_counter +=1
            # --------------------------------------------------------------
            row = query.one_or_none()

            if row is not None:
                db.session.delete(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                message = f"Deleted 'CU_Types' Typ_Code = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found 'CU_Types' with Typ_Code = {id}"
                row     = None        
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='CU_Types',entities=[],name=current_app.config['NAME'])

# ======================================================================# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2021-12-13 19:33:35
# =============================================================================
# gen_views.py:32 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_exchange_rates.py
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:39.451929
# ======================================================================        
# gen_views_form.html:AG 2021-12-13 19:33:39.451943
@main.route('/forms/Exchange_Rates', methods=['GET', 'POST'])
@login_required

def forms_Exchange_Rates():
    """ Form handling function for table Exchange_Rates """
    logger.debug('forms_Exchange_Rates(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Exchange_Rates'
    class_name='exchange_rate'
    template_name='Exchange_Rates'
    sharding=False
    ER_Id  =  request.args.get('ER_Id',0,type=int)
    
    # Ensures DB Data is commited prior main query
    try:
        db.session.commit()
    except:
        db.session.rollback()
    row =  exchange_rate.query.filter(exchange_rate.ER_Id == ER_Id).first()
    if row is None:
        row=exchange_rate()
        session['is_new_row']=True
    session['data'] =  {  'ER_Id':row.ER_Id, 'Cur_Code':row.Cur_Code, 'ER_Factor':row.ER_Factor, 'ER_Date':row.ER_Date }
    
    form = frm_exchange_rate()
    
    if form.has_FKs:
        form.Cur_Code.choices = db.session.query(currency.Cur_Code,currency.Cur_Name).order_by(currency.Cur_Name).all()

    
    # Actual Form activation here
    if form.validate_on_submit():
        # Code for SAVE option -----------------------------------------
        if form.submit_Save.data and current_user.role_id > 1:
            
            row.Cur_Code = form.Cur_Code.data
            row.ER_Factor = form.ER_Factor.data
            row.ER_Date = form.ER_Date.data
            try:
               session['new_row']=str(row)
               db.session.flush()
               db.session.add(row)
               db.session.commit()
               db.session.flush()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New Exchange Rate created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>Exchange Rate ER_Id saved OK</b>')
                   flash(message)
               db.session.flush()
            except Exception as e:
               db.session.rollback()
               db.session.flush()
               message=Markup('ERROR saving Exchange Rate record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_Exchange_Rates_query'))
        # --------------------------------------------------------------
        # Code for NEW option
        # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.flush()
            row=exchange_rate()
    
            return redirect(url_for('.forms_Exchange_Rates',ER_Id=row.ER_Id))
    
        # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('Exchange Rate Record modifications discarded ...')
            flash(message)
        # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>Exchange Rate data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_Exchange_Rates',ER_Id=row.ER_Id))
    
    
    form.Cur_Code.data = row.Cur_Code
    form.ER_Factor.data = row.ER_Factor
    form.ER_Date.data = row.ER_Date
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_Exchange_Rates(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = []
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('exchange_rates.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:39.461725
# ======================================================================        
# gen_views_delete.html:AG 2021-12-13 19:33:39.461740
@main.route('/forms/Exchange_Rates_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)
@admin_required
def forms_Exchange_Rates_delete():
    """ Delete record handling function for table Exchange_Rates """
    logger.debug('forms_Exchange_Rates_delete(): Enter')
    ER_Id  =  request.args.get('ER_Id',0,type=int)
    row =  exchange_rate.query.filter(exchange_rate.ER_Id == ER_Id).first()

    if row is None:
        row=exchange_rate()
    session['data'] =  {  'ER_Id':row.ER_Id, 'Cur_Code':row.Cur_Code, 'ER_Factor':row.ER_Factor, 'ER_Date':row.ER_Date }
                       
    form = frm_exchange_rate_delete()

    # Tab['has_fks'] True
    
    pass # Tab['has_fks'] True
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.flush()
                db.session.delete(row)
                db.session.commit()
                db.session.flush()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('Exchange Rate ER_Id deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_Exchange_Rates_delete',ER_Id=session['data']['ER_Id']))    
    
            return redirect(url_for('.select_Exchange_Rates_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_Exchange_Rates_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_Exchange_Rates_query'))    
    
    logger.debug('forms_Exchange_Rates_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('exchange_rates_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: Exchange_Rates
# class_name: exchange_rate
# is shardened: None
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:39.478870
# ======================================================================

# gen_views_select_query.html:AG 2021-12-13 19:33:39.478884        
@main.route('/select/Exchange_Rates_Query', methods=['GET','POST'])
@login_required
@admin_required
def select_Exchange_Rates_query():
    """ Select rows handling function for table 'Exchange_Rates' """
    logger.debug('select_Exchange_Rates_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Exchange_Rates'
    class_name='exchange_rate'
    template_name='Exchange_Rates'
    sharding=False


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)

    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='exchange_rate',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='exchange_rate',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='exchange_rate',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    foreign_keys.update({'Cur_Code':(currency,'currency','Cur_Code','Cur_Name','Currency Code')})
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='exchange_rate'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    ER_Id =  request.args.get('ER_Id',None,type=str)
    Cur_Code =  request.args.get('Cur_Code',None,type=str)
    ER_Factor =  request.args.get('ER_Factor',None,type=str)
    ER_Date =  request.args.get('ER_Date',None,type=str)
    
    # Build default query all fields from table
    

    if ER_Id is not None and len(ER_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='ER_Id:Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%ER_Id
                )
    
    
    if Cur_Code is not None and len(Cur_Code)>0:
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys['Cur_Code']
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)            
            set_query_option(   engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1=foreign_field,
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Cur_Code
                )
                                
    
    
    if ER_Factor is not None and len(ER_Factor)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='ER_Factor:Factor',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%ER_Factor
                )
    
    
    if ER_Date is not None and len(ER_Date)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='ER_Date:Date',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%ER_Date
                )
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['ER_Id', 'Cur_Code', 'ER_Factor', 'ER_Date']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['ER_Id', 'Cur_Code', 'ER_Factor', 'ER_Date'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'ER_Id':
                if value is not None:
                    query = query.filter_by(ER_Id=value)
            if field == 'Cur_Code':
                if value is not None:
                    query = query.filter_by(Cur_Code=value)
            if field == 'ER_Factor':
                if value is not None:
                    query = query.filter_by(ER_Factor=value)
            if field == 'ER_Date':
                if value is not None:
                    query = query.filter_by(ER_Date=value)
            # ------------------------------------------------------------------
    # JOIN other tables and generate foreign fields
    # Will replace class name by sharding class in joins structure
    # will have no effect in no sharding environment
    query = query.join(currency,exchange_rate.Cur_Code == currency.Cur_Code).add_columns(currency.Cur_Name)
    # ------------------------------------------------------------------
    
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:39.516393
# ======================================================================
# gen_views_api.html:AG 2021-12-13 19:33:39.516417
# table_name: Exchange_Rates
# class_name: exchange_rate
# is shardened: None
# Table 'Exchange_Rates' keys = ER_Id
# Errors: None
# ID field found 'ER_Id' auto_increment db.Integer
# Exchange_Rates id field is 'Exchange_Rates.ER_Id' of type 'int:'

@main.route('/api/get/Exchange_Rates'     , methods=['GET'])
@main.route('/api/get/Exchange_Rates/<int:id>', methods=['GET'])
def api_get_Exchange_Rates(id=None):
    code       = API_OK
    message    = 'OK'
    rows       = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        #response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        #response.headers['Pragma']        = 'no-cache'
        try:
            id_counter = 0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values=[id]
            # Codigo para un solo campo de id
            # chequear si marcado explicitamente
            db.session.flush()
            query = db.session.query(Exchange_Rates)
            if id is not None:
                query = query.filter(Exchange_Rates.ER_Id == id_values[id_counter])
                rows = query.one_or_none()
            else:
                if request.args is not None and len(request.args):
                    if 'ER_Id' in request.args:
                        query = query.filter(Exchange_Rates.ER_Id == request.args.get('ER_Id'))
                    if 'Cur_Code' in request.args:
                        query = query.filter(Exchange_Rates.Cur_Code == request.args.get('Cur_Code'))
                    if 'ER_Factor' in request.args:
                        query = query.filter(Exchange_Rates.ER_Factor == request.args.get('ER_Factor'))
                    if 'ER_Date' in request.args:
                        query = query.filter(Exchange_Rates.ER_Date == request.args.get('ER_Date'))
                rows = query.all()
            if rows is not None:
                if type(rows) == list:
                    for i in range(len(rows)):
                        rows[i] = json.loads(rows[i].get_json())
                else:
                    rows = [json.loads(rows.get_json())]
            else:
                rows = []
            if len(rows) == 0:
                code = API_NO_DATA
                state = get_api_state(API_NO_DATA)
                
                if id is None:
                    message = f"No 'Exchange_Rates' records found"
                else:
                    message = f"No 'Exchange_Rates.ER_Id' = {id} record found"
                
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Exchange_Rates',entities=rows,name=current_app.config['NAME'])

@main.route('/api/post/Exchange_Rates', methods=['POST'])
def api_post_Exchange_Rates():
    code    = API_OK
    message = 'OK'
    row     = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            row = Exchange_Rates()
            # Populates row from json, if ID=int:autoincrement then None
            row.ER_Id = None
            row.Cur_Code = request.json.get('Cur_Code',None)
            row.ER_Factor = request.json.get('ER_Factor',None)
            row.ER_Date = request.json.get('ER_Date',None)
            # ----------------------------------------------------------
            db.session.add(row)
            db.session.flush()
            db.session.commit()
            db.session.flush()
            db.session.refresh(row)
            db.session.flush()
            message = f"Created 'Exchange_Rates' ER_Id = {row.ER_Id}"
            row     = json.loads(row.get_json())
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
    else:
        code    = API_ERROR
        message = 'Unauthorized request'            
    return get_api_response(code=code,message=message,kind='Exchange_Rates',entities=[row],name=current_app.config['NAME'])

@main.route('/api/put/Exchange_Rates/<int:id>', methods=['PUT'])
def api_put_Exchange_Rates(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Exchange_Rates()
            query = db.session.query(Exchange_Rates)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Exchange_Rates.ER_Id == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                if 'Cur_Code' in request.json.keys():
                    row.Cur_Code = request.json.get('Cur_Code')
                if 'ER_Factor' in request.json.keys():
                    row.ER_Factor = request.json.get('ER_Factor')
                if 'ER_Date' in request.json.keys():
                    row.ER_Date = request.json.get('ER_Date')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Exchange_Rates' ER_Id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found Exchange_Rates with ER_Id = {id}"
                row     = None
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Exchange_Rates',entities=[row],name=current_app.config['NAME'])

@main.route('/api/patch/Exchange_Rates/<int:id>', methods=['PATCH'])
def api_patch_Exchange_Rates(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Exchange_Rates()
            query = db.session.query(Exchange_Rates)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Exchange_Rates.ER_Id == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                db.session.rollback()
                if request.values is not None and len(request.values):
                    if 'Cur_Code' in request.values:
                        row.Cur_Code = request.values.get('Cur_Code')
                    if 'ER_Factor' in request.values:
                        row.ER_Factor = request.values.get('ER_Factor')
                    if 'ER_Date' in request.values:
                        row.ER_Date = request.values.get('ER_Date')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Exchange_Rates' ER_Id = {id}"
                try:
                    row     = json.loads(row.get_json())
                except:
                    row     = None
            else:
                code    = API_NOT_FOUND
                message = f"Not found Exchange_Rates with ER_Id = {id}"
                row     = None
                db.session.rollback()
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
            db.session.rollback()
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Exchange_Rates',entities=[row],name=current_app.config['NAME'])

@main.route('/api/delete/Exchange_Rates/<int:id>', methods=['DELETE'])
def api_delete_Exchange_Rates(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Exchange_Rates()
            query = db.session.query(Exchange_Rates)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Exchange_Rates.ER_Id == id)
            # --------------------------------------------------------------
            row = query.one_or_none()

            if row is not None:
                db.session.delete(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                message = f"Deleted 'Exchange_Rates' ER_Id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found 'Exchange_Rates' with ER_Id = {id}"
                row     = None        
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Exchange_Rates',entities=[],name=current_app.config['NAME'])

# ======================================================================# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2021-12-13 19:33:35
# =============================================================================
# gen_views.py:32 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_interface.py
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:39.624658
# ======================================================================        
# gen_views_form.html:AG 2021-12-13 19:33:39.624672
@main.route('/forms/Interface', methods=['GET', 'POST'])
@login_required

def forms_Interface():
    """ Form handling function for table Interface """
    logger.debug('forms_Interface(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Interface'
    class_name='interface'
    template_name='Interface'
    sharding=False
    Id  =  request.args.get('Id',0,type=int)
    
    # Ensures DB Data is commited prior main query
    try:
        db.session.commit()
    except:
        db.session.rollback()
    row =  interface.query.filter(interface.Id == Id).first()
    if row is None:
        row=interface()
        session['is_new_row']=True
    session['data'] =  {  'Id':row.Id, 'User_Id':row.User_Id, 'Table_name':row.Table_name, 'Option_Type':row.Option_Type, 'Argument_1':row.Argument_1, 'Argument_2':row.Argument_2, 'Argument_3':row.Argument_3, 'Is_Active':row.Is_Active }
    
    form = frm_interface()
    
    # Actual Form activation here
    if form.validate_on_submit():
        # Code for SAVE option -----------------------------------------
        if form.submit_Save.data and current_user.role_id > 1:
            
            row.User_Id = form.User_Id.data
            row.Table_name = form.Table_name.data
            row.Option_Type = form.Option_Type.data
            row.Argument_1 = form.Argument_1.data
            row.Argument_2 = form.Argument_2.data
            row.Argument_3 = form.Argument_3.data
            row.Is_Active = form.Is_Active.data
            try:
               session['new_row']=str(row)
               db.session.flush()
               db.session.add(row)
               db.session.commit()
               db.session.flush()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New Interface created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>Interface Id saved OK</b>')
                   flash(message)
               db.session.flush()
            except Exception as e:
               db.session.rollback()
               db.session.flush()
               message=Markup('ERROR saving Interface record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_Interface_query'))
        # --------------------------------------------------------------
        # Code for NEW option
        # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.flush()
            row=interface()
    
            return redirect(url_for('.forms_Interface',Id=row.Id))
    
        # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('Interface Record modifications discarded ...')
            flash(message)
        # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>Interface data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_Interface',Id=row.Id))
    
    
    form.User_Id.data = row.User_Id
    form.Table_name.data = row.Table_name
    form.Option_Type.data = row.Option_Type
    form.Argument_1.data = row.Argument_1
    form.Argument_2.data = row.Argument_2
    form.Argument_3.data = row.Argument_3
    form.Is_Active.data = row.Is_Active
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_Interface(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = []
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('interface.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:39.633522
# ======================================================================        
# gen_views_delete.html:AG 2021-12-13 19:33:39.633535
@main.route('/forms/Interface_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)
@admin_required
def forms_Interface_delete():
    """ Delete record handling function for table Interface """
    logger.debug('forms_Interface_delete(): Enter')
    Id  =  request.args.get('Id',0,type=int)
    row =  interface.query.filter(interface.Id == Id).first()

    if row is None:
        row=interface()
    session['data'] =  {  'Id':row.Id, 'User_Id':row.User_Id, 'Table_name':row.Table_name, 'Option_Type':row.Option_Type, 'Argument_1':row.Argument_1, 'Argument_2':row.Argument_2, 'Argument_3':row.Argument_3, 'Is_Active':row.Is_Active }
                       
    form = frm_interface_delete()

    # Tab['has_fks'] False
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.flush()
                db.session.delete(row)
                db.session.commit()
                db.session.flush()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('Interface Id deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_Interface_delete',Id=session['data']['Id']))    
    
            return redirect(url_for('.select_Interface_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_Interface_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_Interface_query'))    
    
    logger.debug('forms_Interface_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('interface_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: Interface
# class_name: interface
# is shardened: None
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:39.652627
# ======================================================================

# gen_views_select_query.html:AG 2021-12-13 19:33:39.652644        
@main.route('/select/Interface_Query', methods=['GET','POST'])
@login_required
@admin_required
def select_Interface_query():
    """ Select rows handling function for table 'Interface' """
    logger.debug('select_Interface_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Interface'
    class_name='interface'
    template_name='Interface'
    sharding=False


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)

    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='interface',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='interface',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='interface',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='interface'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    Id =  request.args.get('Id',None,type=str)
    User_Id =  request.args.get('User_Id',None,type=str)
    Table_name =  request.args.get('Table_name',None,type=str)
    Option_Type =  request.args.get('Option_Type',None,type=str)
    Argument_1 =  request.args.get('Argument_1',None,type=str)
    Argument_2 =  request.args.get('Argument_2',None,type=str)
    Argument_3 =  request.args.get('Argument_3',None,type=str)
    Is_Active =  request.args.get('Is_Active',None,type=str)
    
    # Build default query all fields from table
    

    if Id is not None and len(Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Id:Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Id
                )
    
    
    if User_Id is not None and len(User_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='User_Id:User_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%User_Id
                )
    
    
    if Table_name is not None and len(Table_name)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Table_name:Table_name',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Table_name
                )
    
    
    if Option_Type is not None and len(Option_Type)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Option_Type:Option_Type',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Option_Type
                )
    
    
    if Argument_1 is not None and len(Argument_1)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Argument_1:Argument_1',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Argument_1
                )
    
    
    if Argument_2 is not None and len(Argument_2)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Argument_2:Argument_2',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Argument_2
                )
    
    
    if Argument_3 is not None and len(Argument_3)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Argument_3:Argument_3',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Argument_3
                )
    
    
    if Is_Active is not None and len(Is_Active)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Is_Active:Is_Active',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Is_Active
                )
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['Id', 'User_Id', 'Table_name', 'Option_Type', 'Argument_1', 'Argument_2', 'Argument_3', 'Is_Active']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['Id', 'User_Id', 'Table_name', 'Option_Type', 'Argument_1', 'Argument_2', 'Argument_3', 'Is_Active'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'Id':
                if value is not None:
                    query = query.filter_by(Id=value)
            if field == 'User_Id':
                if value is not None:
                    query = query.filter_by(User_Id=value)
            if field == 'Table_name':
                if value is not None:
                    query = query.filter_by(Table_name=value)
            if field == 'Option_Type':
                if value is not None:
                    query = query.filter_by(Option_Type=value)
            if field == 'Argument_1':
                if value is not None:
                    query = query.filter_by(Argument_1=value)
            if field == 'Argument_2':
                if value is not None:
                    query = query.filter_by(Argument_2=value)
            if field == 'Argument_3':
                if value is not None:
                    query = query.filter_by(Argument_3=value)
            if field == 'Is_Active':
                if value is not None:
                    query = query.filter_by(Is_Active=value)
            
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:39.682784
# ======================================================================
# gen_views_api.html:AG 2021-12-13 19:33:39.682798
# table_name: Interface
# class_name: interface
# is shardened: None
# Table 'Interface' keys = Id
# Errors: None
# ID field found 'Id' auto_increment db.Integer
# Interface id field is 'Interface.Id' of type 'int:'

@main.route('/api/get/Interface'     , methods=['GET'])
@main.route('/api/get/Interface/<int:id>', methods=['GET'])
def api_get_Interface(id=None):
    code       = API_OK
    message    = 'OK'
    rows       = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        #response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        #response.headers['Pragma']        = 'no-cache'
        try:
            id_counter = 0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values=[id]
            # Codigo para un solo campo de id
            # chequear si marcado explicitamente
            db.session.flush()
            query = db.session.query(Interface)
            if id is not None:
                query = query.filter(Interface.Id == id_values[id_counter])
                rows = query.one_or_none()
            else:
                if request.args is not None and len(request.args):
                    if 'Id' in request.args:
                        query = query.filter(Interface.Id == request.args.get('Id'))
                    if 'User_Id' in request.args:
                        query = query.filter(Interface.User_Id == request.args.get('User_Id'))
                    if 'Table_name' in request.args:
                        query = query.filter(Interface.Table_name == request.args.get('Table_name'))
                    if 'Option_Type' in request.args:
                        query = query.filter(Interface.Option_Type == request.args.get('Option_Type'))
                    if 'Argument_1' in request.args:
                        query = query.filter(Interface.Argument_1 == request.args.get('Argument_1'))
                    if 'Argument_2' in request.args:
                        query = query.filter(Interface.Argument_2 == request.args.get('Argument_2'))
                    if 'Argument_3' in request.args:
                        query = query.filter(Interface.Argument_3 == request.args.get('Argument_3'))
                    if 'Is_Active' in request.args:
                        query = query.filter(Interface.Is_Active == request.args.get('Is_Active'))
                rows = query.all()
            if rows is not None:
                if type(rows) == list:
                    for i in range(len(rows)):
                        rows[i] = json.loads(rows[i].get_json())
                else:
                    rows = [json.loads(rows.get_json())]
            else:
                rows = []
            if len(rows) == 0:
                code = API_NO_DATA
                state = get_api_state(API_NO_DATA)
                
                if id is None:
                    message = f"No 'Interface' records found"
                else:
                    message = f"No 'Interface.Id' = {id} record found"
                
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Interface',entities=rows,name=current_app.config['NAME'])

@main.route('/api/post/Interface', methods=['POST'])
def api_post_Interface():
    code    = API_OK
    message = 'OK'
    row     = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            row = Interface()
            # Populates row from json, if ID=int:autoincrement then None
            row.Id = None
            row.User_Id = request.json.get('User_Id',None)
            row.Table_name = request.json.get('Table_name',None)
            row.Option_Type = request.json.get('Option_Type',None)
            row.Argument_1 = request.json.get('Argument_1',None)
            row.Argument_2 = request.json.get('Argument_2',None)
            row.Argument_3 = request.json.get('Argument_3',None)
            row.Is_Active = request.json.get('Is_Active',None)
            # ----------------------------------------------------------
            db.session.add(row)
            db.session.flush()
            db.session.commit()
            db.session.flush()
            db.session.refresh(row)
            db.session.flush()
            message = f"Created 'Interface' Id = {row.Id}"
            row     = json.loads(row.get_json())
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
    else:
        code    = API_ERROR
        message = 'Unauthorized request'            
    return get_api_response(code=code,message=message,kind='Interface',entities=[row],name=current_app.config['NAME'])

@main.route('/api/put/Interface/<int:id>', methods=['PUT'])
def api_put_Interface(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Interface()
            query = db.session.query(Interface)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Interface.Id == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                if 'User_Id' in request.json.keys():
                    row.User_Id = request.json.get('User_Id')
                if 'Table_name' in request.json.keys():
                    row.Table_name = request.json.get('Table_name')
                if 'Option_Type' in request.json.keys():
                    row.Option_Type = request.json.get('Option_Type')
                if 'Argument_1' in request.json.keys():
                    row.Argument_1 = request.json.get('Argument_1')
                if 'Argument_2' in request.json.keys():
                    row.Argument_2 = request.json.get('Argument_2')
                if 'Argument_3' in request.json.keys():
                    row.Argument_3 = request.json.get('Argument_3')
                if 'Is_Active' in request.json.keys():
                    row.Is_Active = request.json.get('Is_Active')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Interface' Id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found Interface with Id = {id}"
                row     = None
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Interface',entities=[row],name=current_app.config['NAME'])

@main.route('/api/patch/Interface/<int:id>', methods=['PATCH'])
def api_patch_Interface(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Interface()
            query = db.session.query(Interface)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Interface.Id == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                db.session.rollback()
                if request.values is not None and len(request.values):
                    if 'User_Id' in request.values:
                        row.User_Id = request.values.get('User_Id')
                    if 'Table_name' in request.values:
                        row.Table_name = request.values.get('Table_name')
                    if 'Option_Type' in request.values:
                        row.Option_Type = request.values.get('Option_Type')
                    if 'Argument_1' in request.values:
                        row.Argument_1 = request.values.get('Argument_1')
                    if 'Argument_2' in request.values:
                        row.Argument_2 = request.values.get('Argument_2')
                    if 'Argument_3' in request.values:
                        row.Argument_3 = request.values.get('Argument_3')
                    if 'Is_Active' in request.values:
                        row.Is_Active = request.values.get('Is_Active')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Interface' Id = {id}"
                try:
                    row     = json.loads(row.get_json())
                except:
                    row     = None
            else:
                code    = API_NOT_FOUND
                message = f"Not found Interface with Id = {id}"
                row     = None
                db.session.rollback()
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
            db.session.rollback()
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Interface',entities=[row],name=current_app.config['NAME'])

@main.route('/api/delete/Interface/<int:id>', methods=['DELETE'])
def api_delete_Interface(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Interface()
            query = db.session.query(Interface)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Interface.Id == id)
            # --------------------------------------------------------------
            row = query.one_or_none()

            if row is not None:
                db.session.delete(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                message = f"Deleted 'Interface' Id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found 'Interface' with Id = {id}"
                row     = None        
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Interface',entities=[],name=current_app.config['NAME'])

# ======================================================================# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2021-12-13 19:33:35
# =============================================================================
# gen_views.py:32 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_measure_units.py
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:39.793385
# ======================================================================        
# gen_views_form.html:AG 2021-12-13 19:33:39.793418
@main.route('/forms/Measure_Units', methods=['GET', 'POST'])
@login_required

def forms_Measure_Units():
    """ Form handling function for table Measure_Units """
    logger.debug('forms_Measure_Units(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Measure_Units'
    class_name='measure_unit'
    template_name='Measure_Units'
    sharding=False
    MU_Code  =  request.args.get('MU_Code',0,type=int)
    
    # Ensures DB Data is commited prior main query
    try:
        db.session.commit()
    except:
        db.session.rollback()
    row =  measure_unit.query.filter(measure_unit.MU_Code == MU_Code).first()
    if row is None:
        row=measure_unit()
        session['is_new_row']=True
    session['data'] =  {  'MU_Code':row.MU_Code, 'MU_Description':row.MU_Description }
    
    form = frm_measure_unit()
    
    # Actual Form activation here
    if form.validate_on_submit():
        # Code for SAVE option -----------------------------------------
        if form.submit_Save.data and current_user.role_id > 1:
            row.MU_Code = form.MU_Code.data
            row.MU_Description = form.MU_Description.data
            try:
               session['new_row']=str(row)
               db.session.flush()
               db.session.add(row)
               db.session.commit()
               db.session.flush()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New Measure Unit created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>Measure Unit MU_Code saved OK</b>')
                   flash(message)
               db.session.flush()
            except Exception as e:
               db.session.rollback()
               db.session.flush()
               message=Markup('ERROR saving Measure Unit record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_Measure_Units_query'))
        # --------------------------------------------------------------
        # Code for NEW option
        # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.flush()
            row=measure_unit()
    
            return redirect(url_for('.forms_Measure_Units'))    
    
        # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('Measure Unit Record modifications discarded ...')
            flash(message)
        # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>Measure Unit data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_'))    
    
    
    form.MU_Code.data = row.MU_Code
    form.MU_Description.data = row.MU_Description
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_Measure_Units(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = [{'name': 'rates', 'class': 'rate', 'backref': 'measure_unit', 'caption': 'Rates', 'table': 'Rates'}]
    
    from flask_sqlalchemy import Pagination
    # [{'name': 'rates', 'class': 'rate', 'backref': 'measure_unit', 'caption': 'Rates', 'table': 'Rates'}]
    try:
        if hasattr(row, 'rates'):
            P.append(({'name': 'rates', 'class': 'rate', 'backref': 'measure_unit', 'caption': 'Rates', 'table': 'Rates'},row.rates.paginate()))
    except Exception as e:
        print(f'Exception: {str(e)}')
    
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('measure_units.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:39.802900
# ======================================================================        
# gen_views_delete.html:AG 2021-12-13 19:33:39.802936
@main.route('/forms/Measure_Units_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)
@admin_required
def forms_Measure_Units_delete():
    """ Delete record handling function for table Measure_Units """
    logger.debug('forms_Measure_Units_delete(): Enter')
    MU_Code  =  request.args.get('MU_Code',0,type=int)
    row =  measure_unit.query.filter(measure_unit.MU_Code == MU_Code).first()

    if row is None:
        row=measure_unit()
    session['data'] =  {  'MU_Code':row.MU_Code, 'MU_Description':row.MU_Description }
                       
    form = frm_measure_unit_delete()

    # Tab['has_fks'] False
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.flush()
                db.session.delete(row)
                db.session.commit()
                db.session.flush()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('Measure Unit MU_Code deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_Measure_Units_delete',MU_Code=session['data']['MU_Code']))    
    
            return redirect(url_for('.select_Measure_Units_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_Measure_Units_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_Measure_Units_query'))    
    
    logger.debug('forms_Measure_Units_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('measure_units_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: Measure_Units
# class_name: measure_unit
# is shardened: None
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:39.821504
# ======================================================================

# gen_views_select_query.html:AG 2021-12-13 19:33:39.821518        
@main.route('/select/Measure_Units_Query', methods=['GET','POST'])
@login_required
@admin_required
def select_Measure_Units_query():
    """ Select rows handling function for table 'Measure_Units' """
    logger.debug('select_Measure_Units_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Measure_Units'
    class_name='measure_unit'
    template_name='Measure_Units'
    sharding=False


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)

    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='measure_unit',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='measure_unit',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='measure_unit',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='measure_unit'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    MU_Code =  request.args.get('MU_Code',None,type=str)
    MU_Description =  request.args.get('MU_Description',None,type=str)
    
    # Build default query all fields from table
    

    if MU_Code is not None and len(MU_Code)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='MU_Code:Code',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%MU_Code
                )
    
    
    if MU_Description is not None and len(MU_Description)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='MU_Description:Description',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%MU_Description
                )
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['MU_Code', 'MU_Description']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['MU_Code', 'MU_Description'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'MU_Code':
                if value is not None:
                    query = query.filter_by(MU_Code=value)
            if field == 'MU_Description':
                if value is not None:
                    query = query.filter_by(MU_Description=value)
            
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:39.856263
# ======================================================================
# gen_views_api.html:AG 2021-12-13 19:33:39.856278
# table_name: Measure_Units
# class_name: measure_unit
# is shardened: None
# Table 'Measure_Units' keys = MU_Code
# Errors: None
# PK field found 'MU_Code' db.String(3)
# Measure_Units id field is 'Measure_Units.MU_Code' of type ''

@main.route('/api/get/Measure_Units'     , methods=['GET'])
@main.route('/api/get/Measure_Units/<id>', methods=['GET'])
def api_get_Measure_Units(id=None):
    code       = API_OK
    message    = 'OK'
    rows       = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        #response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        #response.headers['Pragma']        = 'no-cache'
        try:
            id_counter = 0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values=[id]
            # Codigo para un solo campo de id
            # chequear si marcado explicitamente
            db.session.flush()
            query = db.session.query(Measure_Units)
            if id is not None:
                query = query.filter(Measure_Units.MU_Code == id_values[id_counter])
                rows = query.one_or_none()
            else:
                if request.args is not None and len(request.args):
                    if 'MU_Code' in request.args:
                        query = query.filter(Measure_Units.MU_Code == request.args.get('MU_Code'))
                    if 'MU_Description' in request.args:
                        query = query.filter(Measure_Units.MU_Description == request.args.get('MU_Description'))
                rows = query.all()
            if rows is not None:
                if type(rows) == list:
                    for i in range(len(rows)):
                        rows[i] = json.loads(rows[i].get_json())
                else:
                    rows = [json.loads(rows.get_json())]
            else:
                rows = []
            if len(rows) == 0:
                code = API_NO_DATA
                state = get_api_state(API_NO_DATA)
                
                if id is None:
                    message = f"No 'Measure_Units' records found"
                else:
                    message = f"No 'Measure_Units.MU_Code' = {id} record found"
                
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Measure_Units',entities=rows,name=current_app.config['NAME'])

@main.route('/api/post/Measure_Units', methods=['POST'])
def api_post_Measure_Units():
    code    = API_OK
    message = 'OK'
    row     = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            row = Measure_Units()
            # Populates row from json, if ID=int:autoincrement then None
            row.MU_Code = request.json.get('MU_Code',None)
            row.MU_Description = request.json.get('MU_Description',None)
            # ----------------------------------------------------------
            db.session.add(row)
            db.session.flush()
            db.session.commit()
            db.session.flush()
            db.session.refresh(row)
            db.session.flush()
            message = f"Created 'Measure_Units' MU_Code = {row.MU_Code}"
            row     = json.loads(row.get_json())
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
    else:
        code    = API_ERROR
        message = 'Unauthorized request'            
    return get_api_response(code=code,message=message,kind='Measure_Units',entities=[row],name=current_app.config['NAME'])

@main.route('/api/put/Measure_Units/<id>', methods=['PUT'])
def api_put_Measure_Units(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Measure_Units()
            query = db.session.query(Measure_Units)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Measure_Units.MU_Code == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                if 'MU_Description' in request.json.keys():
                    row.MU_Description = request.json.get('MU_Description')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Measure_Units' MU_Code = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found Measure_Units with MU_Code = {id}"
                row     = None
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Measure_Units',entities=[row],name=current_app.config['NAME'])

@main.route('/api/patch/Measure_Units/<id>', methods=['PATCH'])
def api_patch_Measure_Units(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Measure_Units()
            query = db.session.query(Measure_Units)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Measure_Units.MU_Code == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                db.session.rollback()
                if request.values is not None and len(request.values):
                    if 'MU_Description' in request.values:
                        row.MU_Description = request.values.get('MU_Description')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Measure_Units' MU_Code = {id}"
                try:
                    row     = json.loads(row.get_json())
                except:
                    row     = None
            else:
                code    = API_NOT_FOUND
                message = f"Not found Measure_Units with MU_Code = {id}"
                row     = None
                db.session.rollback()
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
            db.session.rollback()
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Measure_Units',entities=[row],name=current_app.config['NAME'])

@main.route('/api/delete/Measure_Units/<id>', methods=['DELETE'])
def api_delete_Measure_Units(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Measure_Units()
            query = db.session.query(Measure_Units)
            
            # First loop mandatory for row population ----------------------
            # detected primary key field: c.field
            query       = query.filter(Measure_Units.MU_Code == id_values[id_counter])
            id_counter +=1
            # --------------------------------------------------------------
            row = query.one_or_none()

            if row is not None:
                db.session.delete(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                message = f"Deleted 'Measure_Units' MU_Code = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found 'Measure_Units' with MU_Code = {id}"
                row     = None        
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Measure_Units',entities=[],name=current_app.config['NAME'])

# ======================================================================# NOTE: HARDCODE. TO REMOVE --------------------------------------------
def chk_c000001(*args,**kwargs):
    pass
    
from emtec.common.interface import *
from emtec.collector.db.orm_model          import Interface
from emtec.collector.db.flask_models       import interface
#-----------------------------------------------------------------------
# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2020-03-29 16:53:01
# =============================================================================

# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019)
#  GLVH @ 2020-03-29 16:53:11.357968
# ======================================================================
        
# gen_views_form.html:AG 2020-03-29 16:53:11.357991
@main.route('/forms/NEW_CIT', methods=['GET', 'POST'])
@login_required

def forms_NEW_CIT():
    """ Form handling function for table NEW_CIT """
    logger.debug('forms_NEW_CIT(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='NEW_CIT'
    class_name='new_cit'
    template_name='NEW_CIT'
    sharding=False

    if 'COLLECTOR_CIT_SHARDING' in current_app.config: 
        sharding=current_app.config['COLLECTOR_CIT_SHARDING']
    if sharding:
        new_cit.set_shard(suffix)
        flash("Using shardened table: %s"%new_cit.__table__.name) 

    
    row =  new_cit.query.filter().first()
    if row is None:
        row=new_cit()
        session['is_new_row']=True
    session['data'] =  {  'CU_Id':row.CU_Id, 'CIT_Date':row.CIT_Date, 'CIT_Time':row.CIT_Time, 'CIT_Quantity':row.CIT_Quantity, 'CIT_Status':row.CIT_Status, 'CIT_Is_Active':row.CIT_Is_Active, 'CIT_DateTime':row.CIT_DateTime }
    
    form = frm_new_cit()
    
    # Actual Form activation here
    if form.validate_on_submit():
    # Code for SAVE option
        if form.submit_Save.data and current_user.role_id > 1:
    
            row.CU_Id = form.CU_Id.data
            row.CIT_Date = form.CIT_Date.data
            row.CIT_Time = form.CIT_Time.data
            row.CIT_Quantity = form.CIT_Quantity.data
            row.CIT_Status = form.CIT_Status.data
            row.CIT_Is_Active = form.CIT_Is_Active.data
            row.CIT_DateTime = form.CIT_DateTime.data  
            try:
               session['new_row']=str(row)
               db.session.close()
               db.session.add(row)
               db.session.commit()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New New_cit created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>New_cit  saved OK</b>')
                   flash(message)
               db.session.close()
            except Exception as e:
               db.session.rollback()
               db.session.close()
               message=Markup('ERROR saving New_cit record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_NEW_CIT_query'))    
    # Code for NEW option
    # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.close()
            row=new_cit()
    
            return redirect(url_for('.forms_NEW_CIT'))    
    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('New_cit Record modifications discarded ...')
            flash(message)
    # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>New_cit data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_'))    
    
    
    form.CU_Id.data = row.CU_Id
    form.CIT_Date.data = row.CIT_Date
    form.CIT_Time.data = row.CIT_Time
    form.CIT_Quantity.data = row.CIT_Quantity
    form.CIT_Status.data = row.CIT_Status
    form.CIT_Is_Active.data = row.CIT_Is_Active
    form.CIT_DateTime.data = row.CIT_DateTime
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_NEW_CIT(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = []
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('new_cit.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019)
#  GLVH @ 2020-03-29 16:53:11.380408
# ======================================================================
        
# gen_views_delete.html:AG 2020-03-29 16:53:11.380430
@main.route('/forms/NEW_CIT_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)
@admin_required
def forms_NEW_CIT_delete():
    """ Delete record handling function for table NEW_CIT """
    logger.debug('forms_NEW_CIT_delete(): Enter')
    row =  new_cit.query.filter().first()

    if row is None:
        row=new_cit()
    session['data'] =  {  'CU_Id':row.CU_Id, 'CIT_Date':row.CIT_Date, 'CIT_Time':row.CIT_Time, 'CIT_Quantity':row.CIT_Quantity, 'CIT_Status':row.CIT_Status, 'CIT_Is_Active':row.CIT_Is_Active, 'CIT_DateTime':row.CIT_DateTime }
                       
    form = frm_new_cit_delete()

    # Tab['has_fks'] False
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.close()
                db.session.delete(row)
                db.session.commit()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('New_cit  deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_NEW_CIT_delete',))    
    
            return redirect(url_for('.select_NEW_CIT_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_NEW_CIT_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_NEW_CIT_query'))    
    
    logger.debug('forms_NEW_CIT_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('new_cit_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: NEW_CIT
# class_name: new_cit
# is shardened: True
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019)
#  GLVH @ 2020-03-29 16:53:11.426318
# ======================================================================


# gen_views_select_query.html:AG 2020-03-29 16:53:11.426341        
@main.route('/select/NEW_CIT_Query', methods=['GET','POST'])
@login_required
@admin_required
def select_NEW_CIT_query():
    """ Select rows handling function for table 'NEW_CIT' """
    logger.debug('select_NEW_CIT_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='NEW_CIT'
    class_name='new_cit'
    template_name='NEW_CIT'
    sharding=False

    if 'COLLECTOR_CIT_SHARDING' in current_app.config: 
        sharding=current_app.config['COLLECTOR_CIT_SHARDING']
    if sharding:
        new_cit.set_shard(suffix)
        flash("Using shardened table: %s"%new_cit.__table__.name) 


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)
    logger.debug("%s: COLLECTOR_CIT_SHARDING   = %s",__name__,current_app.config['COLLECTOR_CIT_SHARDING'])
    logger.debug("%s: sharding                 = %s",__name__,sharding)
    logger.debug("%s: suffix                   = %s",__name__,suffix)
    logger.debug("%s: table_name               = %s",__name__,table_name)
    logger.debug("%s: class_name               = %s",__name__,class_name)
    logger.debug("%s: class_name              = %s",__name__,class_name)
    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='new_cit',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='new_cit',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='new_cit',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='new_cit'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    CU_Id =  request.args.get('CU_Id',None,type=str)
    CIT_Date =  request.args.get('CIT_Date',None,type=str)
    CIT_Time =  request.args.get('CIT_Time',None,type=str)
    CIT_Quantity =  request.args.get('CIT_Quantity',None,type=str)
    CIT_Status =  request.args.get('CIT_Status',None,type=str)
    CIT_Is_Active =  request.args.get('CIT_Is_Active',None,type=str)
    CIT_DateTime =  request.args.get('CIT_DateTime',None,type=str)
    
    # Build default query all fields from table
    

    if CU_Id is not None and len(CU_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CU_Id:CU_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_Id
                )
    
    
    if CIT_Date is not None and len(CIT_Date)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CIT_Date:CIT_Date',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CIT_Date
                )
    
    
    if CIT_Time is not None and len(CIT_Time)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CIT_Time:CIT_Time',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CIT_Time
                )
    
    
    if CIT_Quantity is not None and len(CIT_Quantity)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CIT_Quantity:CIT_Quantity',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CIT_Quantity
                )
    
    
    if CIT_Status is not None and len(CIT_Status)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CIT_Status:CIT_Status',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CIT_Status
                )
    
    
    if CIT_Is_Active is not None and len(CIT_Is_Active)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CIT_Is_Active:CIT_Is_Active',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CIT_Is_Active
                )
    
    
    if CIT_DateTime is not None and len(CIT_DateTime)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CIT_DateTime:CIT_DateTime',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CIT_DateTime
                )
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['CU_Id', 'CIT_Date', 'CIT_Time', 'CIT_Quantity', 'CIT_Status', 'CIT_Is_Active', 'CIT_DateTime']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['CU_Id', 'CIT_Date', 'CIT_Time', 'CIT_Quantity', 'CIT_Status', 'CIT_Is_Active', 'CIT_DateTime'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'CU_Id':
                if value is not None:
                    query = query.filter_by(CU_Id=value)
            if field == 'CIT_Date':
                if value is not None:
                    query = query.filter_by(CIT_Date=value)
            if field == 'CIT_Time':
                if value is not None:
                    query = query.filter_by(CIT_Time=value)
            if field == 'CIT_Quantity':
                if value is not None:
                    query = query.filter_by(CIT_Quantity=value)
            if field == 'CIT_Status':
                if value is not None:
                    query = query.filter_by(CIT_Status=value)
            if field == 'CIT_Is_Active':
                if value is not None:
                    query = query.filter_by(CIT_Is_Active=value)
            if field == 'CIT_DateTime':
                if value is not None:
                    query = query.filter_by(CIT_DateTime=value)
            
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   # NOTE: HARDCODE. TO REMOVE --------------------------------------------
def chk_c000001(*args,**kwargs):
    pass
    
from emtec.common.interface import *
from emtec.collector.db.orm_model          import Interface
from emtec.collector.db.flask_models       import interface
#-----------------------------------------------------------------------
# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2020-03-29 16:53:01
# =============================================================================

# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019)
#  GLVH @ 2020-03-29 16:53:11.715772
# ======================================================================
        
# gen_views_form.html:AG 2020-03-29 16:53:11.715796
@main.route('/forms/NEW_CUS', methods=['GET', 'POST'])
@login_required

def forms_NEW_CUS():
    """ Form handling function for table NEW_CUS """
    logger.debug('forms_NEW_CUS(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='NEW_CUS'
    class_name='new_cus'
    template_name='NEW_CUS'
    sharding=False

    if 'COLLECTOR_CIT_SHARDING' in current_app.config: 
        sharding=current_app.config['COLLECTOR_CIT_SHARDING']
    if sharding:
        new_cus.set_shard(suffix)
        flash("Using shardened table: %s"%new_cus.__table__.name) 

    
    row =  new_cus.query.filter().first()
    if row is None:
        row=new_cus()
        session['is_new_row']=True
    session['data'] =  {  'CU_Id':row.CU_Id, 'CI_Id':row.CI_Id, 'CU_Description':row.CU_Description, 'CU_UUID':row.CU_UUID, 'CU_Is_Billeable':row.CU_Is_Billeable, 'CU_Is_AlwaysBilleable':row.CU_Is_AlwaysBilleable, 'CU_Quantity':row.CU_Quantity, 'CU_Operation':row.CU_Operation, 'Typ_Code':row.Typ_Code, 'CIT_Generation':row.CIT_Generation, 'Rat_Id':row.Rat_Id, 'CU_Reference_1':row.CU_Reference_1, 'CU_Reference_2':row.CU_Reference_2, 'CU_reference_3':row.CU_reference_3 }
    
    form = frm_new_cus()
    
    # Actual Form activation here
    if form.validate_on_submit():
    # Code for SAVE option
        if form.submit_Save.data and current_user.role_id > 1:
    
            row.CU_Id = form.CU_Id.data
            row.CI_Id = form.CI_Id.data
            row.CU_Description = form.CU_Description.data
            row.CU_UUID = form.CU_UUID.data
            row.CU_Is_Billeable = form.CU_Is_Billeable.data
            row.CU_Is_AlwaysBilleable = form.CU_Is_AlwaysBilleable.data
            row.CU_Quantity = form.CU_Quantity.data
            row.CU_Operation = form.CU_Operation.data
            row.Typ_Code = form.Typ_Code.data
            row.CIT_Generation = form.CIT_Generation.data
            row.Rat_Id = form.Rat_Id.data
            row.CU_Reference_1 = form.CU_Reference_1.data
            row.CU_Reference_2 = form.CU_Reference_2.data
            row.CU_reference_3 = form.CU_reference_3.data  
            try:
               session['new_row']=str(row)
               db.session.close()
               db.session.add(row)
               db.session.commit()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New New_cus created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>New_cus  saved OK</b>')
                   flash(message)
               db.session.close()
            except Exception as e:
               db.session.rollback()
               db.session.close()
               message=Markup('ERROR saving New_cus record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_NEW_CUS_query'))    
    # Code for NEW option
    # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.close()
            row=new_cus()
    
            return redirect(url_for('.forms_NEW_CUS'))    
    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('New_cus Record modifications discarded ...')
            flash(message)
    # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>New_cus data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_'))    
    
    
    form.CU_Id.data = row.CU_Id
    form.CI_Id.data = row.CI_Id
    form.CU_Description.data = row.CU_Description
    form.CU_UUID.data = row.CU_UUID
    form.CU_Is_Billeable.data = row.CU_Is_Billeable
    form.CU_Is_AlwaysBilleable.data = row.CU_Is_AlwaysBilleable
    form.CU_Quantity.data = row.CU_Quantity
    form.CU_Operation.data = row.CU_Operation
    form.Typ_Code.data = row.Typ_Code
    form.CIT_Generation.data = row.CIT_Generation
    form.Rat_Id.data = row.Rat_Id
    form.CU_Reference_1.data = row.CU_Reference_1
    form.CU_Reference_2.data = row.CU_Reference_2
    form.CU_reference_3.data = row.CU_reference_3
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_NEW_CUS(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = []
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('new_cus.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019)
#  GLVH @ 2020-03-29 16:53:11.739779
# ======================================================================
        
# gen_views_delete.html:AG 2020-03-29 16:53:11.739803
@main.route('/forms/NEW_CUS_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)
@admin_required
def forms_NEW_CUS_delete():
    """ Delete record handling function for table NEW_CUS """
    logger.debug('forms_NEW_CUS_delete(): Enter')
    row =  new_cus.query.filter().first()

    if row is None:
        row=new_cus()
    session['data'] =  {  'CU_Id':row.CU_Id, 'CI_Id':row.CI_Id, 'CU_Description':row.CU_Description, 'CU_UUID':row.CU_UUID, 'CU_Is_Billeable':row.CU_Is_Billeable, 'CU_Is_AlwaysBilleable':row.CU_Is_AlwaysBilleable, 'CU_Quantity':row.CU_Quantity, 'CU_Operation':row.CU_Operation, 'Typ_Code':row.Typ_Code, 'CIT_Generation':row.CIT_Generation, 'Rat_Id':row.Rat_Id, 'CU_Reference_1':row.CU_Reference_1, 'CU_Reference_2':row.CU_Reference_2, 'CU_reference_3':row.CU_reference_3 }
                       
    form = frm_new_cus_delete()

    # Tab['has_fks'] False
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.close()
                db.session.delete(row)
                db.session.commit()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('New_cus  deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_NEW_CUS_delete',))    
    
            return redirect(url_for('.select_NEW_CUS_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_NEW_CUS_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_NEW_CUS_query'))    
    
    logger.debug('forms_NEW_CUS_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('new_cus_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: NEW_CUS
# class_name: new_cus
# is shardened: True
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019)
#  GLVH @ 2020-03-29 16:53:11.791343
# ======================================================================


# gen_views_select_query.html:AG 2020-03-29 16:53:11.791369        
@main.route('/select/NEW_CUS_Query', methods=['GET','POST'])
@login_required
@admin_required
def select_NEW_CUS_query():
    """ Select rows handling function for table 'NEW_CUS' """
    logger.debug('select_NEW_CUS_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='NEW_CUS'
    class_name='new_cus'
    template_name='NEW_CUS'
    sharding=False

    if 'COLLECTOR_CIT_SHARDING' in current_app.config: 
        sharding=current_app.config['COLLECTOR_CIT_SHARDING']
    if sharding:
        new_cus.set_shard(suffix)
        flash("Using shardened table: %s"%new_cus.__table__.name) 


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)
    logger.debug("%s: COLLECTOR_CIT_SHARDING   = %s",__name__,current_app.config['COLLECTOR_CIT_SHARDING'])
    logger.debug("%s: sharding                 = %s",__name__,sharding)
    logger.debug("%s: suffix                   = %s",__name__,suffix)
    logger.debug("%s: table_name               = %s",__name__,table_name)
    logger.debug("%s: class_name               = %s",__name__,class_name)
    logger.debug("%s: class_name              = %s",__name__,class_name)
    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='new_cus',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='new_cus',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='new_cus',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='new_cus'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    CU_Id =  request.args.get('CU_Id',None,type=str)
    CI_Id =  request.args.get('CI_Id',None,type=str)
    CU_Description =  request.args.get('CU_Description',None,type=str)
    CU_UUID =  request.args.get('CU_UUID',None,type=str)
    CU_Is_Billeable =  request.args.get('CU_Is_Billeable',None,type=str)
    CU_Is_AlwaysBilleable =  request.args.get('CU_Is_AlwaysBilleable',None,type=str)
    CU_Quantity =  request.args.get('CU_Quantity',None,type=str)
    CU_Operation =  request.args.get('CU_Operation',None,type=str)
    Typ_Code =  request.args.get('Typ_Code',None,type=str)
    CIT_Generation =  request.args.get('CIT_Generation',None,type=str)
    Rat_Id =  request.args.get('Rat_Id',None,type=str)
    CU_Reference_1 =  request.args.get('CU_Reference_1',None,type=str)
    CU_Reference_2 =  request.args.get('CU_Reference_2',None,type=str)
    CU_reference_3 =  request.args.get('CU_reference_3',None,type=str)
    
    # Build default query all fields from table
    

    if CU_Id is not None and len(CU_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CU_Id:CU_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_Id
                )
    
    
    if CI_Id is not None and len(CI_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CI_Id:CI_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CI_Id
                )
    
    
    if CU_Description is not None and len(CU_Description)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CU_Description:CU_Description',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_Description
                )
    
    
    if CU_UUID is not None and len(CU_UUID)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CU_UUID:CU_UUID',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_UUID
                )
    
    
    if CU_Is_Billeable is not None and len(CU_Is_Billeable)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CU_Is_Billeable:CU_Is_Billeable',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_Is_Billeable
                )
    
    
    if CU_Is_AlwaysBilleable is not None and len(CU_Is_AlwaysBilleable)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CU_Is_AlwaysBilleable:CU_Is_AlwaysBilleable',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_Is_AlwaysBilleable
                )
    
    
    if CU_Quantity is not None and len(CU_Quantity)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CU_Quantity:CU_Quantity',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_Quantity
                )
    
    
    if CU_Operation is not None and len(CU_Operation)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CU_Operation:CU_Operation',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_Operation
                )
    
    
    if Typ_Code is not None and len(Typ_Code)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Typ_Code:Typ_Code',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Typ_Code
                )
    
    
    if CIT_Generation is not None and len(CIT_Generation)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CIT_Generation:CIT_Generation',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CIT_Generation
                )
    
    
    if Rat_Id is not None and len(Rat_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Rat_Id:Rat_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Rat_Id
                )
    
    
    if CU_Reference_1 is not None and len(CU_Reference_1)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CU_Reference_1:CU_Reference_1',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_Reference_1
                )
    
    
    if CU_Reference_2 is not None and len(CU_Reference_2)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CU_Reference_2:CU_Reference_2',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_Reference_2
                )
    
    
    if CU_reference_3 is not None and len(CU_reference_3)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CU_reference_3:CU_reference_3',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_reference_3
                )
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['CU_Id', 'CI_Id', 'CU_Description', 'CU_UUID', 'CU_Is_Billeable', 'CU_Is_AlwaysBilleable', 'CU_Quantity', 'CU_Operation', 'Typ_Code', 'CIT_Generation', 'Rat_Id', 'CU_Reference_1', 'CU_Reference_2', 'CU_reference_3']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['CU_Id', 'CI_Id', 'CU_Description', 'CU_UUID', 'CU_Is_Billeable', 'CU_Is_AlwaysBilleable', 'CU_Quantity', 'CU_Operation', 'Typ_Code', 'CIT_Generation', 'Rat_Id', 'CU_Reference_1', 'CU_Reference_2', 'CU_reference_3'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'CU_Id':
                if value is not None:
                    query = query.filter_by(CU_Id=value)
            if field == 'CI_Id':
                if value is not None:
                    query = query.filter_by(CI_Id=value)
            if field == 'CU_Description':
                if value is not None:
                    query = query.filter_by(CU_Description=value)
            if field == 'CU_UUID':
                if value is not None:
                    query = query.filter_by(CU_UUID=value)
            if field == 'CU_Is_Billeable':
                if value is not None:
                    query = query.filter_by(CU_Is_Billeable=value)
            if field == 'CU_Is_AlwaysBilleable':
                if value is not None:
                    query = query.filter_by(CU_Is_AlwaysBilleable=value)
            if field == 'CU_Quantity':
                if value is not None:
                    query = query.filter_by(CU_Quantity=value)
            if field == 'CU_Operation':
                if value is not None:
                    query = query.filter_by(CU_Operation=value)
            if field == 'Typ_Code':
                if value is not None:
                    query = query.filter_by(Typ_Code=value)
            if field == 'CIT_Generation':
                if value is not None:
                    query = query.filter_by(CIT_Generation=value)
            if field == 'Rat_Id':
                if value is not None:
                    query = query.filter_by(Rat_Id=value)
            if field == 'CU_Reference_1':
                if value is not None:
                    query = query.filter_by(CU_Reference_1=value)
            if field == 'CU_Reference_2':
                if value is not None:
                    query = query.filter_by(CU_Reference_2=value)
            if field == 'CU_reference_3':
                if value is not None:
                    query = query.filter_by(CU_reference_3=value)
            
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   # =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2021-12-13 19:33:35
# =============================================================================
# gen_views.py:32 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_platforms.py
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:39.956998
# ======================================================================        
# gen_views_form.html:AG 2021-12-13 19:33:39.957014
@main.route('/forms/Platforms', methods=['GET', 'POST'])
@login_required

def forms_Platforms():
    """ Form handling function for table Platforms """
    logger.debug('forms_Platforms(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Platforms'
    class_name='platform'
    template_name='Platforms'
    sharding=False
    Pla_Id  =  request.args.get('Pla_Id',0,type=int)
    
    # Ensures DB Data is commited prior main query
    try:
        db.session.commit()
    except:
        db.session.rollback()
    row =  platform.query.filter(platform.Pla_Id == Pla_Id).first()
    if row is None:
        row=platform()
        session['is_new_row']=True
    session['data'] =  {  'Pla_Id':row.Pla_Id, 'Pla_Name':row.Pla_Name, 'Pla_Host':row.Pla_Host, 'Pla_Port':row.Pla_Port, 'Pla_User':row.Pla_User, 'Pla_Password':row.Pla_Password }
    
    form = frm_platform()
    
    # Actual Form activation here
    if form.validate_on_submit():
        # Code for SAVE option -----------------------------------------
        if form.submit_Save.data and current_user.role_id > 1:
            
            row.Pla_Name = form.Pla_Name.data
            row.Pla_Host = form.Pla_Host.data
            row.Pla_Port = form.Pla_Port.data
            row.Pla_User = form.Pla_User.data
            row.Pla_Password = form.Pla_Password.data
            try:
               session['new_row']=str(row)
               db.session.flush()
               db.session.add(row)
               db.session.commit()
               db.session.flush()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New Platform created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>Platform Pla_Id saved OK</b>')
                   flash(message)
               db.session.flush()
            except Exception as e:
               db.session.rollback()
               db.session.flush()
               message=Markup('ERROR saving Platform record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_Platforms_query'))
        # --------------------------------------------------------------
        # Code for NEW option
        # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.flush()
            row=platform()
    
            return redirect(url_for('.forms_Platforms',Pla_Id=row.Pla_Id))
    
        # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('Platform Record modifications discarded ...')
            flash(message)
        # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>Platform data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_Platforms',Pla_Id=row.Pla_Id))
    
    
    form.Pla_Name.data = row.Pla_Name
    form.Pla_Host.data = row.Pla_Host
    form.Pla_Port.data = row.Pla_Port
    form.Pla_User.data = row.Pla_User
    form.Pla_Password.data = row.Pla_Password
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_Platforms(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = [{'name': 'configuration_items', 'class': 'configuration_item', 'backref': 'platform', 'caption': 'Configuration Items', 'table': 'Configuration_Items'}, {'name': 'rates', 'class': 'rate', 'backref': 'platform', 'caption': 'Rates', 'table': 'Rates'}]
    
    from flask_sqlalchemy import Pagination
    # [{'name': 'configuration_items', 'class': 'configuration_item', 'backref': 'platform', 'caption': 'Configuration Items', 'table': 'Configuration_Items'}, {'name': 'rates', 'class': 'rate', 'backref': 'platform', 'caption': 'Rates', 'table': 'Rates'}]
    try:
        if hasattr(row, 'configuration_items'):
            P.append(({'name': 'configuration_items', 'class': 'configuration_item', 'backref': 'platform', 'caption': 'Configuration Items', 'table': 'Configuration_Items'},row.configuration_items.paginate()))
    except Exception as e:
        print(f'Exception: {str(e)}')
    try:
        if hasattr(row, 'rates'):
            P.append(({'name': 'rates', 'class': 'rate', 'backref': 'platform', 'caption': 'Rates', 'table': 'Rates'},row.rates.paginate()))
    except Exception as e:
        print(f'Exception: {str(e)}')
    
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('platforms.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:39.966607
# ======================================================================        
# gen_views_delete.html:AG 2021-12-13 19:33:39.966621
@main.route('/forms/Platforms_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)
@admin_required
def forms_Platforms_delete():
    """ Delete record handling function for table Platforms """
    logger.debug('forms_Platforms_delete(): Enter')
    Pla_Id  =  request.args.get('Pla_Id',0,type=int)
    row =  platform.query.filter(platform.Pla_Id == Pla_Id).first()

    if row is None:
        row=platform()
    session['data'] =  {  'Pla_Id':row.Pla_Id, 'Pla_Name':row.Pla_Name, 'Pla_Host':row.Pla_Host, 'Pla_Port':row.Pla_Port, 'Pla_User':row.Pla_User, 'Pla_Password':row.Pla_Password }
                       
    form = frm_platform_delete()

    # Tab['has_fks'] False
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.flush()
                db.session.delete(row)
                db.session.commit()
                db.session.flush()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('Platform Pla_Id deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_Platforms_delete',Pla_Id=session['data']['Pla_Id']))    
    
            return redirect(url_for('.select_Platforms_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_Platforms_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_Platforms_query'))    
    
    logger.debug('forms_Platforms_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('platforms_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: Platforms
# class_name: platform
# is shardened: None
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:39.985174
# ======================================================================

# gen_views_select_query.html:AG 2021-12-13 19:33:39.985188        
@main.route('/select/Platforms_Query', methods=['GET','POST'])
@login_required
@admin_required
def select_Platforms_query():
    """ Select rows handling function for table 'Platforms' """
    logger.debug('select_Platforms_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Platforms'
    class_name='platform'
    template_name='Platforms'
    sharding=False


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)

    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='platform',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='platform',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='platform',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='platform'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    Pla_Id =  request.args.get('Pla_Id',None,type=str)
    Pla_Name =  request.args.get('Pla_Name',None,type=str)
    Pla_Host =  request.args.get('Pla_Host',None,type=str)
    Pla_Port =  request.args.get('Pla_Port',None,type=str)
    Pla_User =  request.args.get('Pla_User',None,type=str)
    Pla_Password =  request.args.get('Pla_Password',None,type=str)
    
    # Build default query all fields from table
    

    if Pla_Id is not None and len(Pla_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Pla_Id:Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Pla_Id
                )
    
    
    if Pla_Name is not None and len(Pla_Name)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Pla_Name:Name',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Pla_Name
                )
    
    
    if Pla_Host is not None and len(Pla_Host)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Pla_Host:Host',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Pla_Host
                )
    
    
    if Pla_Port is not None and len(Pla_Port)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Pla_Port:Port',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Pla_Port
                )
    
    
    if Pla_User is not None and len(Pla_User)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Pla_User:User',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Pla_User
                )
    
    
    if Pla_Password is not None and len(Pla_Password)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Pla_Password:Password',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Pla_Password
                )
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['Pla_Id', 'Pla_Name', 'Pla_Host', 'Pla_Port', 'Pla_User', 'Pla_Password']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['Pla_Id', 'Pla_Name', 'Pla_Host', 'Pla_Port', 'Pla_User', 'Pla_Password'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'Pla_Id':
                if value is not None:
                    query = query.filter_by(Pla_Id=value)
            if field == 'Pla_Name':
                if value is not None:
                    query = query.filter_by(Pla_Name=value)
            if field == 'Pla_Host':
                if value is not None:
                    query = query.filter_by(Pla_Host=value)
            if field == 'Pla_Port':
                if value is not None:
                    query = query.filter_by(Pla_Port=value)
            if field == 'Pla_User':
                if value is not None:
                    query = query.filter_by(Pla_User=value)
            if field == 'Pla_Password':
                if value is not None:
                    query = query.filter_by(Pla_Password=value)
            
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:40.022008
# ======================================================================
# gen_views_api.html:AG 2021-12-13 19:33:40.022025
# table_name: Platforms
# class_name: platform
# is shardened: None
# Table 'Platforms' keys = Pla_Id
# Errors: None
# ID field found 'Pla_Id' auto_increment db.Integer
# Platforms id field is 'Platforms.Pla_Id' of type 'int:'

@main.route('/api/get/Platforms'     , methods=['GET'])
@main.route('/api/get/Platforms/<int:id>', methods=['GET'])
def api_get_Platforms(id=None):
    code       = API_OK
    message    = 'OK'
    rows       = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        #response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        #response.headers['Pragma']        = 'no-cache'
        try:
            id_counter = 0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values=[id]
            # Codigo para un solo campo de id
            # chequear si marcado explicitamente
            db.session.flush()
            query = db.session.query(Platforms)
            if id is not None:
                query = query.filter(Platforms.Pla_Id == id_values[id_counter])
                rows = query.one_or_none()
            else:
                if request.args is not None and len(request.args):
                    if 'Pla_Id' in request.args:
                        query = query.filter(Platforms.Pla_Id == request.args.get('Pla_Id'))
                    if 'Pla_Name' in request.args:
                        query = query.filter(Platforms.Pla_Name == request.args.get('Pla_Name'))
                    if 'Pla_Host' in request.args:
                        query = query.filter(Platforms.Pla_Host == request.args.get('Pla_Host'))
                    if 'Pla_Port' in request.args:
                        query = query.filter(Platforms.Pla_Port == request.args.get('Pla_Port'))
                    if 'Pla_User' in request.args:
                        query = query.filter(Platforms.Pla_User == request.args.get('Pla_User'))
                    if 'Pla_Password' in request.args:
                        query = query.filter(Platforms.Pla_Password == request.args.get('Pla_Password'))
                rows = query.all()
            if rows is not None:
                if type(rows) == list:
                    for i in range(len(rows)):
                        rows[i] = json.loads(rows[i].get_json())
                else:
                    rows = [json.loads(rows.get_json())]
            else:
                rows = []
            if len(rows) == 0:
                code = API_NO_DATA
                state = get_api_state(API_NO_DATA)
                
                if id is None:
                    message = f"No 'Platforms' records found"
                else:
                    message = f"No 'Platforms.Pla_Id' = {id} record found"
                
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Platforms',entities=rows,name=current_app.config['NAME'])

@main.route('/api/post/Platforms', methods=['POST'])
def api_post_Platforms():
    code    = API_OK
    message = 'OK'
    row     = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            row = Platforms()
            # Populates row from json, if ID=int:autoincrement then None
            row.Pla_Id = None
            row.Pla_Name = request.json.get('Pla_Name',None)
            row.Pla_Host = request.json.get('Pla_Host',None)
            row.Pla_Port = request.json.get('Pla_Port',None)
            row.Pla_User = request.json.get('Pla_User',None)
            row.Pla_Password = request.json.get('Pla_Password',None)
            # ----------------------------------------------------------
            db.session.add(row)
            db.session.flush()
            db.session.commit()
            db.session.flush()
            db.session.refresh(row)
            db.session.flush()
            message = f"Created 'Platforms' Pla_Id = {row.Pla_Id}"
            row     = json.loads(row.get_json())
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
    else:
        code    = API_ERROR
        message = 'Unauthorized request'            
    return get_api_response(code=code,message=message,kind='Platforms',entities=[row],name=current_app.config['NAME'])

@main.route('/api/put/Platforms/<int:id>', methods=['PUT'])
def api_put_Platforms(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Platforms()
            query = db.session.query(Platforms)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Platforms.Pla_Id == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                if 'Pla_Name' in request.json.keys():
                    row.Pla_Name = request.json.get('Pla_Name')
                if 'Pla_Host' in request.json.keys():
                    row.Pla_Host = request.json.get('Pla_Host')
                if 'Pla_Port' in request.json.keys():
                    row.Pla_Port = request.json.get('Pla_Port')
                if 'Pla_User' in request.json.keys():
                    row.Pla_User = request.json.get('Pla_User')
                if 'Pla_Password' in request.json.keys():
                    row.Pla_Password = request.json.get('Pla_Password')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Platforms' Pla_Id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found Platforms with Pla_Id = {id}"
                row     = None
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Platforms',entities=[row],name=current_app.config['NAME'])

@main.route('/api/patch/Platforms/<int:id>', methods=['PATCH'])
def api_patch_Platforms(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Platforms()
            query = db.session.query(Platforms)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Platforms.Pla_Id == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                db.session.rollback()
                if request.values is not None and len(request.values):
                    if 'Pla_Name' in request.values:
                        row.Pla_Name = request.values.get('Pla_Name')
                    if 'Pla_Host' in request.values:
                        row.Pla_Host = request.values.get('Pla_Host')
                    if 'Pla_Port' in request.values:
                        row.Pla_Port = request.values.get('Pla_Port')
                    if 'Pla_User' in request.values:
                        row.Pla_User = request.values.get('Pla_User')
                    if 'Pla_Password' in request.values:
                        row.Pla_Password = request.values.get('Pla_Password')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Platforms' Pla_Id = {id}"
                try:
                    row     = json.loads(row.get_json())
                except:
                    row     = None
            else:
                code    = API_NOT_FOUND
                message = f"Not found Platforms with Pla_Id = {id}"
                row     = None
                db.session.rollback()
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
            db.session.rollback()
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Platforms',entities=[row],name=current_app.config['NAME'])

@main.route('/api/delete/Platforms/<int:id>', methods=['DELETE'])
def api_delete_Platforms(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Platforms()
            query = db.session.query(Platforms)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Platforms.Pla_Id == id)
            # --------------------------------------------------------------
            row = query.one_or_none()

            if row is not None:
                db.session.delete(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                message = f"Deleted 'Platforms' Pla_Id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found 'Platforms' with Pla_Id = {id}"
                row     = None        
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Platforms',entities=[],name=current_app.config['NAME'])

# ======================================================================# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2021-12-13 19:33:35
# =============================================================================
# gen_views.py:32 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_rates.py
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:40.317714
# ======================================================================        
# gen_views_form.html:AG 2021-12-13 19:33:40.317736
@main.route('/forms/Rates', methods=['GET', 'POST'])
@login_required

def forms_Rates():
    """ Form handling function for table Rates """
    logger.debug('forms_Rates(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Rates'
    class_name='rate'
    template_name='Rates'
    sharding=False
    Rat_Id  =  request.args.get('Rat_Id',0,type=int)
    
    # Ensures DB Data is commited prior main query
    try:
        db.session.commit()
    except:
        db.session.rollback()
    row =  rate.query.filter(rate.Rat_Id == Rat_Id).first()
    if row is None:
        row=rate()
        session['is_new_row']=True
    session['data'] =  {  'Rat_Id':row.Rat_Id, 'Typ_Code':row.Typ_Code, 'Cus_Id':row.Cus_Id, 'Pla_Id':row.Pla_Id, 'CC_Id':row.CC_Id, 'CI_Id':row.CI_Id, 'Rat_Price':row.Rat_Price, 'Cur_Code':row.Cur_Code, 'MU_Code':row.MU_Code, 'Rat_Period':row.Rat_Period, 'Rat_Type':row.Rat_Type }
    
    form = frm_rate()
    
    if form.has_FKs:
        form.Typ_Code.choices = db.session.query(cu_type.Typ_Code,cu_type.Typ_Description).order_by(cu_type.Typ_Description).all()
        form.Cus_Id.choices = db.session.query(customer.Cus_Id,customer.Cus_Name).order_by(customer.Cus_Name).all()
        form.Pla_Id.choices = db.session.query(platform.Pla_Id,platform.Pla_Name).order_by(platform.Pla_Name).all()
        form.CC_Id.choices = db.session.query(cost_center.CC_Id,cost_center.CC_Description).order_by(cost_center.CC_Description).all()
        form.CI_Id.choices = db.session.query(configuration_item.CI_Id,configuration_item.CI_Name).order_by(configuration_item.CI_Name).all()
        form.Cur_Code.choices = db.session.query(currency.Cur_Code,currency.Cur_Name).order_by(currency.Cur_Name).all()
        form.MU_Code.choices = db.session.query(measure_unit.MU_Code,measure_unit.MU_Description).order_by(measure_unit.MU_Description).all()
        form.Rat_Period.choices = db.session.query(rat_period.Rat_Period,rat_period.Value).order_by(rat_period.Value).all()

    
    # Actual Form activation here
    if form.validate_on_submit():
        # Code for SAVE option -----------------------------------------
        if form.submit_Save.data and current_user.role_id > 1:
            
            row.Typ_Code = form.Typ_Code.data
            row.Cus_Id = form.Cus_Id.data
            row.Pla_Id = form.Pla_Id.data
            row.CC_Id = form.CC_Id.data
            row.CI_Id = form.CI_Id.data
            row.Rat_Price = form.Rat_Price.data
            row.Cur_Code = form.Cur_Code.data
            row.MU_Code = form.MU_Code.data
            row.Rat_Period = form.Rat_Period.data
            
            try:
               session['new_row']=str(row)
               db.session.flush()
               db.session.add(row)
               db.session.commit()
               db.session.flush()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New Rate created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>Rate Rat_Id saved OK</b>')
                   flash(message)
               db.session.flush()
            except Exception as e:
               db.session.rollback()
               db.session.flush()
               message=Markup('ERROR saving Rate record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_Rates_query'))
        # --------------------------------------------------------------
        # Code for NEW option
        # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.flush()
            row=rate()
    
            return redirect(url_for('.forms_Rates',Rat_Id=row.Rat_Id))
    
        # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('Rate Record modifications discarded ...')
            flash(message)
        # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>Rate data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_Rates',Rat_Id=row.Rat_Id))
    
    
    form.Typ_Code.data = row.Typ_Code
    form.Cus_Id.data = row.Cus_Id
    form.Pla_Id.data = row.Pla_Id
    form.CC_Id.data = row.CC_Id
    form.CI_Id.data = row.CI_Id
    form.Rat_Price.data = row.Rat_Price
    form.Cur_Code.data = row.Cur_Code
    form.MU_Code.data = row.MU_Code
    form.Rat_Period.data = row.Rat_Period
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_Rates(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = []
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('rates.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:40.334560
# ======================================================================        
# gen_views_delete.html:AG 2021-12-13 19:33:40.334575
@main.route('/forms/Rates_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)
@admin_required
def forms_Rates_delete():
    """ Delete record handling function for table Rates """
    logger.debug('forms_Rates_delete(): Enter')
    Rat_Id  =  request.args.get('Rat_Id',0,type=int)
    row =  rate.query.filter(rate.Rat_Id == Rat_Id).first()

    if row is None:
        row=rate()
    session['data'] =  {  'Rat_Id':row.Rat_Id, 'Typ_Code':row.Typ_Code, 'Cus_Id':row.Cus_Id, 'Pla_Id':row.Pla_Id, 'CC_Id':row.CC_Id, 'CI_Id':row.CI_Id, 'Rat_Price':row.Rat_Price, 'Cur_Code':row.Cur_Code, 'MU_Code':row.MU_Code, 'Rat_Period':row.Rat_Period, 'Rat_Type':row.Rat_Type }
                       
    form = frm_rate_delete()

    # Tab['has_fks'] True
    
    pass # Tab['has_fks'] True
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.flush()
                db.session.delete(row)
                db.session.commit()
                db.session.flush()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('Rate Rat_Id deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_Rates_delete',Rat_Id=session['data']['Rat_Id']))    
    
            return redirect(url_for('.select_Rates_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_Rates_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_Rates_query'))    
    
    logger.debug('forms_Rates_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('rates_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: Rates
# class_name: rate
# is shardened: None
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:40.364087
# ======================================================================

# gen_views_select_query.html:AG 2021-12-13 19:33:40.364107        
@main.route('/select/Rates_Query', methods=['GET','POST'])
@login_required
@admin_required
def select_Rates_query():
    """ Select rows handling function for table 'Rates' """
    logger.debug('select_Rates_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Rates'
    class_name='rate'
    template_name='Rates'
    sharding=False


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)

    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='rate',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='rate',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='rate',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    foreign_keys.update({'Typ_Code':(cu_type,'cu_type','Typ_Code','Typ_Description','Charge Unit Type')})
    foreign_keys.update({'Cus_Id':(customer,'customer','Cus_Id','Cus_Name','Customer Id')})
    foreign_keys.update({'Pla_Id':(platform,'platform','Pla_Id','Pla_Name','Platform Id')})
    foreign_keys.update({'CC_Id':(cost_center,'cost_center','CC_Id','CC_Description','Cost Center Id')})
    foreign_keys.update({'CI_Id':(configuration_item,'configuration_item','CI_Id','CI_Name','Configuration Item')})
    foreign_keys.update({'Cur_Code':(currency,'currency','Cur_Code','Cur_Name','Currency Code')})
    foreign_keys.update({'MU_Code':(measure_unit,'measure_unit','MU_Code','MU_Description','Measure Unit')})
    foreign_keys.update({'Rat_Period':(rat_period,'rat_period','Rat_Period','Value','Period')})
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='rate'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    Rat_Id =  request.args.get('Rat_Id',None,type=str)
    Typ_Code =  request.args.get('Typ_Code',None,type=str)
    Cus_Id =  request.args.get('Cus_Id',None,type=str)
    Pla_Id =  request.args.get('Pla_Id',None,type=str)
    CC_Id =  request.args.get('CC_Id',None,type=str)
    CI_Id =  request.args.get('CI_Id',None,type=str)
    Rat_Price =  request.args.get('Rat_Price',None,type=str)
    Cur_Code =  request.args.get('Cur_Code',None,type=str)
    MU_Code =  request.args.get('MU_Code',None,type=str)
    Rat_Period =  request.args.get('Rat_Period',None,type=str)
    Rat_Type =  request.args.get('Rat_Type',None,type=str)
    
    # Build default query all fields from table
    

    if Rat_Id is not None and len(Rat_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Rat_Id:Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Rat_Id
                )
    
    
    if Typ_Code is not None and len(Typ_Code)>0:
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys['Typ_Code']
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)            
            set_query_option(   engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1=foreign_field,
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Typ_Code
                )
                                
    
    
    if Cus_Id is not None and len(Cus_Id)>0:
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys['Cus_Id']
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)            
            set_query_option(   engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1=foreign_field,
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Cus_Id
                )
                                
    
    
    if Pla_Id is not None and len(Pla_Id)>0:
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys['Pla_Id']
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)            
            set_query_option(   engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1=foreign_field,
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Pla_Id
                )
                                
    
    
    if CC_Id is not None and len(CC_Id)>0:
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys['CC_Id']
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)            
            set_query_option(   engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1=foreign_field,
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CC_Id
                )
                                
    
    
    if CI_Id is not None and len(CI_Id)>0:
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys['CI_Id']
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)            
            set_query_option(   engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1=foreign_field,
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CI_Id
                )
                                
    
    
    if Rat_Price is not None and len(Rat_Price)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Rat_Price:Rate Price',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Rat_Price
                )
    
    
    if Cur_Code is not None and len(Cur_Code)>0:
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys['Cur_Code']
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)            
            set_query_option(   engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1=foreign_field,
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Cur_Code
                )
                                
    
    
    if MU_Code is not None and len(MU_Code)>0:
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys['MU_Code']
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)            
            set_query_option(   engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1=foreign_field,
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%MU_Code
                )
                                
    
    
    if Rat_Period is not None and len(Rat_Period)>0:
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys['Rat_Period']
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)            
            set_query_option(   engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1=foreign_field,
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Rat_Period
                )
                                
    
    
    if Rat_Type is not None and len(Rat_Type)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Rat_Type:Rate Type',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Rat_Type
                )
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['Rat_Id', 'Typ_Code', 'Cus_Id', 'Pla_Id', 'CC_Id', 'CI_Id', 'Rat_Price', 'Cur_Code', 'MU_Code', 'Rat_Period', 'Rat_Type']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['Rat_Id', 'Typ_Code', 'Cus_Id', 'Pla_Id', 'CC_Id', 'CI_Id', 'Rat_Price', 'Cur_Code', 'MU_Code', 'Rat_Period', 'Rat_Type'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'Rat_Id':
                if value is not None:
                    query = query.filter_by(Rat_Id=value)
            if field == 'Typ_Code':
                if value is not None:
                    query = query.filter_by(Typ_Code=value)
            if field == 'Cus_Id':
                if value is not None:
                    query = query.filter_by(Cus_Id=value)
            if field == 'Pla_Id':
                if value is not None:
                    query = query.filter_by(Pla_Id=value)
            if field == 'CC_Id':
                if value is not None:
                    query = query.filter_by(CC_Id=value)
            if field == 'CI_Id':
                if value is not None:
                    query = query.filter_by(CI_Id=value)
            if field == 'Rat_Price':
                if value is not None:
                    query = query.filter_by(Rat_Price=value)
            if field == 'Cur_Code':
                if value is not None:
                    query = query.filter_by(Cur_Code=value)
            if field == 'MU_Code':
                if value is not None:
                    query = query.filter_by(MU_Code=value)
            if field == 'Rat_Period':
                if value is not None:
                    query = query.filter_by(Rat_Period=value)
            if field == 'Rat_Type':
                if value is not None:
                    query = query.filter_by(Rat_Type=value)
            # ------------------------------------------------------------------
    # JOIN other tables and generate foreign fields
    # Will replace class name by sharding class in joins structure
    # will have no effect in no sharding environment
    query = query.join(cu_type,rate.Typ_Code == cu_type.Typ_Code).add_columns(cu_type.Typ_Description).join(customer,rate.Cus_Id == customer.Cus_Id).add_columns(customer.Cus_Name).join(platform,rate.Pla_Id == platform.Pla_Id).add_columns(platform.Pla_Name).join(cost_center,rate.CC_Id == cost_center.CC_Id).add_columns(cost_center.CC_Description).join(configuration_item,rate.CI_Id == configuration_item.CI_Id).add_columns(configuration_item.CI_Name).join(currency,rate.Cur_Code == currency.Cur_Code).add_columns(currency.Cur_Name).join(measure_unit,rate.MU_Code == measure_unit.MU_Code).add_columns(measure_unit.MU_Description).join(rat_period,rate.Rat_Period == rat_period.Rat_Period).add_columns(rat_period.Value)
    # ------------------------------------------------------------------
    
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:40.407554
# ======================================================================
# gen_views_api.html:AG 2021-12-13 19:33:40.407570
# table_name: Rates
# class_name: rate
# is shardened: None
# Table 'Rates' keys = Rat_Id
# Errors: None
# ID field found 'Rat_Id' auto_increment db.Integer
# Rates id field is 'Rates.Rat_Id' of type 'int:'

@main.route('/api/get/Rates'     , methods=['GET'])
@main.route('/api/get/Rates/<int:id>', methods=['GET'])
def api_get_Rates(id=None):
    code       = API_OK
    message    = 'OK'
    rows       = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        #response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        #response.headers['Pragma']        = 'no-cache'
        try:
            id_counter = 0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values=[id]
            # Codigo para un solo campo de id
            # chequear si marcado explicitamente
            db.session.flush()
            query = db.session.query(Rates)
            if id is not None:
                query = query.filter(Rates.Rat_Id == id_values[id_counter])
                rows = query.one_or_none()
            else:
                if request.args is not None and len(request.args):
                    if 'Rat_Id' in request.args:
                        query = query.filter(Rates.Rat_Id == request.args.get('Rat_Id'))
                    if 'Typ_Code' in request.args:
                        query = query.filter(Rates.Typ_Code == request.args.get('Typ_Code'))
                    if 'Cus_Id' in request.args:
                        query = query.filter(Rates.Cus_Id == request.args.get('Cus_Id'))
                    if 'Pla_Id' in request.args:
                        query = query.filter(Rates.Pla_Id == request.args.get('Pla_Id'))
                    if 'CC_Id' in request.args:
                        query = query.filter(Rates.CC_Id == request.args.get('CC_Id'))
                    if 'CI_Id' in request.args:
                        query = query.filter(Rates.CI_Id == request.args.get('CI_Id'))
                    if 'Rat_Price' in request.args:
                        query = query.filter(Rates.Rat_Price == request.args.get('Rat_Price'))
                    if 'Cur_Code' in request.args:
                        query = query.filter(Rates.Cur_Code == request.args.get('Cur_Code'))
                    if 'MU_Code' in request.args:
                        query = query.filter(Rates.MU_Code == request.args.get('MU_Code'))
                    if 'Rat_Period' in request.args:
                        query = query.filter(Rates.Rat_Period == request.args.get('Rat_Period'))
                    if 'Rat_Type' in request.args:
                        query = query.filter(Rates.Rat_Type == request.args.get('Rat_Type'))
                rows = query.all()
            if rows is not None:
                if type(rows) == list:
                    for i in range(len(rows)):
                        rows[i] = json.loads(rows[i].get_json())
                else:
                    rows = [json.loads(rows.get_json())]
            else:
                rows = []
            if len(rows) == 0:
                code = API_NO_DATA
                state = get_api_state(API_NO_DATA)
                
                if id is None:
                    message = f"No 'Rates' records found"
                else:
                    message = f"No 'Rates.Rat_Id' = {id} record found"
                
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Rates',entities=rows,name=current_app.config['NAME'])

@main.route('/api/post/Rates', methods=['POST'])
def api_post_Rates():
    code    = API_OK
    message = 'OK'
    row     = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            row = Rates()
            # Populates row from json, if ID=int:autoincrement then None
            row.Rat_Id = None
            row.Typ_Code = request.json.get('Typ_Code',None)
            row.Cus_Id = request.json.get('Cus_Id',None)
            row.Pla_Id = request.json.get('Pla_Id',None)
            row.CC_Id = request.json.get('CC_Id',None)
            row.CI_Id = request.json.get('CI_Id',None)
            row.Rat_Price = request.json.get('Rat_Price',None)
            row.Cur_Code = request.json.get('Cur_Code',None)
            row.MU_Code = request.json.get('MU_Code',None)
            row.Rat_Period = request.json.get('Rat_Period',None)
            row.Rat_Type = request.json.get('Rat_Type',None)
            # ----------------------------------------------------------
            db.session.add(row)
            db.session.flush()
            db.session.commit()
            db.session.flush()
            db.session.refresh(row)
            db.session.flush()
            message = f"Created 'Rates' Rat_Id = {row.Rat_Id}"
            row     = json.loads(row.get_json())
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
    else:
        code    = API_ERROR
        message = 'Unauthorized request'            
    return get_api_response(code=code,message=message,kind='Rates',entities=[row],name=current_app.config['NAME'])

@main.route('/api/put/Rates/<int:id>', methods=['PUT'])
def api_put_Rates(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Rates()
            query = db.session.query(Rates)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Rates.Rat_Id == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                if 'Typ_Code' in request.json.keys():
                    row.Typ_Code = request.json.get('Typ_Code')
                if 'Cus_Id' in request.json.keys():
                    row.Cus_Id = request.json.get('Cus_Id')
                if 'Pla_Id' in request.json.keys():
                    row.Pla_Id = request.json.get('Pla_Id')
                if 'CC_Id' in request.json.keys():
                    row.CC_Id = request.json.get('CC_Id')
                if 'CI_Id' in request.json.keys():
                    row.CI_Id = request.json.get('CI_Id')
                if 'Rat_Price' in request.json.keys():
                    row.Rat_Price = request.json.get('Rat_Price')
                if 'Cur_Code' in request.json.keys():
                    row.Cur_Code = request.json.get('Cur_Code')
                if 'MU_Code' in request.json.keys():
                    row.MU_Code = request.json.get('MU_Code')
                if 'Rat_Period' in request.json.keys():
                    row.Rat_Period = request.json.get('Rat_Period')
                if 'Rat_Type' in request.json.keys():
                    row.Rat_Type = request.json.get('Rat_Type')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Rates' Rat_Id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found Rates with Rat_Id = {id}"
                row     = None
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Rates',entities=[row],name=current_app.config['NAME'])

@main.route('/api/patch/Rates/<int:id>', methods=['PATCH'])
def api_patch_Rates(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Rates()
            query = db.session.query(Rates)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Rates.Rat_Id == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                db.session.rollback()
                if request.values is not None and len(request.values):
                    if 'Typ_Code' in request.values:
                        row.Typ_Code = request.values.get('Typ_Code')
                    if 'Cus_Id' in request.values:
                        row.Cus_Id = request.values.get('Cus_Id')
                    if 'Pla_Id' in request.values:
                        row.Pla_Id = request.values.get('Pla_Id')
                    if 'CC_Id' in request.values:
                        row.CC_Id = request.values.get('CC_Id')
                    if 'CI_Id' in request.values:
                        row.CI_Id = request.values.get('CI_Id')
                    if 'Rat_Price' in request.values:
                        row.Rat_Price = request.values.get('Rat_Price')
                    if 'Cur_Code' in request.values:
                        row.Cur_Code = request.values.get('Cur_Code')
                    if 'MU_Code' in request.values:
                        row.MU_Code = request.values.get('MU_Code')
                    if 'Rat_Period' in request.values:
                        row.Rat_Period = request.values.get('Rat_Period')
                    if 'Rat_Type' in request.values:
                        row.Rat_Type = request.values.get('Rat_Type')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Rates' Rat_Id = {id}"
                try:
                    row     = json.loads(row.get_json())
                except:
                    row     = None
            else:
                code    = API_NOT_FOUND
                message = f"Not found Rates with Rat_Id = {id}"
                row     = None
                db.session.rollback()
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
            db.session.rollback()
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Rates',entities=[row],name=current_app.config['NAME'])

@main.route('/api/delete/Rates/<int:id>', methods=['DELETE'])
def api_delete_Rates(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Rates()
            query = db.session.query(Rates)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Rates.Rat_Id == id)
            # --------------------------------------------------------------
            row = query.one_or_none()

            if row is not None:
                db.session.delete(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                message = f"Deleted 'Rates' Rat_Id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found 'Rates' with Rat_Id = {id}"
                row     = None        
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Rates',entities=[],name=current_app.config['NAME'])

# ======================================================================# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2021-12-13 19:33:35
# =============================================================================
# gen_views.py:32 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_rat_periods.py
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:40.116664
# ======================================================================        
# gen_views_form.html:AG 2021-12-13 19:33:40.116678
@main.route('/forms/Rat_Periods', methods=['GET', 'POST'])
@login_required

def forms_Rat_Periods():
    """ Form handling function for table Rat_Periods """
    logger.debug('forms_Rat_Periods(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Rat_Periods'
    class_name='rat_period'
    template_name='Rat_Periods'
    sharding=False
    Rat_Period  =  request.args.get('Rat_Period',0,type=int)
    
    # Ensures DB Data is commited prior main query
    try:
        db.session.commit()
    except:
        db.session.rollback()
    row =  rat_period.query.filter(rat_period.Rat_Period == Rat_Period).first()
    if row is None:
        row=rat_period()
        session['is_new_row']=True
    session['data'] =  {  'Rat_Period':row.Rat_Period, 'Value':row.Value }
    
    form = frm_rat_period()
    
    # Actual Form activation here
    if form.validate_on_submit():
        # Code for SAVE option -----------------------------------------
        if form.submit_Save.data and current_user.role_id > 1:
            row.Rat_Period = form.Rat_Period.data
            row.Value = form.Value.data
            try:
               session['new_row']=str(row)
               db.session.flush()
               db.session.add(row)
               db.session.commit()
               db.session.flush()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New Rate Period created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>Rate Period Rat_Period saved OK</b>')
                   flash(message)
               db.session.flush()
            except Exception as e:
               db.session.rollback()
               db.session.flush()
               message=Markup('ERROR saving Rate Period record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_Rat_Periods_query'))
        # --------------------------------------------------------------
        # Code for NEW option
        # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.flush()
            row=rat_period()
    
            return redirect(url_for('.forms_Rat_Periods'))    
    
        # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('Rate Period Record modifications discarded ...')
            flash(message)
        # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>Rate Period data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_'))    
    
    
    form.Rat_Period.data = row.Rat_Period
    form.Value.data = row.Value
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_Rat_Periods(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = [{'name': 'rates', 'class': 'rate', 'backref': 'rat_period', 'caption': 'Rates', 'table': 'Rates'}]
    
    from flask_sqlalchemy import Pagination
    # [{'name': 'rates', 'class': 'rate', 'backref': 'rat_period', 'caption': 'Rates', 'table': 'Rates'}]
    try:
        if hasattr(row, 'rates'):
            P.append(({'name': 'rates', 'class': 'rate', 'backref': 'rat_period', 'caption': 'Rates', 'table': 'Rates'},row.rates.paginate()))
    except Exception as e:
        print(f'Exception: {str(e)}')
    
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('rat_periods.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:40.124971
# ======================================================================        
# gen_views_delete.html:AG 2021-12-13 19:33:40.124984
@main.route('/forms/Rat_Periods_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)
@admin_required
def forms_Rat_Periods_delete():
    """ Delete record handling function for table Rat_Periods """
    logger.debug('forms_Rat_Periods_delete(): Enter')
    Rat_Period  =  request.args.get('Rat_Period',0,type=int)
    row =  rat_period.query.filter(rat_period.Rat_Period == Rat_Period).first()

    if row is None:
        row=rat_period()
    session['data'] =  {  'Rat_Period':row.Rat_Period, 'Value':row.Value }
                       
    form = frm_rat_period_delete()

    # Tab['has_fks'] False
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.flush()
                db.session.delete(row)
                db.session.commit()
                db.session.flush()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('Rate Period Rat_Period deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_Rat_Periods_delete',Rat_Period=session['data']['Rat_Period']))    
    
            return redirect(url_for('.select_Rat_Periods_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_Rat_Periods_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_Rat_Periods_query'))    
    
    logger.debug('forms_Rat_Periods_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('rat_periods_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: Rat_Periods
# class_name: rat_period
# is shardened: None
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:40.144141
# ======================================================================

# gen_views_select_query.html:AG 2021-12-13 19:33:40.144155        
@main.route('/select/Rat_Periods_Query', methods=['GET','POST'])
@login_required
@admin_required
def select_Rat_Periods_query():
    """ Select rows handling function for table 'Rat_Periods' """
    logger.debug('select_Rat_Periods_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Rat_Periods'
    class_name='rat_period'
    template_name='Rat_Periods'
    sharding=False


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)

    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='rat_period',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='rat_period',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='rat_period',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='rat_period'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    Rat_Period =  request.args.get('Rat_Period',None,type=str)
    Value =  request.args.get('Value',None,type=str)
    
    # Build default query all fields from table
    

    if Rat_Period is not None and len(Rat_Period)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Rat_Period:Rate Period',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Rat_Period
                )
    
    
    if Value is not None and len(Value)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Value:Value',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Value
                )
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['Rat_Period', 'Value']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['Rat_Period', 'Value'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'Rat_Period':
                if value is not None:
                    query = query.filter_by(Rat_Period=value)
            if field == 'Value':
                if value is not None:
                    query = query.filter_by(Value=value)
            
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:40.177563
# ======================================================================
# gen_views_api.html:AG 2021-12-13 19:33:40.177578
# table_name: Rat_Periods
# class_name: rat_period
# is shardened: None
# Table 'Rat_Periods' keys = Rat_Period
# Errors: None
# PK field found 'Rat_Period' db.Integer
# Rat_Periods id field is 'Rat_Periods.Rat_Period' of type 'int:'

@main.route('/api/get/Rat_Periods'     , methods=['GET'])
@main.route('/api/get/Rat_Periods/<int:id>', methods=['GET'])
def api_get_Rat_Periods(id=None):
    code       = API_OK
    message    = 'OK'
    rows       = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        #response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        #response.headers['Pragma']        = 'no-cache'
        try:
            id_counter = 0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values=[id]
            # Codigo para un solo campo de id
            # chequear si marcado explicitamente
            db.session.flush()
            query = db.session.query(Rat_Periods)
            if id is not None:
                query = query.filter(Rat_Periods.Rat_Period == id_values[id_counter])
                rows = query.one_or_none()
            else:
                if request.args is not None and len(request.args):
                    if 'Rat_Period' in request.args:
                        query = query.filter(Rat_Periods.Rat_Period == request.args.get('Rat_Period'))
                    if 'Value' in request.args:
                        query = query.filter(Rat_Periods.Value == request.args.get('Value'))
                rows = query.all()
            if rows is not None:
                if type(rows) == list:
                    for i in range(len(rows)):
                        rows[i] = json.loads(rows[i].get_json())
                else:
                    rows = [json.loads(rows.get_json())]
            else:
                rows = []
            if len(rows) == 0:
                code = API_NO_DATA
                state = get_api_state(API_NO_DATA)
                
                if id is None:
                    message = f"No 'Rat_Periods' records found"
                else:
                    message = f"No 'Rat_Periods.Rat_Period' = {id} record found"
                
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Rat_Periods',entities=rows,name=current_app.config['NAME'])

@main.route('/api/post/Rat_Periods', methods=['POST'])
def api_post_Rat_Periods():
    code    = API_OK
    message = 'OK'
    row     = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            row = Rat_Periods()
            # Populates row from json, if ID=int:autoincrement then None
            row.Rat_Period = request.json.get('Rat_Period',None)
            row.Value = request.json.get('Value',None)
            # ----------------------------------------------------------
            db.session.add(row)
            db.session.flush()
            db.session.commit()
            db.session.flush()
            db.session.refresh(row)
            db.session.flush()
            message = f"Created 'Rat_Periods' Rat_Period = {row.Rat_Period}"
            row     = json.loads(row.get_json())
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
    else:
        code    = API_ERROR
        message = 'Unauthorized request'            
    return get_api_response(code=code,message=message,kind='Rat_Periods',entities=[row],name=current_app.config['NAME'])

@main.route('/api/put/Rat_Periods/<int:id>', methods=['PUT'])
def api_put_Rat_Periods(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Rat_Periods()
            query = db.session.query(Rat_Periods)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Rat_Periods.Rat_Period == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                if 'Value' in request.json.keys():
                    row.Value = request.json.get('Value')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Rat_Periods' Rat_Period = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found Rat_Periods with Rat_Period = {id}"
                row     = None
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Rat_Periods',entities=[row],name=current_app.config['NAME'])

@main.route('/api/patch/Rat_Periods/<int:id>', methods=['PATCH'])
def api_patch_Rat_Periods(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Rat_Periods()
            query = db.session.query(Rat_Periods)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Rat_Periods.Rat_Period == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                db.session.rollback()
                if request.values is not None and len(request.values):
                    if 'Value' in request.values:
                        row.Value = request.values.get('Value')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Rat_Periods' Rat_Period = {id}"
                try:
                    row     = json.loads(row.get_json())
                except:
                    row     = None
            else:
                code    = API_NOT_FOUND
                message = f"Not found Rat_Periods with Rat_Period = {id}"
                row     = None
                db.session.rollback()
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
            db.session.rollback()
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Rat_Periods',entities=[row],name=current_app.config['NAME'])

@main.route('/api/delete/Rat_Periods/<int:id>', methods=['DELETE'])
def api_delete_Rat_Periods(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Rat_Periods()
            query = db.session.query(Rat_Periods)
            
            # First loop mandatory for row population ----------------------
            # detected primary key field: c.field
            query       = query.filter(Rat_Periods.Rat_Period == id_values[id_counter])
            id_counter +=1
            # --------------------------------------------------------------
            row = query.one_or_none()

            if row is not None:
                db.session.delete(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                message = f"Deleted 'Rat_Periods' Rat_Period = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found 'Rat_Periods' with Rat_Period = {id}"
                row     = None        
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Rat_Periods',entities=[],name=current_app.config['NAME'])

# ======================================================================# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2021-12-13 19:33:35
# =============================================================================
# gen_views.py:32 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_roles.py
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:40.526557
# ======================================================================        
# gen_views_form.html:AG 2021-12-13 19:33:40.526573
@main.route('/forms/Roles', methods=['GET', 'POST'])
@login_required

def forms_Roles():
    """ Form handling function for table Roles """
    logger.debug('forms_Roles(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Roles'
    class_name='Role'
    template_name='Roles'
    sharding=False
    id  =  request.args.get('id',0,type=int)
    
    # Ensures DB Data is commited prior main query
    try:
        db.session.commit()
    except:
        db.session.rollback()
    row =  Role.query.filter(Role.id == id).first()
    if row is None:
        row=Role()
        session['is_new_row']=True
    session['data'] =  {  'id':row.id, 'name':row.name, 'default':row.default, 'permissions':row.permissions }
    
    form = frm_Role()
    
    # Actual Form activation here
    if form.validate_on_submit():
        # Code for SAVE option -----------------------------------------
        if form.submit_Save.data and current_user.role_id > 1:
            row.id = form.id.data
            row.name = form.name.data
            row.default = form.default.data
            row.permissions = form.permissions.data
            try:
               session['new_row']=str(row)
               db.session.flush()
               db.session.add(row)
               db.session.commit()
               db.session.flush()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New Role created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>Role id saved OK</b>')
                   flash(message)
               db.session.flush()
            except Exception as e:
               db.session.rollback()
               db.session.flush()
               message=Markup('ERROR saving Role record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_Roles_query'))
        # --------------------------------------------------------------
        # Code for NEW option
        # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.flush()
            row=Role()
    
            return redirect(url_for('.forms_Roles'))    
    
        # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('Role Record modifications discarded ...')
            flash(message)
        # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>Role data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_'))    
    
    
    form.id.data = row.id
    form.name.data = row.name
    form.default.data = row.default
    form.permissions.data = row.permissions
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_Roles(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = [{'name': 'users', 'class': 'User', 'backref': 'Role', 'caption': 'Users', 'table': 'Users'}]
    
    from flask_sqlalchemy import Pagination
    # [{'name': 'users', 'class': 'User', 'backref': 'Role', 'caption': 'Users', 'table': 'Users'}]
    try:
        if hasattr(row, 'users'):
            P.append(({'name': 'users', 'class': 'User', 'backref': 'Role', 'caption': 'Users', 'table': 'Users'},row.users.paginate()))
    except Exception as e:
        print(f'Exception: {str(e)}')
    
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('roles.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:40.535807
# ======================================================================        
# gen_views_delete.html:AG 2021-12-13 19:33:40.535821
@main.route('/forms/Roles_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)
@admin_required
def forms_Roles_delete():
    """ Delete record handling function for table Roles """
    logger.debug('forms_Roles_delete(): Enter')
    id  =  request.args.get('id',0,type=int)
    row =  Role.query.filter(Role.id == id).first()

    if row is None:
        row=Role()
    session['data'] =  {  'id':row.id, 'name':row.name, 'default':row.default, 'permissions':row.permissions }
                       
    form = frm_Role_delete()

    # Tab['has_fks'] False
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.flush()
                db.session.delete(row)
                db.session.commit()
                db.session.flush()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('Role id deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_Roles_delete',id=session['data']['id']))    
    
            return redirect(url_for('.select_Roles_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_Roles_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_Roles_query'))    
    
    logger.debug('forms_Roles_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('roles_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: Roles
# class_name: Role
# is shardened: None
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:40.556210
# ======================================================================

# gen_views_select_query.html:AG 2021-12-13 19:33:40.556225        
@main.route('/select/Roles_Query', methods=['GET','POST'])
@login_required
@admin_required
def select_Roles_query():
    """ Select rows handling function for table 'Roles' """
    logger.debug('select_Roles_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Roles'
    class_name='Role'
    template_name='Roles'
    sharding=False


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)

    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='Role',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='Role',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='Role',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='Role'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    id =  request.args.get('id',None,type=str)
    name =  request.args.get('name',None,type=str)
    default =  request.args.get('default',None,type=str)
    permissions =  request.args.get('permissions',None,type=str)
    
    # Build default query all fields from table
    

    if id is not None and len(id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='id:id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%id
                )
    
    
    if name is not None and len(name)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='name:name',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%name
                )
    
    
    if default is not None and len(default)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='default:default',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%default
                )
    
    
    if permissions is not None and len(permissions)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='permissions:permissions',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%permissions
                )
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['id', 'name', 'default', 'permissions']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['id', 'name', 'default', 'permissions'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'id':
                if value is not None:
                    query = query.filter_by(id=value)
            if field == 'name':
                if value is not None:
                    query = query.filter_by(name=value)
            if field == 'default':
                if value is not None:
                    query = query.filter_by(default=value)
            if field == 'permissions':
                if value is not None:
                    query = query.filter_by(permissions=value)
            
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:40.591120
# ======================================================================
# gen_views_api.html:AG 2021-12-13 19:33:40.591136
# table_name: Roles
# class_name: Role
# is shardened: None
# Table 'Roles' keys = id
# Errors: None
# PK field found 'id' db.Integer
# Roles id field is 'Roles.id' of type 'int:'

@main.route('/api/get/Roles'     , methods=['GET'])
@main.route('/api/get/Roles/<int:id>', methods=['GET'])
def api_get_Roles(id=None):
    code       = API_OK
    message    = 'OK'
    rows       = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        #response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        #response.headers['Pragma']        = 'no-cache'
        try:
            id_counter = 0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values=[id]
            # Codigo para un solo campo de id
            # chequear si marcado explicitamente
            db.session.flush()
            query = db.session.query(Roles)
            if id is not None:
                query = query.filter(Roles.id == id_values[id_counter])
                rows = query.one_or_none()
            else:
                if request.args is not None and len(request.args):
                    if 'id' in request.args:
                        query = query.filter(Roles.id == request.args.get('id'))
                    if 'name' in request.args:
                        query = query.filter(Roles.name == request.args.get('name'))
                    if 'default' in request.args:
                        query = query.filter(Roles.default == request.args.get('default'))
                    if 'permissions' in request.args:
                        query = query.filter(Roles.permissions == request.args.get('permissions'))
                rows = query.all()
            if rows is not None:
                if type(rows) == list:
                    for i in range(len(rows)):
                        rows[i] = json.loads(rows[i].get_json())
                else:
                    rows = [json.loads(rows.get_json())]
            else:
                rows = []
            if len(rows) == 0:
                code = API_NO_DATA
                state = get_api_state(API_NO_DATA)
                
                if id is None:
                    message = f"No 'Roles' records found"
                else:
                    message = f"No 'Roles.id' = {id} record found"
                
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Roles',entities=rows,name=current_app.config['NAME'])

@main.route('/api/post/Roles', methods=['POST'])
def api_post_Roles():
    code    = API_OK
    message = 'OK'
    row     = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            row = Roles()
            # Populates row from json, if ID=int:autoincrement then None
            row.id = request.json.get('id',None)
            row.name = request.json.get('name',None)
            row.default = request.json.get('default',None)
            row.permissions = request.json.get('permissions',None)
            # ----------------------------------------------------------
            db.session.add(row)
            db.session.flush()
            db.session.commit()
            db.session.flush()
            db.session.refresh(row)
            db.session.flush()
            message = f"Created 'Roles' id = {row.id}"
            row     = json.loads(row.get_json())
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
    else:
        code    = API_ERROR
        message = 'Unauthorized request'            
    return get_api_response(code=code,message=message,kind='Roles',entities=[row],name=current_app.config['NAME'])

@main.route('/api/put/Roles/<int:id>', methods=['PUT'])
def api_put_Roles(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Roles()
            query = db.session.query(Roles)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Roles.id == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                if 'name' in request.json.keys():
                    row.name = request.json.get('name')
                if 'default' in request.json.keys():
                    row.default = request.json.get('default')
                if 'permissions' in request.json.keys():
                    row.permissions = request.json.get('permissions')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Roles' id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found Roles with id = {id}"
                row     = None
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Roles',entities=[row],name=current_app.config['NAME'])

@main.route('/api/patch/Roles/<int:id>', methods=['PATCH'])
def api_patch_Roles(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Roles()
            query = db.session.query(Roles)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Roles.id == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                db.session.rollback()
                if request.values is not None and len(request.values):
                    if 'name' in request.values:
                        row.name = request.values.get('name')
                    if 'default' in request.values:
                        row.default = request.values.get('default')
                    if 'permissions' in request.values:
                        row.permissions = request.values.get('permissions')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Roles' id = {id}"
                try:
                    row     = json.loads(row.get_json())
                except:
                    row     = None
            else:
                code    = API_NOT_FOUND
                message = f"Not found Roles with id = {id}"
                row     = None
                db.session.rollback()
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
            db.session.rollback()
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Roles',entities=[row],name=current_app.config['NAME'])

@main.route('/api/delete/Roles/<int:id>', methods=['DELETE'])
def api_delete_Roles(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Roles()
            query = db.session.query(Roles)
            
            # First loop mandatory for row population ----------------------
            # detected primary key field: c.field
            query       = query.filter(Roles.id == id_values[id_counter])
            id_counter +=1
            # --------------------------------------------------------------
            row = query.one_or_none()

            if row is not None:
                db.session.delete(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                message = f"Deleted 'Roles' id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found 'Roles' with id = {id}"
                row     = None        
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Roles',entities=[],name=current_app.config['NAME'])

# ======================================================================# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2021-12-13 19:33:35
# =============================================================================
# gen_views.py:32 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_st_use_per_cu.py
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:40.736225
# ======================================================================        
# gen_views_form.html:AG 2021-12-13 19:33:40.736241
@main.route('/forms/ST_Use_Per_CU', methods=['GET', 'POST'])
@login_required

def forms_ST_Use_Per_CU():
    """ Form handling function for table ST_Use_Per_CU """
    logger.debug('forms_ST_Use_Per_CU(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='ST_Use_Per_CU'
    class_name='st_use_per_cu'
    template_name='ST_Use_Per_CU'
    sharding=False
    CU_Id  =  request.args.get('CU_Id',0,type=int)
    From  =  request.args.get('From',0,type=int)
    To  =  request.args.get('To',0,type=int)
    
    # Ensures DB Data is commited prior main query
    try:
        db.session.commit()
    except:
        db.session.rollback()
    row =  st_use_per_cu.query.filter(st_use_per_cu.CU_Id == CU_Id,st_use_per_cu.From == From,st_use_per_cu.To == To).first()
    if row is None:
        row=st_use_per_cu()
        session['is_new_row']=True
    session['data'] =  {  'CU_Id':row.CU_Id, 'From':row.From, 'To':row.To, 'Total_Slices':row.Total_Slices, 'Found_Slices':row.Found_Slices, 'Not_Found_Slices':row.Not_Found_Slices, 'Period_Initial_Q':row.Period_Initial_Q, 'Period_Increase':row.Period_Increase, 'Period_Increase_Count':row.Period_Increase_Count, 'Period_Reduction':row.Period_Reduction, 'Period_Reduction_Count':row.Period_Reduction_Count, 'Period_Final_Q':row.Period_Final_Q, 'CI_Id':row.CI_Id, 'CC_Id':row.CC_Id, 'Cus_Id':row.Cus_Id, 'Rat_Id':row.Rat_Id, 'Typ_Code':row.Typ_Code, 'Pla_Id':row.Pla_Id, 'Mean':row.Mean, 'Variance':row.Variance, 'StdDev':row.StdDev, 'Min':row.Min, 'Max':row.Max }
    
    form = frm_st_use_per_cu()
    
    # Actual Form activation here
    if form.validate_on_submit():
        # Code for SAVE option -----------------------------------------
        if form.submit_Save.data and current_user.role_id > 1:
            row.CU_Id = form.CU_Id.data
            row.From = form.From.data
            row.To = form.To.data
            row.Total_Slices = form.Total_Slices.data
            row.Found_Slices = form.Found_Slices.data
            row.Not_Found_Slices = form.Not_Found_Slices.data
            row.Period_Initial_Q = form.Period_Initial_Q.data
            row.Period_Increase = form.Period_Increase.data
            row.Period_Increase_Count = form.Period_Increase_Count.data
            row.Period_Reduction = form.Period_Reduction.data
            row.Period_Reduction_Count = form.Period_Reduction_Count.data
            row.Period_Final_Q = form.Period_Final_Q.data
            row.CI_Id = form.CI_Id.data
            row.CC_Id = form.CC_Id.data
            row.Cus_Id = form.Cus_Id.data
            row.Rat_Id = form.Rat_Id.data
            row.Typ_Code = form.Typ_Code.data
            row.Pla_Id = form.Pla_Id.data
            row.Mean = form.Mean.data
            row.Variance = form.Variance.data
            row.StdDev = form.StdDev.data
            row.Min = form.Min.data
            row.Max = form.Max.data
            try:
               session['new_row']=str(row)
               db.session.flush()
               db.session.add(row)
               db.session.commit()
               db.session.flush()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New ST Use Per CU created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>ST Use Per CU CU_Id,From,To saved OK</b>')
                   flash(message)
               db.session.flush()
            except Exception as e:
               db.session.rollback()
               db.session.flush()
               message=Markup('ERROR saving ST Use Per CU record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_ST_Use_Per_CU_query'))
        # --------------------------------------------------------------
        # Code for NEW option
        # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.flush()
            row=st_use_per_cu()
    
            return redirect(url_for('.forms_ST_Use_Per_CU'))    
    
        # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('ST Use Per CU Record modifications discarded ...')
            flash(message)
        # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>ST Use Per CU data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_'))    
    
    
    form.CU_Id.data = row.CU_Id
    form.From.data = row.From
    form.To.data = row.To
    form.Total_Slices.data = row.Total_Slices
    form.Found_Slices.data = row.Found_Slices
    form.Not_Found_Slices.data = row.Not_Found_Slices
    form.Period_Initial_Q.data = row.Period_Initial_Q
    form.Period_Increase.data = row.Period_Increase
    form.Period_Increase_Count.data = row.Period_Increase_Count
    form.Period_Reduction.data = row.Period_Reduction
    form.Period_Reduction_Count.data = row.Period_Reduction_Count
    form.Period_Final_Q.data = row.Period_Final_Q
    form.CI_Id.data = row.CI_Id
    form.CC_Id.data = row.CC_Id
    form.Cus_Id.data = row.Cus_Id
    form.Rat_Id.data = row.Rat_Id
    form.Typ_Code.data = row.Typ_Code
    form.Pla_Id.data = row.Pla_Id
    form.Mean.data = row.Mean
    form.Variance.data = row.Variance
    form.StdDev.data = row.StdDev
    form.Min.data = row.Min
    form.Max.data = row.Max
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_ST_Use_Per_CU(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = []
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('st_use_per_cu.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:40.745038
# ======================================================================        
# gen_views_delete.html:AG 2021-12-13 19:33:40.745051
@main.route('/forms/ST_Use_Per_CU_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)

def forms_ST_Use_Per_CU_delete():
    """ Delete record handling function for table ST_Use_Per_CU """
    logger.debug('forms_ST_Use_Per_CU_delete(): Enter')
    CU_Id  =  request.args.get('CU_Id',0,type=int)
    From  =  request.args.get('From',0,type=int)
    To  =  request.args.get('To',0,type=int)
    row =  st_use_per_cu.query.filter(st_use_per_cu.CU_Id == CU_Id,st_use_per_cu.From == From,st_use_per_cu.To == To).first()

    if row is None:
        row=st_use_per_cu()
    session['data'] =  {  'CU_Id':row.CU_Id, 'From':row.From, 'To':row.To, 'Total_Slices':row.Total_Slices, 'Found_Slices':row.Found_Slices, 'Not_Found_Slices':row.Not_Found_Slices, 'Period_Initial_Q':row.Period_Initial_Q, 'Period_Increase':row.Period_Increase, 'Period_Increase_Count':row.Period_Increase_Count, 'Period_Reduction':row.Period_Reduction, 'Period_Reduction_Count':row.Period_Reduction_Count, 'Period_Final_Q':row.Period_Final_Q, 'CI_Id':row.CI_Id, 'CC_Id':row.CC_Id, 'Cus_Id':row.Cus_Id, 'Rat_Id':row.Rat_Id, 'Typ_Code':row.Typ_Code, 'Pla_Id':row.Pla_Id, 'Mean':row.Mean, 'Variance':row.Variance, 'StdDev':row.StdDev, 'Min':row.Min, 'Max':row.Max }
                       
    form = frm_st_use_per_cu_delete()

    # Tab['has_fks'] False
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.flush()
                db.session.delete(row)
                db.session.commit()
                db.session.flush()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('ST Use Per CU CU_Id,From,To deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_ST_Use_Per_CU_delete',CU_Id=session['data']['CU_Id'],From=session['data']['From'],To=session['data']['To']))    
    
            return redirect(url_for('.select_ST_Use_Per_CU_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_ST_Use_Per_CU_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_ST_Use_Per_CU_query'))    
    
    logger.debug('forms_ST_Use_Per_CU_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('st_use_per_cu_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: ST_Use_Per_CU
# class_name: st_use_per_cu
# is shardened: None
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:40.765201
# ======================================================================

# gen_views_select_query.html:AG 2021-12-13 19:33:40.765215        
@main.route('/select/ST_Use_Per_CU_Query', methods=['GET','POST'])
@login_required

def select_ST_Use_Per_CU_query():
    """ Select rows handling function for table 'ST_Use_Per_CU' """
    logger.debug('select_ST_Use_Per_CU_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='ST_Use_Per_CU'
    class_name='st_use_per_cu'
    template_name='ST_Use_Per_CU'
    sharding=False


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)

    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='st_use_per_cu',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='st_use_per_cu',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='st_use_per_cu',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='st_use_per_cu'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    CU_Id =  request.args.get('CU_Id',None,type=str)
    From =  request.args.get('From',None,type=str)
    To =  request.args.get('To',None,type=str)
    Total_Slices =  request.args.get('Total_Slices',None,type=str)
    Found_Slices =  request.args.get('Found_Slices',None,type=str)
    Not_Found_Slices =  request.args.get('Not_Found_Slices',None,type=str)
    Period_Initial_Q =  request.args.get('Period_Initial_Q',None,type=str)
    Period_Increase =  request.args.get('Period_Increase',None,type=str)
    Period_Increase_Count =  request.args.get('Period_Increase_Count',None,type=str)
    Period_Reduction =  request.args.get('Period_Reduction',None,type=str)
    Period_Reduction_Count =  request.args.get('Period_Reduction_Count',None,type=str)
    Period_Final_Q =  request.args.get('Period_Final_Q',None,type=str)
    CI_Id =  request.args.get('CI_Id',None,type=str)
    CC_Id =  request.args.get('CC_Id',None,type=str)
    Cus_Id =  request.args.get('Cus_Id',None,type=str)
    Rat_Id =  request.args.get('Rat_Id',None,type=str)
    Typ_Code =  request.args.get('Typ_Code',None,type=str)
    Pla_Id =  request.args.get('Pla_Id',None,type=str)
    Mean =  request.args.get('Mean',None,type=str)
    Variance =  request.args.get('Variance',None,type=str)
    StdDev =  request.args.get('StdDev',None,type=str)
    Min =  request.args.get('Min',None,type=str)
    Max =  request.args.get('Max',None,type=str)
    
    # Build default query all fields from table
    

    if CU_Id is not None and len(CU_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CU_Id:CU_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_Id
                )
    
    
    if From is not None and len(From)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='From:From',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%From
                )
    
    
    if To is not None and len(To)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='To:To',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%To
                )
    
    
    if Total_Slices is not None and len(Total_Slices)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Total_Slices:Total_Slices',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Total_Slices
                )
    
    
    if Found_Slices is not None and len(Found_Slices)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Found_Slices:Found_Slices',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Found_Slices
                )
    
    
    if Not_Found_Slices is not None and len(Not_Found_Slices)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Not_Found_Slices:Not_Found_Slices',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Not_Found_Slices
                )
    
    
    if Period_Initial_Q is not None and len(Period_Initial_Q)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Period_Initial_Q:Period_Initial_Q',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Period_Initial_Q
                )
    
    
    if Period_Increase is not None and len(Period_Increase)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Period_Increase:Period_Increase',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Period_Increase
                )
    
    
    if Period_Increase_Count is not None and len(Period_Increase_Count)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Period_Increase_Count:Period_Increase_Count',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Period_Increase_Count
                )
    
    
    if Period_Reduction is not None and len(Period_Reduction)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Period_Reduction:Period_Reduction',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Period_Reduction
                )
    
    
    if Period_Reduction_Count is not None and len(Period_Reduction_Count)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Period_Reduction_Count:Period_Reduction_Count',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Period_Reduction_Count
                )
    
    
    if Period_Final_Q is not None and len(Period_Final_Q)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Period_Final_Q:Period_Final_Q',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Period_Final_Q
                )
    
    
    if CI_Id is not None and len(CI_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CI_Id:CI_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CI_Id
                )
    
    
    if CC_Id is not None and len(CC_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CC_Id:CC_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CC_Id
                )
    
    
    if Cus_Id is not None and len(Cus_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Cus_Id:Cus_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Cus_Id
                )
    
    
    if Rat_Id is not None and len(Rat_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Rat_Id:Rat_id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Rat_Id
                )
    
    
    if Typ_Code is not None and len(Typ_Code)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Typ_Code:Typ_Code',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Typ_Code
                )
    
    
    if Pla_Id is not None and len(Pla_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Pla_Id:Pla_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Pla_Id
                )
    
    
    if Mean is not None and len(Mean)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Mean:Mean',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Mean
                )
    
    
    if Variance is not None and len(Variance)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Variance:Variance',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Variance
                )
    
    
    if StdDev is not None and len(StdDev)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='StdDev:StdDev',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%StdDev
                )
    
    
    if Min is not None and len(Min)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Min:Min',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Min
                )
    
    
    if Max is not None and len(Max)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Max:Max',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Max
                )
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['CU_Id', 'From', 'To', 'Total_Slices', 'Found_Slices', 'Not_Found_Slices', 'Period_Initial_Q', 'Period_Increase', 'Period_Increase_Count', 'Period_Reduction', 'Period_Reduction_Count', 'Period_Final_Q', 'CI_Id', 'CC_Id', 'Cus_Id', 'Rat_Id', 'Typ_Code', 'Pla_Id', 'Mean', 'Variance', 'StdDev', 'Min', 'Max']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['CU_Id', 'From', 'To', 'Total_Slices', 'Found_Slices', 'Not_Found_Slices', 'Period_Initial_Q', 'Period_Increase', 'Period_Increase_Count', 'Period_Reduction', 'Period_Reduction_Count', 'Period_Final_Q', 'CI_Id', 'CC_Id', 'Cus_Id', 'Rat_Id', 'Typ_Code', 'Pla_Id', 'Mean', 'Variance', 'StdDev', 'Min', 'Max'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'CU_Id':
                if value is not None:
                    query = query.filter_by(CU_Id=value)
            if field == 'From':
                if value is not None:
                    query = query.filter_by(From=value)
            if field == 'To':
                if value is not None:
                    query = query.filter_by(To=value)
            if field == 'Total_Slices':
                if value is not None:
                    query = query.filter_by(Total_Slices=value)
            if field == 'Found_Slices':
                if value is not None:
                    query = query.filter_by(Found_Slices=value)
            if field == 'Not_Found_Slices':
                if value is not None:
                    query = query.filter_by(Not_Found_Slices=value)
            if field == 'Period_Initial_Q':
                if value is not None:
                    query = query.filter_by(Period_Initial_Q=value)
            if field == 'Period_Increase':
                if value is not None:
                    query = query.filter_by(Period_Increase=value)
            if field == 'Period_Increase_Count':
                if value is not None:
                    query = query.filter_by(Period_Increase_Count=value)
            if field == 'Period_Reduction':
                if value is not None:
                    query = query.filter_by(Period_Reduction=value)
            if field == 'Period_Reduction_Count':
                if value is not None:
                    query = query.filter_by(Period_Reduction_Count=value)
            if field == 'Period_Final_Q':
                if value is not None:
                    query = query.filter_by(Period_Final_Q=value)
            if field == 'CI_Id':
                if value is not None:
                    query = query.filter_by(CI_Id=value)
            if field == 'CC_Id':
                if value is not None:
                    query = query.filter_by(CC_Id=value)
            if field == 'Cus_Id':
                if value is not None:
                    query = query.filter_by(Cus_Id=value)
            if field == 'Rat_Id':
                if value is not None:
                    query = query.filter_by(Rat_Id=value)
            if field == 'Typ_Code':
                if value is not None:
                    query = query.filter_by(Typ_Code=value)
            if field == 'Pla_Id':
                if value is not None:
                    query = query.filter_by(Pla_Id=value)
            if field == 'Mean':
                if value is not None:
                    query = query.filter_by(Mean=value)
            if field == 'Variance':
                if value is not None:
                    query = query.filter_by(Variance=value)
            if field == 'StdDev':
                if value is not None:
                    query = query.filter_by(StdDev=value)
            if field == 'Min':
                if value is not None:
                    query = query.filter_by(Min=value)
            if field == 'Max':
                if value is not None:
                    query = query.filter_by(Max=value)
            
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:40.797906
# ======================================================================
# gen_views_api.html:AG 2021-12-13 19:33:40.797922
# table_name: ST_Use_Per_CU
# class_name: st_use_per_cu
# is shardened: None
# Table 'ST_Use_Per_CU' keys = CU_Id,From,To
# Errors: None
# PK field found 'CU_Id' db.Integer
# Errors: None
# PK field found 'From' db.DateTime
# Errors: None
# PK field found 'To' db.DateTime
# ST_Use_Per_CU id field is 'ST_Use_Per_CU.CU_Id' of type 'int:'

@main.route('/api/get/ST_Use_Per_CU'     , methods=['GET'])
@main.route('/api/get/ST_Use_Per_CU/<int:id>', methods=['GET'])
def api_get_ST_Use_Per_CU(id=None):
    code       = API_OK
    message    = 'OK'
    rows       = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        #response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        #response.headers['Pragma']        = 'no-cache'
        try:
            id_counter = 0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values=[id]
            # Codigo para un solo campo de id
            # chequear si marcado explicitamente
            db.session.flush()
            query = db.session.query(ST_Use_Per_CU)
            if id is not None:
                query = query.filter(ST_Use_Per_CU.CU_Id == id_values[id_counter])
                rows = query.one_or_none()
            else:
                if request.args is not None and len(request.args):
                    if 'CU_Id' in request.args:
                        query = query.filter(ST_Use_Per_CU.CU_Id == request.args.get('CU_Id'))
                    if 'From' in request.args:
                        query = query.filter(ST_Use_Per_CU.From == request.args.get('From'))
                    if 'To' in request.args:
                        query = query.filter(ST_Use_Per_CU.To == request.args.get('To'))
                    if 'Total_Slices' in request.args:
                        query = query.filter(ST_Use_Per_CU.Total_Slices == request.args.get('Total_Slices'))
                    if 'Found_Slices' in request.args:
                        query = query.filter(ST_Use_Per_CU.Found_Slices == request.args.get('Found_Slices'))
                    if 'Not_Found_Slices' in request.args:
                        query = query.filter(ST_Use_Per_CU.Not_Found_Slices == request.args.get('Not_Found_Slices'))
                    if 'Period_Initial_Q' in request.args:
                        query = query.filter(ST_Use_Per_CU.Period_Initial_Q == request.args.get('Period_Initial_Q'))
                    if 'Period_Increase' in request.args:
                        query = query.filter(ST_Use_Per_CU.Period_Increase == request.args.get('Period_Increase'))
                    if 'Period_Increase_Count' in request.args:
                        query = query.filter(ST_Use_Per_CU.Period_Increase_Count == request.args.get('Period_Increase_Count'))
                    if 'Period_Reduction' in request.args:
                        query = query.filter(ST_Use_Per_CU.Period_Reduction == request.args.get('Period_Reduction'))
                    if 'Period_Reduction_Count' in request.args:
                        query = query.filter(ST_Use_Per_CU.Period_Reduction_Count == request.args.get('Period_Reduction_Count'))
                    if 'Period_Final_Q' in request.args:
                        query = query.filter(ST_Use_Per_CU.Period_Final_Q == request.args.get('Period_Final_Q'))
                    if 'CI_Id' in request.args:
                        query = query.filter(ST_Use_Per_CU.CI_Id == request.args.get('CI_Id'))
                    if 'CC_Id' in request.args:
                        query = query.filter(ST_Use_Per_CU.CC_Id == request.args.get('CC_Id'))
                    if 'Cus_Id' in request.args:
                        query = query.filter(ST_Use_Per_CU.Cus_Id == request.args.get('Cus_Id'))
                    if 'Rat_Id' in request.args:
                        query = query.filter(ST_Use_Per_CU.Rat_Id == request.args.get('Rat_Id'))
                    if 'Typ_Code' in request.args:
                        query = query.filter(ST_Use_Per_CU.Typ_Code == request.args.get('Typ_Code'))
                    if 'Pla_Id' in request.args:
                        query = query.filter(ST_Use_Per_CU.Pla_Id == request.args.get('Pla_Id'))
                    if 'Mean' in request.args:
                        query = query.filter(ST_Use_Per_CU.Mean == request.args.get('Mean'))
                    if 'Variance' in request.args:
                        query = query.filter(ST_Use_Per_CU.Variance == request.args.get('Variance'))
                    if 'StdDev' in request.args:
                        query = query.filter(ST_Use_Per_CU.StdDev == request.args.get('StdDev'))
                    if 'Min' in request.args:
                        query = query.filter(ST_Use_Per_CU.Min == request.args.get('Min'))
                    if 'Max' in request.args:
                        query = query.filter(ST_Use_Per_CU.Max == request.args.get('Max'))
                rows = query.all()
            if rows is not None:
                if type(rows) == list:
                    for i in range(len(rows)):
                        rows[i] = json.loads(rows[i].get_json())
                else:
                    rows = [json.loads(rows.get_json())]
            else:
                rows = []
            if len(rows) == 0:
                code = API_NO_DATA
                state = get_api_state(API_NO_DATA)
                
                if id is None:
                    message = f"No 'ST_Use_Per_CU' records found"
                else:
                    message = f"No 'ST_Use_Per_CU.CU_Id' = {id} record found"
                
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='ST_Use_Per_CU',entities=rows,name=current_app.config['NAME'])

@main.route('/api/post/ST_Use_Per_CU', methods=['POST'])
def api_post_ST_Use_Per_CU():
    code    = API_OK
    message = 'OK'
    row     = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            row = ST_Use_Per_CU()
            # Populates row from json, if ID=int:autoincrement then None
            row.CU_Id = request.json.get('CU_Id',None)
            row.From = request.json.get('From',None)
            row.To = request.json.get('To',None)
            row.Total_Slices = request.json.get('Total_Slices',0)
            row.Found_Slices = request.json.get('Found_Slices',0)
            row.Not_Found_Slices = request.json.get('Not_Found_Slices',0)
            row.Period_Initial_Q = request.json.get('Period_Initial_Q',0.000000000000)
            row.Period_Increase = request.json.get('Period_Increase',0.000000000000)
            row.Period_Increase_Count = request.json.get('Period_Increase_Count',0)
            row.Period_Reduction = request.json.get('Period_Reduction',0.000000000000)
            row.Period_Reduction_Count = request.json.get('Period_Reduction_Count',0)
            row.Period_Final_Q = request.json.get('Period_Final_Q',0.000000000000)
            row.CI_Id = request.json.get('CI_Id',1)
            row.CC_Id = request.json.get('CC_Id',1)
            row.Cus_Id = request.json.get('Cus_Id',1)
            row.Rat_Id = request.json.get('Rat_Id',1)
            row.Typ_Code = request.json.get('Typ_Code',NUL)
            row.Pla_Id = request.json.get('Pla_Id',1)
            row.Mean = request.json.get('Mean',0.000000000000)
            row.Variance = request.json.get('Variance',0.000000000000)
            row.StdDev = request.json.get('StdDev',0.000000000000)
            row.Min = request.json.get('Min',0.000000000000)
            row.Max = request.json.get('Max',0.000000000000)
            # ----------------------------------------------------------
            db.session.add(row)
            db.session.flush()
            db.session.commit()
            db.session.flush()
            db.session.refresh(row)
            db.session.flush()
            message = f"Created 'ST_Use_Per_CU' CU_Id = {row.CU_Id}"
            row     = json.loads(row.get_json())
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
    else:
        code    = API_ERROR
        message = 'Unauthorized request'            
    return get_api_response(code=code,message=message,kind='ST_Use_Per_CU',entities=[row],name=current_app.config['NAME'])

@main.route('/api/put/ST_Use_Per_CU/<int:id>', methods=['PUT'])
def api_put_ST_Use_Per_CU(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = ST_Use_Per_CU()
            query = db.session.query(ST_Use_Per_CU)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(ST_Use_Per_CU.CU_Id == id_values[id_counter])
            id_counter += 1
            query = query.filter(ST_Use_Per_CU.From == id_values[id_counter])
            id_counter += 1
            query = query.filter(ST_Use_Per_CU.To == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                if 'Total_Slices' in request.json.keys():
                    row.Total_Slices = request.json.get('Total_Slices')
                if 'Found_Slices' in request.json.keys():
                    row.Found_Slices = request.json.get('Found_Slices')
                if 'Not_Found_Slices' in request.json.keys():
                    row.Not_Found_Slices = request.json.get('Not_Found_Slices')
                if 'Period_Initial_Q' in request.json.keys():
                    row.Period_Initial_Q = request.json.get('Period_Initial_Q')
                if 'Period_Increase' in request.json.keys():
                    row.Period_Increase = request.json.get('Period_Increase')
                if 'Period_Increase_Count' in request.json.keys():
                    row.Period_Increase_Count = request.json.get('Period_Increase_Count')
                if 'Period_Reduction' in request.json.keys():
                    row.Period_Reduction = request.json.get('Period_Reduction')
                if 'Period_Reduction_Count' in request.json.keys():
                    row.Period_Reduction_Count = request.json.get('Period_Reduction_Count')
                if 'Period_Final_Q' in request.json.keys():
                    row.Period_Final_Q = request.json.get('Period_Final_Q')
                if 'CI_Id' in request.json.keys():
                    row.CI_Id = request.json.get('CI_Id')
                if 'CC_Id' in request.json.keys():
                    row.CC_Id = request.json.get('CC_Id')
                if 'Cus_Id' in request.json.keys():
                    row.Cus_Id = request.json.get('Cus_Id')
                if 'Rat_Id' in request.json.keys():
                    row.Rat_Id = request.json.get('Rat_Id')
                if 'Typ_Code' in request.json.keys():
                    row.Typ_Code = request.json.get('Typ_Code')
                if 'Pla_Id' in request.json.keys():
                    row.Pla_Id = request.json.get('Pla_Id')
                if 'Mean' in request.json.keys():
                    row.Mean = request.json.get('Mean')
                if 'Variance' in request.json.keys():
                    row.Variance = request.json.get('Variance')
                if 'StdDev' in request.json.keys():
                    row.StdDev = request.json.get('StdDev')
                if 'Min' in request.json.keys():
                    row.Min = request.json.get('Min')
                if 'Max' in request.json.keys():
                    row.Max = request.json.get('Max')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'ST_Use_Per_CU' CU_Id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found ST_Use_Per_CU with CU_Id = {id}"
                row     = None
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='ST_Use_Per_CU',entities=[row],name=current_app.config['NAME'])

@main.route('/api/patch/ST_Use_Per_CU/<int:id>', methods=['PATCH'])
def api_patch_ST_Use_Per_CU(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = ST_Use_Per_CU()
            query = db.session.query(ST_Use_Per_CU)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(ST_Use_Per_CU.CU_Id == id_values[id_counter])
            id_counter += 1
            query = query.filter(ST_Use_Per_CU.From == id_values[id_counter])
            id_counter += 1
            query = query.filter(ST_Use_Per_CU.To == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                db.session.rollback()
                if request.values is not None and len(request.values):
                    if 'Total_Slices' in request.values:
                        row.Total_Slices = request.values.get('Total_Slices')
                    if 'Found_Slices' in request.values:
                        row.Found_Slices = request.values.get('Found_Slices')
                    if 'Not_Found_Slices' in request.values:
                        row.Not_Found_Slices = request.values.get('Not_Found_Slices')
                    if 'Period_Initial_Q' in request.values:
                        row.Period_Initial_Q = request.values.get('Period_Initial_Q')
                    if 'Period_Increase' in request.values:
                        row.Period_Increase = request.values.get('Period_Increase')
                    if 'Period_Increase_Count' in request.values:
                        row.Period_Increase_Count = request.values.get('Period_Increase_Count')
                    if 'Period_Reduction' in request.values:
                        row.Period_Reduction = request.values.get('Period_Reduction')
                    if 'Period_Reduction_Count' in request.values:
                        row.Period_Reduction_Count = request.values.get('Period_Reduction_Count')
                    if 'Period_Final_Q' in request.values:
                        row.Period_Final_Q = request.values.get('Period_Final_Q')
                    if 'CI_Id' in request.values:
                        row.CI_Id = request.values.get('CI_Id')
                    if 'CC_Id' in request.values:
                        row.CC_Id = request.values.get('CC_Id')
                    if 'Cus_Id' in request.values:
                        row.Cus_Id = request.values.get('Cus_Id')
                    if 'Rat_Id' in request.values:
                        row.Rat_Id = request.values.get('Rat_Id')
                    if 'Typ_Code' in request.values:
                        row.Typ_Code = request.values.get('Typ_Code')
                    if 'Pla_Id' in request.values:
                        row.Pla_Id = request.values.get('Pla_Id')
                    if 'Mean' in request.values:
                        row.Mean = request.values.get('Mean')
                    if 'Variance' in request.values:
                        row.Variance = request.values.get('Variance')
                    if 'StdDev' in request.values:
                        row.StdDev = request.values.get('StdDev')
                    if 'Min' in request.values:
                        row.Min = request.values.get('Min')
                    if 'Max' in request.values:
                        row.Max = request.values.get('Max')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'ST_Use_Per_CU' CU_Id = {id}"
                try:
                    row     = json.loads(row.get_json())
                except:
                    row     = None
            else:
                code    = API_NOT_FOUND
                message = f"Not found ST_Use_Per_CU with CU_Id = {id}"
                row     = None
                db.session.rollback()
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
            db.session.rollback()
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='ST_Use_Per_CU',entities=[row],name=current_app.config['NAME'])

@main.route('/api/delete/ST_Use_Per_CU/<int:id>', methods=['DELETE'])
def api_delete_ST_Use_Per_CU(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = ST_Use_Per_CU()
            query = db.session.query(ST_Use_Per_CU)
            
            # First loop mandatory for row population ----------------------
            # detected primary key field: c.field
            query       = query.filter(ST_Use_Per_CU.CU_Id == id_values[id_counter])
            id_counter +=1
            # detected primary key field: c.field
            query       = query.filter(ST_Use_Per_CU.From == id_values[id_counter])
            id_counter +=1
            # detected primary key field: c.field
            query       = query.filter(ST_Use_Per_CU.To == id_values[id_counter])
            id_counter +=1
            # --------------------------------------------------------------
            row = query.one_or_none()

            if row is not None:
                db.session.delete(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                message = f"Deleted 'ST_Use_Per_CU' CU_Id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found 'ST_Use_Per_CU' with CU_Id = {id}"
                row     = None        
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='ST_Use_Per_CU',entities=[],name=current_app.config['NAME'])

# ======================================================================# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2021-12-13 19:33:35
# =============================================================================
# gen_views.py:32 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_st_use_per_type.py
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:40.938170
# ======================================================================        
# gen_views_form.html:AG 2021-12-13 19:33:40.938185
@main.route('/forms/ST_Use_Per_Type', methods=['GET', 'POST'])
@login_required

def forms_ST_Use_Per_Type():
    """ Form handling function for table ST_Use_Per_Type """
    logger.debug('forms_ST_Use_Per_Type(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='ST_Use_Per_Type'
    class_name='st_use_per_type'
    template_name='ST_Use_Per_Type'
    sharding=False
    Typ_Code  =  request.args.get('Typ_Code',0,type=int)
    Cus_Id  =  request.args.get('Cus_Id',0,type=int)
    Pla_Id  =  request.args.get('Pla_Id',0,type=int)
    CC_Id  =  request.args.get('CC_Id',0,type=int)
    CI_Id  =  request.args.get('CI_Id',0,type=int)
    Year  =  request.args.get('Year',0,type=int)
    Month  =  request.args.get('Month',0,type=int)
    
    # Ensures DB Data is commited prior main query
    try:
        db.session.commit()
    except:
        db.session.rollback()
    row =  st_use_per_type.query.filter(st_use_per_type.Typ_Code == Typ_Code,st_use_per_type.Cus_Id == Cus_Id,st_use_per_type.Pla_Id == Pla_Id,st_use_per_type.CC_Id == CC_Id,st_use_per_type.CI_Id == CI_Id,st_use_per_type.Year == Year,st_use_per_type.Month == Month).first()
    if row is None:
        row=st_use_per_type()
        session['is_new_row']=True
    session['data'] =  {  'Typ_Code':row.Typ_Code, 'Cus_Id':row.Cus_Id, 'Pla_Id':row.Pla_Id, 'CC_Id':row.CC_Id, 'CI_Id':row.CI_Id, 'Year':row.Year, 'Month':row.Month, 'Count':row.Count, 'Mean':row.Mean, 'Variance':row.Variance, 'StdDev':row.StdDev, 'Min':row.Min, 'Max':row.Max }
    
    form = frm_st_use_per_type()
    
    # Actual Form activation here
    if form.validate_on_submit():
        # Code for SAVE option -----------------------------------------
        if form.submit_Save.data and current_user.role_id > 1:
            row.Typ_Code = form.Typ_Code.data
            row.Cus_Id = form.Cus_Id.data
            row.Pla_Id = form.Pla_Id.data
            row.CC_Id = form.CC_Id.data
            row.CI_Id = form.CI_Id.data
            row.Year = form.Year.data
            row.Month = form.Month.data
            row.Count = form.Count.data
            row.Mean = form.Mean.data
            row.Variance = form.Variance.data
            row.StdDev = form.StdDev.data
            row.Min = form.Min.data
            row.Max = form.Max.data
            try:
               session['new_row']=str(row)
               db.session.flush()
               db.session.add(row)
               db.session.commit()
               db.session.flush()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New ST Use Per Type created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>ST Use Per Type Typ_Code,Cus_Id,Pla_Id,CC_Id,CI_Id,Year,Month saved OK</b>')
                   flash(message)
               db.session.flush()
            except Exception as e:
               db.session.rollback()
               db.session.flush()
               message=Markup('ERROR saving ST Use Per Type record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_ST_Use_Per_Type_query'))
        # --------------------------------------------------------------
        # Code for NEW option
        # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.flush()
            row=st_use_per_type()
    
            return redirect(url_for('.forms_ST_Use_Per_Type'))    
    
        # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('ST Use Per Type Record modifications discarded ...')
            flash(message)
        # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>ST Use Per Type data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_'))    
    
    
    form.Typ_Code.data = row.Typ_Code
    form.Cus_Id.data = row.Cus_Id
    form.Pla_Id.data = row.Pla_Id
    form.CC_Id.data = row.CC_Id
    form.CI_Id.data = row.CI_Id
    form.Year.data = row.Year
    form.Month.data = row.Month
    form.Count.data = row.Count
    form.Mean.data = row.Mean
    form.Variance.data = row.Variance
    form.StdDev.data = row.StdDev
    form.Min.data = row.Min
    form.Max.data = row.Max
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_ST_Use_Per_Type(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = []
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('st_use_per_type.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:40.946767
# ======================================================================        
# gen_views_delete.html:AG 2021-12-13 19:33:40.946780
@main.route('/forms/ST_Use_Per_Type_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)

def forms_ST_Use_Per_Type_delete():
    """ Delete record handling function for table ST_Use_Per_Type """
    logger.debug('forms_ST_Use_Per_Type_delete(): Enter')
    Typ_Code  =  request.args.get('Typ_Code',0,type=int)
    Cus_Id  =  request.args.get('Cus_Id',0,type=int)
    Pla_Id  =  request.args.get('Pla_Id',0,type=int)
    CC_Id  =  request.args.get('CC_Id',0,type=int)
    CI_Id  =  request.args.get('CI_Id',0,type=int)
    Year  =  request.args.get('Year',0,type=int)
    Month  =  request.args.get('Month',0,type=int)
    row =  st_use_per_type.query.filter(st_use_per_type.Typ_Code == Typ_Code,st_use_per_type.Cus_Id == Cus_Id,st_use_per_type.Pla_Id == Pla_Id,st_use_per_type.CC_Id == CC_Id,st_use_per_type.CI_Id == CI_Id,st_use_per_type.Year == Year,st_use_per_type.Month == Month).first()

    if row is None:
        row=st_use_per_type()
    session['data'] =  {  'Typ_Code':row.Typ_Code, 'Cus_Id':row.Cus_Id, 'Pla_Id':row.Pla_Id, 'CC_Id':row.CC_Id, 'CI_Id':row.CI_Id, 'Year':row.Year, 'Month':row.Month, 'Count':row.Count, 'Mean':row.Mean, 'Variance':row.Variance, 'StdDev':row.StdDev, 'Min':row.Min, 'Max':row.Max }
                       
    form = frm_st_use_per_type_delete()

    # Tab['has_fks'] False
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.flush()
                db.session.delete(row)
                db.session.commit()
                db.session.flush()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('ST Use Per Type Typ_Code,Cus_Id,Pla_Id,CC_Id,CI_Id,Year,Month deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_ST_Use_Per_Type_delete',Typ_Code=session['data']['Typ_Code'],Cus_Id=session['data']['Cus_Id'],Pla_Id=session['data']['Pla_Id'],CC_Id=session['data']['CC_Id'],CI_Id=session['data']['CI_Id'],Year=session['data']['Year'],Month=session['data']['Month']))    
    
            return redirect(url_for('.select_ST_Use_Per_Type_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_ST_Use_Per_Type_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_ST_Use_Per_Type_query'))    
    
    logger.debug('forms_ST_Use_Per_Type_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('st_use_per_type_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: ST_Use_Per_Type
# class_name: st_use_per_type
# is shardened: None
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:40.965023
# ======================================================================

# gen_views_select_query.html:AG 2021-12-13 19:33:40.965037        
@main.route('/select/ST_Use_Per_Type_Query', methods=['GET','POST'])
@login_required

def select_ST_Use_Per_Type_query():
    """ Select rows handling function for table 'ST_Use_Per_Type' """
    logger.debug('select_ST_Use_Per_Type_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='ST_Use_Per_Type'
    class_name='st_use_per_type'
    template_name='ST_Use_Per_Type'
    sharding=False


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)

    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='st_use_per_type',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='st_use_per_type',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='st_use_per_type',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='st_use_per_type'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    Typ_Code =  request.args.get('Typ_Code',None,type=str)
    Cus_Id =  request.args.get('Cus_Id',None,type=str)
    Pla_Id =  request.args.get('Pla_Id',None,type=str)
    CC_Id =  request.args.get('CC_Id',None,type=str)
    CI_Id =  request.args.get('CI_Id',None,type=str)
    Year =  request.args.get('Year',None,type=str)
    Month =  request.args.get('Month',None,type=str)
    Count =  request.args.get('Count',None,type=str)
    Mean =  request.args.get('Mean',None,type=str)
    Variance =  request.args.get('Variance',None,type=str)
    StdDev =  request.args.get('StdDev',None,type=str)
    Min =  request.args.get('Min',None,type=str)
    Max =  request.args.get('Max',None,type=str)
    
    # Build default query all fields from table
    

    if Typ_Code is not None and len(Typ_Code)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Typ_Code:Typ_Code',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Typ_Code
                )
    
    
    if Cus_Id is not None and len(Cus_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Cus_Id:Cus_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Cus_Id
                )
    
    
    if Pla_Id is not None and len(Pla_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Pla_Id:Pla_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Pla_Id
                )
    
    
    if CC_Id is not None and len(CC_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CC_Id:CC_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CC_Id
                )
    
    
    if CI_Id is not None and len(CI_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CI_Id:CI_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CI_Id
                )
    
    
    if Year is not None and len(Year)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Year:Year',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Year
                )
    
    
    if Month is not None and len(Month)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Month:Month',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Month
                )
    
    
    if Count is not None and len(Count)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Count:Count',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Count
                )
    
    
    if Mean is not None and len(Mean)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Mean:Mean',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Mean
                )
    
    
    if Variance is not None and len(Variance)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Variance:Variance',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Variance
                )
    
    
    if StdDev is not None and len(StdDev)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='StdDev:StdDev',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%StdDev
                )
    
    
    if Min is not None and len(Min)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Min:Min',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Min
                )
    
    
    if Max is not None and len(Max)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Max:Max',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Max
                )
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['Typ_Code', 'Cus_Id', 'Pla_Id', 'CC_Id', 'CI_Id', 'Year', 'Month', 'Count', 'Mean', 'Variance', 'StdDev', 'Min', 'Max']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['Typ_Code', 'Cus_Id', 'Pla_Id', 'CC_Id', 'CI_Id', 'Year', 'Month', 'Count', 'Mean', 'Variance', 'StdDev', 'Min', 'Max'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'Typ_Code':
                if value is not None:
                    query = query.filter_by(Typ_Code=value)
            if field == 'Cus_Id':
                if value is not None:
                    query = query.filter_by(Cus_Id=value)
            if field == 'Pla_Id':
                if value is not None:
                    query = query.filter_by(Pla_Id=value)
            if field == 'CC_Id':
                if value is not None:
                    query = query.filter_by(CC_Id=value)
            if field == 'CI_Id':
                if value is not None:
                    query = query.filter_by(CI_Id=value)
            if field == 'Year':
                if value is not None:
                    query = query.filter_by(Year=value)
            if field == 'Month':
                if value is not None:
                    query = query.filter_by(Month=value)
            if field == 'Count':
                if value is not None:
                    query = query.filter_by(Count=value)
            if field == 'Mean':
                if value is not None:
                    query = query.filter_by(Mean=value)
            if field == 'Variance':
                if value is not None:
                    query = query.filter_by(Variance=value)
            if field == 'StdDev':
                if value is not None:
                    query = query.filter_by(StdDev=value)
            if field == 'Min':
                if value is not None:
                    query = query.filter_by(Min=value)
            if field == 'Max':
                if value is not None:
                    query = query.filter_by(Max=value)
            
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:41.001457
# ======================================================================
# gen_views_api.html:AG 2021-12-13 19:33:41.001472
# table_name: ST_Use_Per_Type
# class_name: st_use_per_type
# is shardened: None
# Table 'ST_Use_Per_Type' keys = Typ_Code,Cus_Id,Pla_Id,CC_Id,CI_Id,Year,Month
# Errors: None
# PK field found 'Typ_Code' db.String(10)
# Errors: None
# PK field found 'Cus_Id' db.Integer
# Errors: None
# PK field found 'Pla_Id' db.Integer
# Errors: None
# PK field found 'CC_Id' db.Integer
# Errors: None
# PK field found 'CI_Id' db.Integer
# Errors: None
# PK field found 'Year' db.Integer
# Errors: None
# PK field found 'Month' db.Integer
# ST_Use_Per_Type id field is 'ST_Use_Per_Type.Typ_Code' of type ''

@main.route('/api/get/ST_Use_Per_Type'     , methods=['GET'])
@main.route('/api/get/ST_Use_Per_Type/<id>', methods=['GET'])
def api_get_ST_Use_Per_Type(id=None):
    code       = API_OK
    message    = 'OK'
    rows       = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        #response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        #response.headers['Pragma']        = 'no-cache'
        try:
            id_counter = 0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values=[id]
            # Codigo para un solo campo de id
            # chequear si marcado explicitamente
            db.session.flush()
            query = db.session.query(ST_Use_Per_Type)
            if id is not None:
                query = query.filter(ST_Use_Per_Type.Typ_Code == id_values[id_counter])
                rows = query.one_or_none()
            else:
                if request.args is not None and len(request.args):
                    if 'Typ_Code' in request.args:
                        query = query.filter(ST_Use_Per_Type.Typ_Code == request.args.get('Typ_Code'))
                    if 'Cus_Id' in request.args:
                        query = query.filter(ST_Use_Per_Type.Cus_Id == request.args.get('Cus_Id'))
                    if 'Pla_Id' in request.args:
                        query = query.filter(ST_Use_Per_Type.Pla_Id == request.args.get('Pla_Id'))
                    if 'CC_Id' in request.args:
                        query = query.filter(ST_Use_Per_Type.CC_Id == request.args.get('CC_Id'))
                    if 'CI_Id' in request.args:
                        query = query.filter(ST_Use_Per_Type.CI_Id == request.args.get('CI_Id'))
                    if 'Year' in request.args:
                        query = query.filter(ST_Use_Per_Type.Year == request.args.get('Year'))
                    if 'Month' in request.args:
                        query = query.filter(ST_Use_Per_Type.Month == request.args.get('Month'))
                    if 'Count' in request.args:
                        query = query.filter(ST_Use_Per_Type.Count == request.args.get('Count'))
                    if 'Mean' in request.args:
                        query = query.filter(ST_Use_Per_Type.Mean == request.args.get('Mean'))
                    if 'Variance' in request.args:
                        query = query.filter(ST_Use_Per_Type.Variance == request.args.get('Variance'))
                    if 'StdDev' in request.args:
                        query = query.filter(ST_Use_Per_Type.StdDev == request.args.get('StdDev'))
                    if 'Min' in request.args:
                        query = query.filter(ST_Use_Per_Type.Min == request.args.get('Min'))
                    if 'Max' in request.args:
                        query = query.filter(ST_Use_Per_Type.Max == request.args.get('Max'))
                rows = query.all()
            if rows is not None:
                if type(rows) == list:
                    for i in range(len(rows)):
                        rows[i] = json.loads(rows[i].get_json())
                else:
                    rows = [json.loads(rows.get_json())]
            else:
                rows = []
            if len(rows) == 0:
                code = API_NO_DATA
                state = get_api_state(API_NO_DATA)
                
                if id is None:
                    message = f"No 'ST_Use_Per_Type' records found"
                else:
                    message = f"No 'ST_Use_Per_Type.Typ_Code' = {id} record found"
                
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='ST_Use_Per_Type',entities=rows,name=current_app.config['NAME'])

@main.route('/api/post/ST_Use_Per_Type', methods=['POST'])
def api_post_ST_Use_Per_Type():
    code    = API_OK
    message = 'OK'
    row     = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            row = ST_Use_Per_Type()
            # Populates row from json, if ID=int:autoincrement then None
            row.Typ_Code = request.json.get('Typ_Code',None)
            row.Cus_Id = request.json.get('Cus_Id',1)
            row.Pla_Id = request.json.get('Pla_Id',1)
            row.CC_Id = request.json.get('CC_Id',1)
            row.CI_Id = request.json.get('CI_Id',1)
            row.Year = request.json.get('Year',None)
            row.Month = request.json.get('Month',None)
            row.Count = request.json.get('Count',0)
            row.Mean = request.json.get('Mean',0.000000000000)
            row.Variance = request.json.get('Variance',0.000000000000)
            row.StdDev = request.json.get('StdDev',0.000000000000)
            row.Min = request.json.get('Min',0.000000000000)
            row.Max = request.json.get('Max',0.000000000000)
            # ----------------------------------------------------------
            db.session.add(row)
            db.session.flush()
            db.session.commit()
            db.session.flush()
            db.session.refresh(row)
            db.session.flush()
            message = f"Created 'ST_Use_Per_Type' Typ_Code = {row.Typ_Code}"
            row     = json.loads(row.get_json())
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
    else:
        code    = API_ERROR
        message = 'Unauthorized request'            
    return get_api_response(code=code,message=message,kind='ST_Use_Per_Type',entities=[row],name=current_app.config['NAME'])

@main.route('/api/put/ST_Use_Per_Type/<id>', methods=['PUT'])
def api_put_ST_Use_Per_Type(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = ST_Use_Per_Type()
            query = db.session.query(ST_Use_Per_Type)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(ST_Use_Per_Type.Typ_Code == id_values[id_counter])
            id_counter += 1
            query = query.filter(ST_Use_Per_Type.Cus_Id == id_values[id_counter])
            id_counter += 1
            query = query.filter(ST_Use_Per_Type.Pla_Id == id_values[id_counter])
            id_counter += 1
            query = query.filter(ST_Use_Per_Type.CC_Id == id_values[id_counter])
            id_counter += 1
            query = query.filter(ST_Use_Per_Type.CI_Id == id_values[id_counter])
            id_counter += 1
            query = query.filter(ST_Use_Per_Type.Year == id_values[id_counter])
            id_counter += 1
            query = query.filter(ST_Use_Per_Type.Month == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                if 'Count' in request.json.keys():
                    row.Count = request.json.get('Count')
                if 'Mean' in request.json.keys():
                    row.Mean = request.json.get('Mean')
                if 'Variance' in request.json.keys():
                    row.Variance = request.json.get('Variance')
                if 'StdDev' in request.json.keys():
                    row.StdDev = request.json.get('StdDev')
                if 'Min' in request.json.keys():
                    row.Min = request.json.get('Min')
                if 'Max' in request.json.keys():
                    row.Max = request.json.get('Max')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'ST_Use_Per_Type' Typ_Code = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found ST_Use_Per_Type with Typ_Code = {id}"
                row     = None
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='ST_Use_Per_Type',entities=[row],name=current_app.config['NAME'])

@main.route('/api/patch/ST_Use_Per_Type/<id>', methods=['PATCH'])
def api_patch_ST_Use_Per_Type(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = ST_Use_Per_Type()
            query = db.session.query(ST_Use_Per_Type)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(ST_Use_Per_Type.Typ_Code == id_values[id_counter])
            id_counter += 1
            query = query.filter(ST_Use_Per_Type.Cus_Id == id_values[id_counter])
            id_counter += 1
            query = query.filter(ST_Use_Per_Type.Pla_Id == id_values[id_counter])
            id_counter += 1
            query = query.filter(ST_Use_Per_Type.CC_Id == id_values[id_counter])
            id_counter += 1
            query = query.filter(ST_Use_Per_Type.CI_Id == id_values[id_counter])
            id_counter += 1
            query = query.filter(ST_Use_Per_Type.Year == id_values[id_counter])
            id_counter += 1
            query = query.filter(ST_Use_Per_Type.Month == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                db.session.rollback()
                if request.values is not None and len(request.values):
                    if 'Count' in request.values:
                        row.Count = request.values.get('Count')
                    if 'Mean' in request.values:
                        row.Mean = request.values.get('Mean')
                    if 'Variance' in request.values:
                        row.Variance = request.values.get('Variance')
                    if 'StdDev' in request.values:
                        row.StdDev = request.values.get('StdDev')
                    if 'Min' in request.values:
                        row.Min = request.values.get('Min')
                    if 'Max' in request.values:
                        row.Max = request.values.get('Max')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'ST_Use_Per_Type' Typ_Code = {id}"
                try:
                    row     = json.loads(row.get_json())
                except:
                    row     = None
            else:
                code    = API_NOT_FOUND
                message = f"Not found ST_Use_Per_Type with Typ_Code = {id}"
                row     = None
                db.session.rollback()
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
            db.session.rollback()
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='ST_Use_Per_Type',entities=[row],name=current_app.config['NAME'])

@main.route('/api/delete/ST_Use_Per_Type/<id>', methods=['DELETE'])
def api_delete_ST_Use_Per_Type(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = ST_Use_Per_Type()
            query = db.session.query(ST_Use_Per_Type)
            
            # First loop mandatory for row population ----------------------
            # detected primary key field: c.field
            query       = query.filter(ST_Use_Per_Type.Typ_Code == id_values[id_counter])
            id_counter +=1
            # detected primary key field: c.field
            query       = query.filter(ST_Use_Per_Type.Cus_Id == id_values[id_counter])
            id_counter +=1
            # detected primary key field: c.field
            query       = query.filter(ST_Use_Per_Type.Pla_Id == id_values[id_counter])
            id_counter +=1
            # detected primary key field: c.field
            query       = query.filter(ST_Use_Per_Type.CC_Id == id_values[id_counter])
            id_counter +=1
            # detected primary key field: c.field
            query       = query.filter(ST_Use_Per_Type.CI_Id == id_values[id_counter])
            id_counter +=1
            # detected primary key field: c.field
            query       = query.filter(ST_Use_Per_Type.Year == id_values[id_counter])
            id_counter +=1
            # detected primary key field: c.field
            query       = query.filter(ST_Use_Per_Type.Month == id_values[id_counter])
            id_counter +=1
            # --------------------------------------------------------------
            row = query.one_or_none()

            if row is not None:
                db.session.delete(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                message = f"Deleted 'ST_Use_Per_Type' Typ_Code = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found 'ST_Use_Per_Type' with Typ_Code = {id}"
                row     = None        
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='ST_Use_Per_Type',entities=[],name=current_app.config['NAME'])

# ======================================================================#-----------------------------------------------------------------------
# gen_views.py:18 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_trace_202003.py
# NOTE: HARDCODE. TO REMOVE --------------------------------------------
def chk_c000001(*args,**kwargs):
    pass
    
try:
    from emtec.common.interface import *
    from emtec.collector.db.orm_model    import Interface
    from emtec.collector.db.flask_models import interface
except Exception as e:
    print(f'EXCEPTION: {(str(e))}')
#-----------------------------------------------------------------------
# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2020-10-18 20:12:04
# =============================================================================
# gen_views.py:32 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_trace_202003.py
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019)
#  GLVH @ 2020-10-18 20:12:08.975559
# ======================================================================
        
# gen_views_form.html:AG 2020-10-18 20:12:08.975575
@main.route('/forms/Trace_202003', methods=['GET', 'POST'])
@login_required

def forms_Trace_202003():
    """ Form handling function for table Trace_202003 """
    logger.debug('forms_Trace_202003(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Trace_202003'
    class_name='trace_202003'
    template_name='Trace_202003'
    sharding=False

    if 'COLLECTOR_CIT_SHARDING' in current_app.config: 
        sharding=current_app.config['COLLECTOR_CIT_SHARDING']
    if sharding:
        trace_202003.set_shard(suffix)
        flash("Using shardened table: %s"%trace_202003.__table__.name) 

    ID  =  request.args.get('ID',0,type=int)
    
    row =  trace_202003.query.filter(trace_202003.ID == ID).first()
    if row is None:
        row=trace_202003()
        session['is_new_row']=True
    session['data'] =  {  'ID':row.ID, 'LINE':row.LINE }
    
    form = frm_trace_202003()
    
    # Actual Form activation here
    if form.validate_on_submit():
    # Code for SAVE option
        if form.submit_Save.data and current_user.role_id > 1:
    
            row.LINE = form.LINE.data  
            try:
               session['new_row']=str(row)
               db.session.close()
               db.session.add(row)
               db.session.commit()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New Trace_202003 created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>Trace_202003 ID saved OK</b>')
                   flash(message)
               db.session.close()
            except Exception as e:
               db.session.rollback()
               db.session.close()
               message=Markup('ERROR saving Trace_202003 record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_Trace_202003_query'))    
    # Code for NEW option
    # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.close()
            row=trace_202003()
    
            return redirect(url_for('.forms_Trace_202003',ID=row.ID))
    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('Trace_202003 Record modifications discarded ...')
            flash(message)
    # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>Trace_202003 data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_Trace_202003',ID=row.ID))
    
    
    form.LINE.data = row.LINE
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_Trace_202003(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = []
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('trace_202003.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019)
#  GLVH @ 2020-10-18 20:12:08.984985
# ======================================================================
        
# gen_views_delete.html:AG 2020-10-18 20:12:08.985001
@main.route('/forms/Trace_202003_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)
@admin_required
def forms_Trace_202003_delete():
    """ Delete record handling function for table Trace_202003 """
    logger.debug('forms_Trace_202003_delete(): Enter')
    ID  =  request.args.get('ID',0,type=int)
    row =  trace_202003.query.filter(trace_202003.ID == ID).first()

    if row is None:
        row=trace_202003()
    session['data'] =  {  'ID':row.ID, 'LINE':row.LINE }
                       
    form = frm_trace_202003_delete()

    # Tab['has_fks'] False
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.close()
                db.session.delete(row)
                db.session.commit()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('Trace_202003 ID deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_Trace_202003_delete',ID=session['data']['ID']))    
    
            return redirect(url_for('.select_Trace_202003_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_Trace_202003_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_Trace_202003_query'))    
    
    logger.debug('forms_Trace_202003_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('trace_202003_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: Trace_202003
# class_name: trace_202003
# is shardened: True
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019)
#  GLVH @ 2020-10-18 20:12:09.006486
# ======================================================================


# gen_views_select_query.html:AG 2020-10-18 20:12:09.006502        
@main.route('/select/Trace_202003_Query', methods=['GET','POST'])
@login_required
@admin_required
def select_Trace_202003_query():
    """ Select rows handling function for table 'Trace_202003' """
    logger.debug('select_Trace_202003_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Trace_202003'
    class_name='trace_202003'
    template_name='Trace_202003'
    sharding=False

    if 'COLLECTOR_CIT_SHARDING' in current_app.config: 
        sharding=current_app.config['COLLECTOR_CIT_SHARDING']
    if sharding:
        trace_202003.set_shard(suffix)
        flash("Using shardened table: %s"%trace_202003.__table__.name) 


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)
    logger.debug("%s: COLLECTOR_CIT_SHARDING   = %s",__name__,current_app.config['COLLECTOR_CIT_SHARDING'])
    logger.debug("%s: sharding                 = %s",__name__,sharding)
    logger.debug("%s: suffix                   = %s",__name__,suffix)
    logger.debug("%s: table_name               = %s",__name__,table_name)
    logger.debug("%s: class_name               = %s",__name__,class_name)
    logger.debug("%s: class_name              = %s",__name__,class_name)
    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='trace_202003',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='trace_202003',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='trace_202003',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='trace_202003'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    ID =  request.args.get('ID',None,type=str)
    LINE =  request.args.get('LINE',None,type=str)
    
    # Build default query all fields from table
    

    if ID is not None and len(ID)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='ID:ID',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%ID
                )
    
    
    if LINE is not None and len(LINE)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='LINE:LINE',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%LINE
                )
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['ID', 'LINE']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['ID', 'LINE'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'ID':
                if value is not None:
                    query = query.filter_by(ID=value)
            if field == 'LINE':
                if value is not None:
                    query = query.filter_by(LINE=value)
            
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   #-----------------------------------------------------------------------
# gen_views.py:18 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_trace_202101.py
# NOTE: HARDCODE. TO REMOVE --------------------------------------------
def chk_c000001(*args,**kwargs):
    pass
    
try:
    from emtec.common.interface import *
    from emtec.collector.db.orm_model    import Interface
    from emtec.collector.db.flask_models import interface
except Exception as e:
    print(f'EXCEPTION: {(str(e))}')
#-----------------------------------------------------------------------
# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2020-10-18 20:12:04
# =============================================================================
# gen_views.py:32 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_trace_202101.py
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019)
#  GLVH @ 2020-10-18 20:12:09.106447
# ======================================================================
        
# gen_views_form.html:AG 2020-10-18 20:12:09.106462
@main.route('/forms/Trace_202101', methods=['GET', 'POST'])
@login_required

def forms_Trace_202101():
    """ Form handling function for table Trace_202101 """
    logger.debug('forms_Trace_202101(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Trace_202101'
    class_name='trace_202101'
    template_name='Trace_202101'
    sharding=False

    if 'COLLECTOR_CIT_SHARDING' in current_app.config: 
        sharding=current_app.config['COLLECTOR_CIT_SHARDING']
    if sharding:
        trace_202101.set_shard(suffix)
        flash("Using shardened table: %s"%trace_202101.__table__.name) 

    ID  =  request.args.get('ID',0,type=int)
    
    row =  trace_202101.query.filter(trace_202101.ID == ID).first()
    if row is None:
        row=trace_202101()
        session['is_new_row']=True
    session['data'] =  {  'ID':row.ID, 'LINE':row.LINE }
    
    form = frm_trace_202101()
    
    # Actual Form activation here
    if form.validate_on_submit():
    # Code for SAVE option
        if form.submit_Save.data and current_user.role_id > 1:
    
            row.LINE = form.LINE.data  
            try:
               session['new_row']=str(row)
               db.session.close()
               db.session.add(row)
               db.session.commit()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New Trace_202101 created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>Trace_202101 ID saved OK</b>')
                   flash(message)
               db.session.close()
            except Exception as e:
               db.session.rollback()
               db.session.close()
               message=Markup('ERROR saving Trace_202101 record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_Trace_202101_query'))    
    # Code for NEW option
    # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.close()
            row=trace_202101()
    
            return redirect(url_for('.forms_Trace_202101',ID=row.ID))
    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('Trace_202101 Record modifications discarded ...')
            flash(message)
    # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>Trace_202101 data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_Trace_202101',ID=row.ID))
    
    
    form.LINE.data = row.LINE
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_Trace_202101(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = []
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('trace_202101.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019)
#  GLVH @ 2020-10-18 20:12:09.115341
# ======================================================================
        
# gen_views_delete.html:AG 2020-10-18 20:12:09.115356
@main.route('/forms/Trace_202101_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)
@admin_required
def forms_Trace_202101_delete():
    """ Delete record handling function for table Trace_202101 """
    logger.debug('forms_Trace_202101_delete(): Enter')
    ID  =  request.args.get('ID',0,type=int)
    row =  trace_202101.query.filter(trace_202101.ID == ID).first()

    if row is None:
        row=trace_202101()
    session['data'] =  {  'ID':row.ID, 'LINE':row.LINE }
                       
    form = frm_trace_202101_delete()

    # Tab['has_fks'] False
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.close()
                db.session.delete(row)
                db.session.commit()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('Trace_202101 ID deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_Trace_202101_delete',ID=session['data']['ID']))    
    
            return redirect(url_for('.select_Trace_202101_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_Trace_202101_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_Trace_202101_query'))    
    
    logger.debug('forms_Trace_202101_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('trace_202101_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: Trace_202101
# class_name: trace_202101
# is shardened: True
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019)
#  GLVH @ 2020-10-18 20:12:09.141449
# ======================================================================


# gen_views_select_query.html:AG 2020-10-18 20:12:09.141464        
@main.route('/select/Trace_202101_Query', methods=['GET','POST'])
@login_required
@admin_required
def select_Trace_202101_query():
    """ Select rows handling function for table 'Trace_202101' """
    logger.debug('select_Trace_202101_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Trace_202101'
    class_name='trace_202101'
    template_name='Trace_202101'
    sharding=False

    if 'COLLECTOR_CIT_SHARDING' in current_app.config: 
        sharding=current_app.config['COLLECTOR_CIT_SHARDING']
    if sharding:
        trace_202101.set_shard(suffix)
        flash("Using shardened table: %s"%trace_202101.__table__.name) 


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)
    logger.debug("%s: COLLECTOR_CIT_SHARDING   = %s",__name__,current_app.config['COLLECTOR_CIT_SHARDING'])
    logger.debug("%s: sharding                 = %s",__name__,sharding)
    logger.debug("%s: suffix                   = %s",__name__,suffix)
    logger.debug("%s: table_name               = %s",__name__,table_name)
    logger.debug("%s: class_name               = %s",__name__,class_name)
    logger.debug("%s: class_name              = %s",__name__,class_name)
    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='trace_202101',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='trace_202101',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='trace_202101',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='trace_202101'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    ID =  request.args.get('ID',None,type=str)
    LINE =  request.args.get('LINE',None,type=str)
    
    # Build default query all fields from table
    

    if ID is not None and len(ID)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='ID:ID',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%ID
                )
    
    
    if LINE is not None and len(LINE)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='LINE:LINE',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%LINE
                )
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['ID', 'LINE']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['ID', 'LINE'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'ID':
                if value is not None:
                    query = query.filter_by(ID=value)
            if field == 'LINE':
                if value is not None:
                    query = query.filter_by(LINE=value)
            
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   # =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2021-12-13 19:33:35
# =============================================================================
# gen_views.py:32 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_trace.py
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:41.102083
# ======================================================================        
# gen_views_form.html:AG 2021-12-13 19:33:41.102117
@main.route('/forms/Trace', methods=['GET', 'POST'])
@login_required

def forms_Trace():
    """ Form handling function for table Trace """
    logger.debug('forms_Trace(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Trace'
    class_name='trace'
    template_name='Trace'
    sharding=False
    ID  =  request.args.get('ID',0,type=int)
    
    # Ensures DB Data is commited prior main query
    try:
        db.session.commit()
    except:
        db.session.rollback()
    row =  trace.query.filter(trace.ID == ID).first()
    if row is None:
        row=trace()
        session['is_new_row']=True
    session['data'] =  {  'ID':row.ID, 'LINE':row.LINE }
    
    form = frm_trace()
    
    # Actual Form activation here
    if form.validate_on_submit():
        # Code for SAVE option -----------------------------------------
        if form.submit_Save.data and current_user.role_id > 1:
            
            row.LINE = form.LINE.data
            try:
               session['new_row']=str(row)
               db.session.flush()
               db.session.add(row)
               db.session.commit()
               db.session.flush()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New Trace line created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>Trace line ID saved OK</b>')
                   flash(message)
               db.session.flush()
            except Exception as e:
               db.session.rollback()
               db.session.flush()
               message=Markup('ERROR saving Trace line record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_Trace_query'))
        # --------------------------------------------------------------
        # Code for NEW option
        # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.flush()
            row=trace()
    
            return redirect(url_for('.forms_Trace',ID=row.ID))
    
        # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('Trace line Record modifications discarded ...')
            flash(message)
        # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>Trace line data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_Trace',ID=row.ID))
    
    
    form.LINE.data = row.LINE
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_Trace(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = []
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('trace.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:41.111300
# ======================================================================        
# gen_views_delete.html:AG 2021-12-13 19:33:41.111314
@main.route('/forms/Trace_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)
@admin_required
def forms_Trace_delete():
    """ Delete record handling function for table Trace """
    logger.debug('forms_Trace_delete(): Enter')
    ID  =  request.args.get('ID',0,type=int)
    row =  trace.query.filter(trace.ID == ID).first()

    if row is None:
        row=trace()
    session['data'] =  {  'ID':row.ID, 'LINE':row.LINE }
                       
    form = frm_trace_delete()

    # Tab['has_fks'] False
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.flush()
                db.session.delete(row)
                db.session.commit()
                db.session.flush()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('Trace line ID deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_Trace_delete',ID=session['data']['ID']))    
    
            return redirect(url_for('.select_Trace_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_Trace_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_Trace_query'))    
    
    logger.debug('forms_Trace_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('trace_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: Trace
# class_name: trace
# is shardened: None
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:41.132162
# ======================================================================

# gen_views_select_query.html:AG 2021-12-13 19:33:41.132176        
@main.route('/select/Trace_Query', methods=['GET','POST'])
@login_required
@admin_required
def select_Trace_query():
    """ Select rows handling function for table 'Trace' """
    logger.debug('select_Trace_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Trace'
    class_name='trace'
    template_name='Trace'
    sharding=False


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)

    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='trace',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='trace',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='trace',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='trace'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    ID =  request.args.get('ID',None,type=str)
    LINE =  request.args.get('LINE',None,type=str)
    
    # Build default query all fields from table
    

    if ID is not None and len(ID)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='ID:ID',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%ID
                )
    
    
    if LINE is not None and len(LINE)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='LINE:LINE',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%LINE
                )
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['ID', 'LINE']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['ID', 'LINE'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'ID':
                if value is not None:
                    query = query.filter_by(ID=value)
            if field == 'LINE':
                if value is not None:
                    query = query.filter_by(LINE=value)
            
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:41.162953
# ======================================================================
# gen_views_api.html:AG 2021-12-13 19:33:41.162968
# table_name: Trace
# class_name: trace
# is shardened: None
# Table 'Trace' keys = ID
# Errors: None
# ID field found 'ID' auto_increment db.Integer
# Trace id field is 'Trace.ID' of type 'int:'

@main.route('/api/get/Trace'     , methods=['GET'])
@main.route('/api/get/Trace/<int:id>', methods=['GET'])
def api_get_Trace(id=None):
    code       = API_OK
    message    = 'OK'
    rows       = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        #response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        #response.headers['Pragma']        = 'no-cache'
        try:
            id_counter = 0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values=[id]
            # Codigo para un solo campo de id
            # chequear si marcado explicitamente
            db.session.flush()
            query = db.session.query(Trace)
            if id is not None:
                query = query.filter(Trace.ID == id_values[id_counter])
                rows = query.one_or_none()
            else:
                if request.args is not None and len(request.args):
                    if 'ID' in request.args:
                        query = query.filter(Trace.ID == request.args.get('ID'))
                    if 'LINE' in request.args:
                        query = query.filter(Trace.LINE == request.args.get('LINE'))
                rows = query.all()
            if rows is not None:
                if type(rows) == list:
                    for i in range(len(rows)):
                        rows[i] = json.loads(rows[i].get_json())
                else:
                    rows = [json.loads(rows.get_json())]
            else:
                rows = []
            if len(rows) == 0:
                code = API_NO_DATA
                state = get_api_state(API_NO_DATA)
                
                if id is None:
                    message = f"No 'Trace' records found"
                else:
                    message = f"No 'Trace.ID' = {id} record found"
                
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Trace',entities=rows,name=current_app.config['NAME'])

@main.route('/api/post/Trace', methods=['POST'])
def api_post_Trace():
    code    = API_OK
    message = 'OK'
    row     = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            row = Trace()
            # Populates row from json, if ID=int:autoincrement then None
            row.ID = None
            row.LINE = request.json.get('LINE',None)
            # ----------------------------------------------------------
            db.session.add(row)
            db.session.flush()
            db.session.commit()
            db.session.flush()
            db.session.refresh(row)
            db.session.flush()
            message = f"Created 'Trace' ID = {row.ID}"
            row     = json.loads(row.get_json())
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
    else:
        code    = API_ERROR
        message = 'Unauthorized request'            
    return get_api_response(code=code,message=message,kind='Trace',entities=[row],name=current_app.config['NAME'])

@main.route('/api/put/Trace/<int:id>', methods=['PUT'])
def api_put_Trace(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Trace()
            query = db.session.query(Trace)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Trace.ID == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                if 'LINE' in request.json.keys():
                    row.LINE = request.json.get('LINE')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Trace' ID = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found Trace with ID = {id}"
                row     = None
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Trace',entities=[row],name=current_app.config['NAME'])

@main.route('/api/patch/Trace/<int:id>', methods=['PATCH'])
def api_patch_Trace(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Trace()
            query = db.session.query(Trace)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Trace.ID == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                db.session.rollback()
                if request.values is not None and len(request.values):
                    if 'LINE' in request.values:
                        row.LINE = request.values.get('LINE')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Trace' ID = {id}"
                try:
                    row     = json.loads(row.get_json())
                except:
                    row     = None
            else:
                code    = API_NOT_FOUND
                message = f"Not found Trace with ID = {id}"
                row     = None
                db.session.rollback()
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
            db.session.rollback()
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Trace',entities=[row],name=current_app.config['NAME'])

@main.route('/api/delete/Trace/<int:id>', methods=['DELETE'])
def api_delete_Trace(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Trace()
            query = db.session.query(Trace)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Trace.ID == id)
            # --------------------------------------------------------------
            row = query.one_or_none()

            if row is not None:
                db.session.delete(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                message = f"Deleted 'Trace' ID = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found 'Trace' with ID = {id}"
                row     = None        
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Trace',entities=[],name=current_app.config['NAME'])

# ======================================================================# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2021-12-13 19:33:35
# =============================================================================
# gen_views.py:32 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_user_resumes.py
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:41.337557
# ======================================================================        
# gen_views_form.html:AG 2021-12-13 19:33:41.337571
@main.route('/forms/User_Resumes', methods=['GET', 'POST'])
@login_required

def forms_User_Resumes():
    """ Form handling function for table User_Resumes """
    logger.debug('forms_User_Resumes(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='User_Resumes'
    class_name='user_resumes'
    template_name='User_Resumes'
    sharding=False
    User_Id  =  request.args.get('User_Id',0,type=int)
    CR_Date_From  =  request.args.get('CR_Date_From',0,type=int)
    CR_Date_To  =  request.args.get('CR_Date_To',0,type=int)
    CIT_Status  =  request.args.get('CIT_Status',0,type=int)
    Cur_Code  =  request.args.get('Cur_Code',0,type=int)
    CU_Id  =  request.args.get('CU_Id',0,type=int)
    CI_Id  =  request.args.get('CI_Id',0,type=int)
    
    # Ensures DB Data is commited prior main query
    try:
        db.session.commit()
    except:
        db.session.rollback()
    row =  user_resumes.query.filter(user_resumes.User_Id == User_Id,user_resumes.CR_Date_From == CR_Date_From,user_resumes.CR_Date_To == CR_Date_To,user_resumes.CIT_Status == CIT_Status,user_resumes.Cur_Code == Cur_Code,user_resumes.CU_Id == CU_Id,user_resumes.CI_Id == CI_Id).first()
    if row is None:
        row=user_resumes()
        session['is_new_row']=True
    session['data'] =  {  'User_Id':row.User_Id, 'Cus_Id':row.Cus_Id, 'CR_Date_From':row.CR_Date_From, 'CR_Date_To':row.CR_Date_To, 'CIT_Status':row.CIT_Status, 'Cur_Code':row.Cur_Code, 'CU_Id':row.CU_Id, 'CIT_Count':row.CIT_Count, 'CIT_Quantity':row.CIT_Quantity, 'CIT_Generation':row.CIT_Generation, 'CI_CC_Id':row.CI_CC_Id, 'CU_Operation':row.CU_Operation, 'Typ_Code':row.Typ_Code, 'CC_Cur_Code':row.CC_Cur_Code, 'CI_Id':row.CI_Id, 'Rat_Id':row.Rat_Id, 'Rat_Price':row.Rat_Price, 'Rat_MU_Code':row.Rat_MU_Code, 'Rat_Cur_Code':row.Rat_Cur_Code, 'Rat_Period':row.Rat_Period, 'Rat_Hourly':row.Rat_Hourly, 'Rat_Daily':row.Rat_Daily, 'Rat_Monthly':row.Rat_Monthly, 'CR_Quantity':row.CR_Quantity, 'CR_Quantity_at_Rate':row.CR_Quantity_at_Rate, 'CC_XR':row.CC_XR, 'CR_Cur_XR':row.CR_Cur_XR, 'CR_ST_at_Rate_Cur':row.CR_ST_at_Rate_Cur, 'CR_ST_at_CC_Cur':row.CR_ST_at_CC_Cur, 'CR_ST_at_Cur':row.CR_ST_at_Cur, 'Cus_Name':row.Cus_Name, 'CI_Name':row.CI_Name, 'CU_Description':row.CU_Description, 'CC_Description':row.CC_Description, 'Rat_Period_Description':row.Rat_Period_Description, 'CC_Code':row.CC_Code, 'Pla_Id':row.Pla_Id, 'Pla_Name':row.Pla_Name }
    
    form = frm_user_resumes()
    
    # Actual Form activation here
    if form.validate_on_submit():
        # Code for SAVE option -----------------------------------------
        if form.submit_Save.data and current_user.role_id > 1:
            row.User_Id = form.User_Id.data
            row.Cus_Id = form.Cus_Id.data
            row.CR_Date_From = form.CR_Date_From.data
            row.CR_Date_To = form.CR_Date_To.data
            row.CIT_Status = form.CIT_Status.data
            row.Cur_Code = form.Cur_Code.data
            row.CU_Id = form.CU_Id.data
            row.CIT_Count = form.CIT_Count.data
            row.CIT_Quantity = form.CIT_Quantity.data
            row.CIT_Generation = form.CIT_Generation.data
            row.CI_CC_Id = form.CI_CC_Id.data
            row.CU_Operation = form.CU_Operation.data
            row.Typ_Code = form.Typ_Code.data
            row.CC_Cur_Code = form.CC_Cur_Code.data
            row.CI_Id = form.CI_Id.data
            row.Rat_Id = form.Rat_Id.data
            row.Rat_Price = form.Rat_Price.data
            row.Rat_MU_Code = form.Rat_MU_Code.data
            row.Rat_Cur_Code = form.Rat_Cur_Code.data
            row.Rat_Period = form.Rat_Period.data
            row.Rat_Hourly = form.Rat_Hourly.data
            row.Rat_Daily = form.Rat_Daily.data
            row.Rat_Monthly = form.Rat_Monthly.data
            row.CR_Quantity = form.CR_Quantity.data
            row.CR_Quantity_at_Rate = form.CR_Quantity_at_Rate.data
            row.CC_XR = form.CC_XR.data
            row.CR_Cur_XR = form.CR_Cur_XR.data
            row.CR_ST_at_Rate_Cur = form.CR_ST_at_Rate_Cur.data
            row.CR_ST_at_CC_Cur = form.CR_ST_at_CC_Cur.data
            row.CR_ST_at_Cur = form.CR_ST_at_Cur.data
            row.Cus_Name = form.Cus_Name.data
            row.CI_Name = form.CI_Name.data
            row.CU_Description = form.CU_Description.data
            row.CC_Description = form.CC_Description.data
            row.Rat_Period_Description = form.Rat_Period_Description.data
            row.CC_Code = form.CC_Code.data
            row.Pla_Id = form.Pla_Id.data
            row.Pla_Name = form.Pla_Name.data
            try:
               session['new_row']=str(row)
               db.session.flush()
               db.session.add(row)
               db.session.commit()
               db.session.flush()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New User Resume created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>User Resume User_Id,CR_Date_From,CR_Date_To,CIT_Status,Cur_Code,CU_Id,CI_Id saved OK</b>')
                   flash(message)
               db.session.flush()
            except Exception as e:
               db.session.rollback()
               db.session.flush()
               message=Markup('ERROR saving User Resume record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_User_Resumes_query'))
        # --------------------------------------------------------------
        # Code for NEW option
        # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.flush()
            row=user_resumes()
    
            return redirect(url_for('.forms_User_Resumes'))    
    
        # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('User Resume Record modifications discarded ...')
            flash(message)
        # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>User Resume data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_'))    
    
    
    form.User_Id.data = row.User_Id
    form.Cus_Id.data = row.Cus_Id
    form.CR_Date_From.data = row.CR_Date_From
    form.CR_Date_To.data = row.CR_Date_To
    form.CIT_Status.data = row.CIT_Status
    form.Cur_Code.data = row.Cur_Code
    form.CU_Id.data = row.CU_Id
    form.CIT_Count.data = row.CIT_Count
    form.CIT_Quantity.data = row.CIT_Quantity
    form.CIT_Generation.data = row.CIT_Generation
    form.CI_CC_Id.data = row.CI_CC_Id
    form.CU_Operation.data = row.CU_Operation
    form.Typ_Code.data = row.Typ_Code
    form.CC_Cur_Code.data = row.CC_Cur_Code
    form.CI_Id.data = row.CI_Id
    form.Rat_Id.data = row.Rat_Id
    form.Rat_Price.data = row.Rat_Price
    form.Rat_MU_Code.data = row.Rat_MU_Code
    form.Rat_Cur_Code.data = row.Rat_Cur_Code
    form.Rat_Period.data = row.Rat_Period
    form.Rat_Hourly.data = row.Rat_Hourly
    form.Rat_Daily.data = row.Rat_Daily
    form.Rat_Monthly.data = row.Rat_Monthly
    form.CR_Quantity.data = row.CR_Quantity
    form.CR_Quantity_at_Rate.data = row.CR_Quantity_at_Rate
    form.CC_XR.data = row.CC_XR
    form.CR_Cur_XR.data = row.CR_Cur_XR
    form.CR_ST_at_Rate_Cur.data = row.CR_ST_at_Rate_Cur
    form.CR_ST_at_CC_Cur.data = row.CR_ST_at_CC_Cur
    form.CR_ST_at_Cur.data = row.CR_ST_at_Cur
    form.Cus_Name.data = row.Cus_Name
    form.CI_Name.data = row.CI_Name
    form.CU_Description.data = row.CU_Description
    form.CC_Description.data = row.CC_Description
    form.Rat_Period_Description.data = row.Rat_Period_Description
    form.CC_Code.data = row.CC_Code
    form.Pla_Id.data = row.Pla_Id
    form.Pla_Name.data = row.Pla_Name
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_User_Resumes(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = []
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('user_resumes.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:41.347478
# ======================================================================        
# gen_views_delete.html:AG 2021-12-13 19:33:41.347495
@main.route('/forms/User_Resumes_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)

def forms_User_Resumes_delete():
    """ Delete record handling function for table User_Resumes """
    logger.debug('forms_User_Resumes_delete(): Enter')
    User_Id  =  request.args.get('User_Id',0,type=int)
    CR_Date_From  =  request.args.get('CR_Date_From',0,type=int)
    CR_Date_To  =  request.args.get('CR_Date_To',0,type=int)
    CIT_Status  =  request.args.get('CIT_Status',0,type=int)
    Cur_Code  =  request.args.get('Cur_Code',0,type=int)
    CU_Id  =  request.args.get('CU_Id',0,type=int)
    CI_Id  =  request.args.get('CI_Id',0,type=int)
    row =  user_resumes.query.filter(user_resumes.User_Id == User_Id,user_resumes.CR_Date_From == CR_Date_From,user_resumes.CR_Date_To == CR_Date_To,user_resumes.CIT_Status == CIT_Status,user_resumes.Cur_Code == Cur_Code,user_resumes.CU_Id == CU_Id,user_resumes.CI_Id == CI_Id).first()

    if row is None:
        row=user_resumes()
    session['data'] =  {  'User_Id':row.User_Id, 'Cus_Id':row.Cus_Id, 'CR_Date_From':row.CR_Date_From, 'CR_Date_To':row.CR_Date_To, 'CIT_Status':row.CIT_Status, 'Cur_Code':row.Cur_Code, 'CU_Id':row.CU_Id, 'CIT_Count':row.CIT_Count, 'CIT_Quantity':row.CIT_Quantity, 'CIT_Generation':row.CIT_Generation, 'CI_CC_Id':row.CI_CC_Id, 'CU_Operation':row.CU_Operation, 'Typ_Code':row.Typ_Code, 'CC_Cur_Code':row.CC_Cur_Code, 'CI_Id':row.CI_Id, 'Rat_Id':row.Rat_Id, 'Rat_Price':row.Rat_Price, 'Rat_MU_Code':row.Rat_MU_Code, 'Rat_Cur_Code':row.Rat_Cur_Code, 'Rat_Period':row.Rat_Period, 'Rat_Hourly':row.Rat_Hourly, 'Rat_Daily':row.Rat_Daily, 'Rat_Monthly':row.Rat_Monthly, 'CR_Quantity':row.CR_Quantity, 'CR_Quantity_at_Rate':row.CR_Quantity_at_Rate, 'CC_XR':row.CC_XR, 'CR_Cur_XR':row.CR_Cur_XR, 'CR_ST_at_Rate_Cur':row.CR_ST_at_Rate_Cur, 'CR_ST_at_CC_Cur':row.CR_ST_at_CC_Cur, 'CR_ST_at_Cur':row.CR_ST_at_Cur, 'Cus_Name':row.Cus_Name, 'CI_Name':row.CI_Name, 'CU_Description':row.CU_Description, 'CC_Description':row.CC_Description, 'Rat_Period_Description':row.Rat_Period_Description, 'CC_Code':row.CC_Code, 'Pla_Id':row.Pla_Id, 'Pla_Name':row.Pla_Name }
                       
    form = frm_user_resumes_delete()

    # Tab['has_fks'] False
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.flush()
                db.session.delete(row)
                db.session.commit()
                db.session.flush()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('User Resume User_Id,CR_Date_From,CR_Date_To,CIT_Status,Cur_Code,CU_Id,CI_Id deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_User_Resumes_delete',User_Id=session['data']['User_Id'],CR_Date_From=session['data']['CR_Date_From'],CR_Date_To=session['data']['CR_Date_To'],CIT_Status=session['data']['CIT_Status'],Cur_Code=session['data']['Cur_Code'],CU_Id=session['data']['CU_Id'],CI_Id=session['data']['CI_Id']))    
    
            return redirect(url_for('.select_User_Resumes_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_User_Resumes_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_User_Resumes_query'))    
    
    logger.debug('forms_User_Resumes_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('user_resumes_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: User_Resumes
# class_name: user_resumes
# is shardened: None
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:41.368028
# ======================================================================

# gen_views_select_query.html:AG 2021-12-13 19:33:41.368042        
@main.route('/select/User_Resumes_Query', methods=['GET','POST'])
@login_required

def select_User_Resumes_query():
    """ Select rows handling function for table 'User_Resumes' """
    logger.debug('select_User_Resumes_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='User_Resumes'
    class_name='user_resumes'
    template_name='User_Resumes'
    sharding=False


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)

    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='user_resumes',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='user_resumes',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='user_resumes',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='user_resumes'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    User_Id =  request.args.get('User_Id',None,type=str)
    Cus_Id =  request.args.get('Cus_Id',None,type=str)
    CR_Date_From =  request.args.get('CR_Date_From',None,type=str)
    CR_Date_To =  request.args.get('CR_Date_To',None,type=str)
    CIT_Status =  request.args.get('CIT_Status',None,type=str)
    Cur_Code =  request.args.get('Cur_Code',None,type=str)
    CU_Id =  request.args.get('CU_Id',None,type=str)
    CIT_Count =  request.args.get('CIT_Count',None,type=str)
    CIT_Quantity =  request.args.get('CIT_Quantity',None,type=str)
    CIT_Generation =  request.args.get('CIT_Generation',None,type=str)
    CI_CC_Id =  request.args.get('CI_CC_Id',None,type=str)
    CU_Operation =  request.args.get('CU_Operation',None,type=str)
    Typ_Code =  request.args.get('Typ_Code',None,type=str)
    CC_Cur_Code =  request.args.get('CC_Cur_Code',None,type=str)
    CI_Id =  request.args.get('CI_Id',None,type=str)
    Rat_Id =  request.args.get('Rat_Id',None,type=str)
    Rat_Price =  request.args.get('Rat_Price',None,type=str)
    Rat_MU_Code =  request.args.get('Rat_MU_Code',None,type=str)
    Rat_Cur_Code =  request.args.get('Rat_Cur_Code',None,type=str)
    Rat_Period =  request.args.get('Rat_Period',None,type=str)
    Rat_Hourly =  request.args.get('Rat_Hourly',None,type=str)
    Rat_Daily =  request.args.get('Rat_Daily',None,type=str)
    Rat_Monthly =  request.args.get('Rat_Monthly',None,type=str)
    CR_Quantity =  request.args.get('CR_Quantity',None,type=str)
    CR_Quantity_at_Rate =  request.args.get('CR_Quantity_at_Rate',None,type=str)
    CC_XR =  request.args.get('CC_XR',None,type=str)
    CR_Cur_XR =  request.args.get('CR_Cur_XR',None,type=str)
    CR_ST_at_Rate_Cur =  request.args.get('CR_ST_at_Rate_Cur',None,type=str)
    CR_ST_at_CC_Cur =  request.args.get('CR_ST_at_CC_Cur',None,type=str)
    CR_ST_at_Cur =  request.args.get('CR_ST_at_Cur',None,type=str)
    Cus_Name =  request.args.get('Cus_Name',None,type=str)
    CI_Name =  request.args.get('CI_Name',None,type=str)
    CU_Description =  request.args.get('CU_Description',None,type=str)
    CC_Description =  request.args.get('CC_Description',None,type=str)
    Rat_Period_Description =  request.args.get('Rat_Period_Description',None,type=str)
    CC_Code =  request.args.get('CC_Code',None,type=str)
    Pla_Id =  request.args.get('Pla_Id',None,type=str)
    Pla_Name =  request.args.get('Pla_Name',None,type=str)
    
    # Build default query all fields from table
    

    if User_Id is not None and len(User_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='User_Id:User_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%User_Id
                )
    
    
    if Cus_Id is not None and len(Cus_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Cus_Id:Cus_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Cus_Id
                )
    
    
    if CR_Date_From is not None and len(CR_Date_From)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CR_Date_From:CR_Date_From',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CR_Date_From
                )
    
    
    if CR_Date_To is not None and len(CR_Date_To)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CR_Date_To:CR_Date_To',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CR_Date_To
                )
    
    
    if CIT_Status is not None and len(CIT_Status)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CIT_Status:CIT_Status',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CIT_Status
                )
    
    
    if Cur_Code is not None and len(Cur_Code)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Cur_Code:Cur_Code',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Cur_Code
                )
    
    
    if CU_Id is not None and len(CU_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CU_Id:CU_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_Id
                )
    
    
    if CIT_Count is not None and len(CIT_Count)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CIT_Count:CIT_Count',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CIT_Count
                )
    
    
    if CIT_Quantity is not None and len(CIT_Quantity)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CIT_Quantity:CIT_Quantity',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CIT_Quantity
                )
    
    
    if CIT_Generation is not None and len(CIT_Generation)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CIT_Generation:CIT_Generation',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CIT_Generation
                )
    
    
    if CI_CC_Id is not None and len(CI_CC_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CI_CC_Id:CI_CC_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CI_CC_Id
                )
    
    
    if CU_Operation is not None and len(CU_Operation)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CU_Operation:CU_Operation',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_Operation
                )
    
    
    if Typ_Code is not None and len(Typ_Code)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Typ_Code:Typ_Code',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Typ_Code
                )
    
    
    if CC_Cur_Code is not None and len(CC_Cur_Code)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CC_Cur_Code:CC_Cur_Code',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CC_Cur_Code
                )
    
    
    if CI_Id is not None and len(CI_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CI_Id:CI_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CI_Id
                )
    
    
    if Rat_Id is not None and len(Rat_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Rat_Id:Rat_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Rat_Id
                )
    
    
    if Rat_Price is not None and len(Rat_Price)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Rat_Price:Rat_Price',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Rat_Price
                )
    
    
    if Rat_MU_Code is not None and len(Rat_MU_Code)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Rat_MU_Code:Rat_MU_Code',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Rat_MU_Code
                )
    
    
    if Rat_Cur_Code is not None and len(Rat_Cur_Code)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Rat_Cur_Code:Rat_Cur_Code',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Rat_Cur_Code
                )
    
    
    if Rat_Period is not None and len(Rat_Period)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Rat_Period:Rat_Period',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Rat_Period
                )
    
    
    if Rat_Hourly is not None and len(Rat_Hourly)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Rat_Hourly:Rat_Hourly',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Rat_Hourly
                )
    
    
    if Rat_Daily is not None and len(Rat_Daily)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Rat_Daily:Rat_Daily',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Rat_Daily
                )
    
    
    if Rat_Monthly is not None and len(Rat_Monthly)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Rat_Monthly:Rat_Monthly',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Rat_Monthly
                )
    
    
    if CR_Quantity is not None and len(CR_Quantity)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CR_Quantity:CR_Quantity',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CR_Quantity
                )
    
    
    if CR_Quantity_at_Rate is not None and len(CR_Quantity_at_Rate)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CR_Quantity_at_Rate:CR_Quantity_at_Rate',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CR_Quantity_at_Rate
                )
    
    
    if CC_XR is not None and len(CC_XR)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CC_XR:CC_XR',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CC_XR
                )
    
    
    if CR_Cur_XR is not None and len(CR_Cur_XR)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CR_Cur_XR:CR_Cur_XR',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CR_Cur_XR
                )
    
    
    if CR_ST_at_Rate_Cur is not None and len(CR_ST_at_Rate_Cur)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CR_ST_at_Rate_Cur:CR_ST_at_Rate_Cur',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CR_ST_at_Rate_Cur
                )
    
    
    if CR_ST_at_CC_Cur is not None and len(CR_ST_at_CC_Cur)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CR_ST_at_CC_Cur:CR_ST_at_CC_Cur',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CR_ST_at_CC_Cur
                )
    
    
    if CR_ST_at_Cur is not None and len(CR_ST_at_Cur)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CR_ST_at_Cur:CR_ST_at_Cur',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CR_ST_at_Cur
                )
    
    
    if Cus_Name is not None and len(Cus_Name)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Cus_Name:Cus_Name',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Cus_Name
                )
    
    
    if CI_Name is not None and len(CI_Name)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CI_Name:CI_Name',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CI_Name
                )
    
    
    if CU_Description is not None and len(CU_Description)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CU_Description:CU_Description',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CU_Description
                )
    
    
    if CC_Description is not None and len(CC_Description)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CC_Description:CC_Description',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CC_Description
                )
    
    
    if Rat_Period_Description is not None and len(Rat_Period_Description)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Rat_Period_Description:Rat_Period_Description',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Rat_Period_Description
                )
    
    
    if CC_Code is not None and len(CC_Code)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='CC_Code:CC_Code',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CC_Code
                )
    
    
    if Pla_Id is not None and len(Pla_Id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Pla_Id:Pla_Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Pla_Id
                )
    
    
    if Pla_Name is not None and len(Pla_Name)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='Pla_Name:Pla_Name',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%Pla_Name
                )
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['User_Id', 'Cus_Id', 'CR_Date_From', 'CR_Date_To', 'CIT_Status', 'Cur_Code', 'CU_Id', 'CIT_Count', 'CIT_Quantity', 'CIT_Generation', 'CI_CC_Id', 'CU_Operation', 'Typ_Code', 'CC_Cur_Code', 'CI_Id', 'Rat_Id', 'Rat_Price', 'Rat_MU_Code', 'Rat_Cur_Code', 'Rat_Period', 'Rat_Hourly', 'Rat_Daily', 'Rat_Monthly', 'CR_Quantity', 'CR_Quantity_at_Rate', 'CC_XR', 'CR_Cur_XR', 'CR_ST_at_Rate_Cur', 'CR_ST_at_CC_Cur', 'CR_ST_at_Cur', 'Cus_Name', 'CI_Name', 'CU_Description', 'CC_Description', 'Rat_Period_Description', 'CC_Code', 'Pla_Id', 'Pla_Name']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['User_Id', 'Cus_Id', 'CR_Date_From', 'CR_Date_To', 'CIT_Status', 'Cur_Code', 'CU_Id', 'CIT_Count', 'CIT_Quantity', 'CIT_Generation', 'CI_CC_Id', 'CU_Operation', 'Typ_Code', 'CC_Cur_Code', 'CI_Id', 'Rat_Id', 'Rat_Price', 'Rat_MU_Code', 'Rat_Cur_Code', 'Rat_Period', 'Rat_Hourly', 'Rat_Daily', 'Rat_Monthly', 'CR_Quantity', 'CR_Quantity_at_Rate', 'CC_XR', 'CR_Cur_XR', 'CR_ST_at_Rate_Cur', 'CR_ST_at_CC_Cur', 'CR_ST_at_Cur', 'Cus_Name', 'CI_Name', 'CU_Description', 'CC_Description', 'Rat_Period_Description', 'CC_Code', 'Pla_Id', 'Pla_Name'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'User_Id':
                if value is not None:
                    query = query.filter_by(User_Id=value)
            if field == 'Cus_Id':
                if value is not None:
                    query = query.filter_by(Cus_Id=value)
            if field == 'CR_Date_From':
                if value is not None:
                    query = query.filter_by(CR_Date_From=value)
            if field == 'CR_Date_To':
                if value is not None:
                    query = query.filter_by(CR_Date_To=value)
            if field == 'CIT_Status':
                if value is not None:
                    query = query.filter_by(CIT_Status=value)
            if field == 'Cur_Code':
                if value is not None:
                    query = query.filter_by(Cur_Code=value)
            if field == 'CU_Id':
                if value is not None:
                    query = query.filter_by(CU_Id=value)
            if field == 'CIT_Count':
                if value is not None:
                    query = query.filter_by(CIT_Count=value)
            if field == 'CIT_Quantity':
                if value is not None:
                    query = query.filter_by(CIT_Quantity=value)
            if field == 'CIT_Generation':
                if value is not None:
                    query = query.filter_by(CIT_Generation=value)
            if field == 'CI_CC_Id':
                if value is not None:
                    query = query.filter_by(CI_CC_Id=value)
            if field == 'CU_Operation':
                if value is not None:
                    query = query.filter_by(CU_Operation=value)
            if field == 'Typ_Code':
                if value is not None:
                    query = query.filter_by(Typ_Code=value)
            if field == 'CC_Cur_Code':
                if value is not None:
                    query = query.filter_by(CC_Cur_Code=value)
            if field == 'CI_Id':
                if value is not None:
                    query = query.filter_by(CI_Id=value)
            if field == 'Rat_Id':
                if value is not None:
                    query = query.filter_by(Rat_Id=value)
            if field == 'Rat_Price':
                if value is not None:
                    query = query.filter_by(Rat_Price=value)
            if field == 'Rat_MU_Code':
                if value is not None:
                    query = query.filter_by(Rat_MU_Code=value)
            if field == 'Rat_Cur_Code':
                if value is not None:
                    query = query.filter_by(Rat_Cur_Code=value)
            if field == 'Rat_Period':
                if value is not None:
                    query = query.filter_by(Rat_Period=value)
            if field == 'Rat_Hourly':
                if value is not None:
                    query = query.filter_by(Rat_Hourly=value)
            if field == 'Rat_Daily':
                if value is not None:
                    query = query.filter_by(Rat_Daily=value)
            if field == 'Rat_Monthly':
                if value is not None:
                    query = query.filter_by(Rat_Monthly=value)
            if field == 'CR_Quantity':
                if value is not None:
                    query = query.filter_by(CR_Quantity=value)
            if field == 'CR_Quantity_at_Rate':
                if value is not None:
                    query = query.filter_by(CR_Quantity_at_Rate=value)
            if field == 'CC_XR':
                if value is not None:
                    query = query.filter_by(CC_XR=value)
            if field == 'CR_Cur_XR':
                if value is not None:
                    query = query.filter_by(CR_Cur_XR=value)
            if field == 'CR_ST_at_Rate_Cur':
                if value is not None:
                    query = query.filter_by(CR_ST_at_Rate_Cur=value)
            if field == 'CR_ST_at_CC_Cur':
                if value is not None:
                    query = query.filter_by(CR_ST_at_CC_Cur=value)
            if field == 'CR_ST_at_Cur':
                if value is not None:
                    query = query.filter_by(CR_ST_at_Cur=value)
            if field == 'Cus_Name':
                if value is not None:
                    query = query.filter_by(Cus_Name=value)
            if field == 'CI_Name':
                if value is not None:
                    query = query.filter_by(CI_Name=value)
            if field == 'CU_Description':
                if value is not None:
                    query = query.filter_by(CU_Description=value)
            if field == 'CC_Description':
                if value is not None:
                    query = query.filter_by(CC_Description=value)
            if field == 'Rat_Period_Description':
                if value is not None:
                    query = query.filter_by(Rat_Period_Description=value)
            if field == 'CC_Code':
                if value is not None:
                    query = query.filter_by(CC_Code=value)
            if field == 'Pla_Id':
                if value is not None:
                    query = query.filter_by(Pla_Id=value)
            if field == 'Pla_Name':
                if value is not None:
                    query = query.filter_by(Pla_Name=value)
            
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:41.408857
# ======================================================================
# gen_views_api.html:AG 2021-12-13 19:33:41.408872
# table_name: User_Resumes
# class_name: user_resumes
# is shardened: None
# Table 'User_Resumes' keys = User_Id,CR_Date_From,CR_Date_To,CIT_Status,Cur_Code,CU_Id,CI_Id
# Errors: None
# PK field found 'User_Id' db.Integer
# Errors: None
# PK field found 'CR_Date_From' db.Date
# Errors: None
# PK field found 'CR_Date_To' db.Date
# Errors: None
# PK field found 'CIT_Status' db.Integer
# Errors: None
# PK field found 'Cur_Code' db.String(3)
# Errors: None
# PK field found 'CU_Id' db.Integer
# Errors: None
# PK field found 'CI_Id' db.Integer
# User_Resumes id field is 'User_Resumes.User_Id' of type 'int:'

@main.route('/api/get/User_Resumes'     , methods=['GET'])
@main.route('/api/get/User_Resumes/<int:id>', methods=['GET'])
def api_get_User_Resumes(id=None):
    code       = API_OK
    message    = 'OK'
    rows       = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        #response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        #response.headers['Pragma']        = 'no-cache'
        try:
            id_counter = 0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values=[id]
            # Codigo para un solo campo de id
            # chequear si marcado explicitamente
            db.session.flush()
            query = db.session.query(User_Resumes)
            if id is not None:
                query = query.filter(User_Resumes.User_Id == id_values[id_counter])
                rows = query.one_or_none()
            else:
                if request.args is not None and len(request.args):
                    if 'User_Id' in request.args:
                        query = query.filter(User_Resumes.User_Id == request.args.get('User_Id'))
                    if 'Cus_Id' in request.args:
                        query = query.filter(User_Resumes.Cus_Id == request.args.get('Cus_Id'))
                    if 'CR_Date_From' in request.args:
                        query = query.filter(User_Resumes.CR_Date_From == request.args.get('CR_Date_From'))
                    if 'CR_Date_To' in request.args:
                        query = query.filter(User_Resumes.CR_Date_To == request.args.get('CR_Date_To'))
                    if 'CIT_Status' in request.args:
                        query = query.filter(User_Resumes.CIT_Status == request.args.get('CIT_Status'))
                    if 'Cur_Code' in request.args:
                        query = query.filter(User_Resumes.Cur_Code == request.args.get('Cur_Code'))
                    if 'CU_Id' in request.args:
                        query = query.filter(User_Resumes.CU_Id == request.args.get('CU_Id'))
                    if 'CIT_Count' in request.args:
                        query = query.filter(User_Resumes.CIT_Count == request.args.get('CIT_Count'))
                    if 'CIT_Quantity' in request.args:
                        query = query.filter(User_Resumes.CIT_Quantity == request.args.get('CIT_Quantity'))
                    if 'CIT_Generation' in request.args:
                        query = query.filter(User_Resumes.CIT_Generation == request.args.get('CIT_Generation'))
                    if 'CI_CC_Id' in request.args:
                        query = query.filter(User_Resumes.CI_CC_Id == request.args.get('CI_CC_Id'))
                    if 'CU_Operation' in request.args:
                        query = query.filter(User_Resumes.CU_Operation == request.args.get('CU_Operation'))
                    if 'Typ_Code' in request.args:
                        query = query.filter(User_Resumes.Typ_Code == request.args.get('Typ_Code'))
                    if 'CC_Cur_Code' in request.args:
                        query = query.filter(User_Resumes.CC_Cur_Code == request.args.get('CC_Cur_Code'))
                    if 'CI_Id' in request.args:
                        query = query.filter(User_Resumes.CI_Id == request.args.get('CI_Id'))
                    if 'Rat_Id' in request.args:
                        query = query.filter(User_Resumes.Rat_Id == request.args.get('Rat_Id'))
                    if 'Rat_Price' in request.args:
                        query = query.filter(User_Resumes.Rat_Price == request.args.get('Rat_Price'))
                    if 'Rat_MU_Code' in request.args:
                        query = query.filter(User_Resumes.Rat_MU_Code == request.args.get('Rat_MU_Code'))
                    if 'Rat_Cur_Code' in request.args:
                        query = query.filter(User_Resumes.Rat_Cur_Code == request.args.get('Rat_Cur_Code'))
                    if 'Rat_Period' in request.args:
                        query = query.filter(User_Resumes.Rat_Period == request.args.get('Rat_Period'))
                    if 'Rat_Hourly' in request.args:
                        query = query.filter(User_Resumes.Rat_Hourly == request.args.get('Rat_Hourly'))
                    if 'Rat_Daily' in request.args:
                        query = query.filter(User_Resumes.Rat_Daily == request.args.get('Rat_Daily'))
                    if 'Rat_Monthly' in request.args:
                        query = query.filter(User_Resumes.Rat_Monthly == request.args.get('Rat_Monthly'))
                    if 'CR_Quantity' in request.args:
                        query = query.filter(User_Resumes.CR_Quantity == request.args.get('CR_Quantity'))
                    if 'CR_Quantity_at_Rate' in request.args:
                        query = query.filter(User_Resumes.CR_Quantity_at_Rate == request.args.get('CR_Quantity_at_Rate'))
                    if 'CC_XR' in request.args:
                        query = query.filter(User_Resumes.CC_XR == request.args.get('CC_XR'))
                    if 'CR_Cur_XR' in request.args:
                        query = query.filter(User_Resumes.CR_Cur_XR == request.args.get('CR_Cur_XR'))
                    if 'CR_ST_at_Rate_Cur' in request.args:
                        query = query.filter(User_Resumes.CR_ST_at_Rate_Cur == request.args.get('CR_ST_at_Rate_Cur'))
                    if 'CR_ST_at_CC_Cur' in request.args:
                        query = query.filter(User_Resumes.CR_ST_at_CC_Cur == request.args.get('CR_ST_at_CC_Cur'))
                    if 'CR_ST_at_Cur' in request.args:
                        query = query.filter(User_Resumes.CR_ST_at_Cur == request.args.get('CR_ST_at_Cur'))
                    if 'Cus_Name' in request.args:
                        query = query.filter(User_Resumes.Cus_Name == request.args.get('Cus_Name'))
                    if 'CI_Name' in request.args:
                        query = query.filter(User_Resumes.CI_Name == request.args.get('CI_Name'))
                    if 'CU_Description' in request.args:
                        query = query.filter(User_Resumes.CU_Description == request.args.get('CU_Description'))
                    if 'CC_Description' in request.args:
                        query = query.filter(User_Resumes.CC_Description == request.args.get('CC_Description'))
                    if 'Rat_Period_Description' in request.args:
                        query = query.filter(User_Resumes.Rat_Period_Description == request.args.get('Rat_Period_Description'))
                    if 'CC_Code' in request.args:
                        query = query.filter(User_Resumes.CC_Code == request.args.get('CC_Code'))
                    if 'Pla_Id' in request.args:
                        query = query.filter(User_Resumes.Pla_Id == request.args.get('Pla_Id'))
                    if 'Pla_Name' in request.args:
                        query = query.filter(User_Resumes.Pla_Name == request.args.get('Pla_Name'))
                rows = query.all()
            if rows is not None:
                if type(rows) == list:
                    for i in range(len(rows)):
                        rows[i] = json.loads(rows[i].get_json())
                else:
                    rows = [json.loads(rows.get_json())]
            else:
                rows = []
            if len(rows) == 0:
                code = API_NO_DATA
                state = get_api_state(API_NO_DATA)
                
                if id is None:
                    message = f"No 'User_Resumes' records found"
                else:
                    message = f"No 'User_Resumes.User_Id' = {id} record found"
                
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='User_Resumes',entities=rows,name=current_app.config['NAME'])

@main.route('/api/post/User_Resumes', methods=['POST'])
def api_post_User_Resumes():
    code    = API_OK
    message = 'OK'
    row     = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            row = User_Resumes()
            # Populates row from json, if ID=int:autoincrement then None
            row.User_Id = request.json.get('User_Id',None)
            row.Cus_Id = request.json.get('Cus_Id',None)
            row.CR_Date_From = request.json.get('CR_Date_From',None)
            row.CR_Date_To = request.json.get('CR_Date_To',None)
            row.CIT_Status = request.json.get('CIT_Status',None)
            row.Cur_Code = request.json.get('Cur_Code',None)
            row.CU_Id = request.json.get('CU_Id',None)
            row.CIT_Count = request.json.get('CIT_Count',None)
            row.CIT_Quantity = request.json.get('CIT_Quantity',None)
            row.CIT_Generation = request.json.get('CIT_Generation',1)
            row.CI_CC_Id = request.json.get('CI_CC_Id',None)
            row.CU_Operation = request.json.get('CU_Operation',None)
            row.Typ_Code = request.json.get('Typ_Code',None)
            row.CC_Cur_Code = request.json.get('CC_Cur_Code',None)
            row.CI_Id = request.json.get('CI_Id',None)
            row.Rat_Id = request.json.get('Rat_Id',None)
            row.Rat_Price = request.json.get('Rat_Price',None)
            row.Rat_MU_Code = request.json.get('Rat_MU_Code',None)
            row.Rat_Cur_Code = request.json.get('Rat_Cur_Code',None)
            row.Rat_Period = request.json.get('Rat_Period',None)
            row.Rat_Hourly = request.json.get('Rat_Hourly',None)
            row.Rat_Daily = request.json.get('Rat_Daily',None)
            row.Rat_Monthly = request.json.get('Rat_Monthly',None)
            row.CR_Quantity = request.json.get('CR_Quantity',None)
            row.CR_Quantity_at_Rate = request.json.get('CR_Quantity_at_Rate',None)
            row.CC_XR = request.json.get('CC_XR',None)
            row.CR_Cur_XR = request.json.get('CR_Cur_XR',None)
            row.CR_ST_at_Rate_Cur = request.json.get('CR_ST_at_Rate_Cur',None)
            row.CR_ST_at_CC_Cur = request.json.get('CR_ST_at_CC_Cur',None)
            row.CR_ST_at_Cur = request.json.get('CR_ST_at_Cur',None)
            row.Cus_Name = request.json.get('Cus_Name',None)
            row.CI_Name = request.json.get('CI_Name',None)
            row.CU_Description = request.json.get('CU_Description',None)
            row.CC_Description = request.json.get('CC_Description',None)
            row.Rat_Period_Description = request.json.get('Rat_Period_Description',None)
            row.CC_Code = request.json.get('CC_Code',None)
            row.Pla_Id = request.json.get('Pla_Id',None)
            row.Pla_Name = request.json.get('Pla_Name',None)
            # ----------------------------------------------------------
            db.session.add(row)
            db.session.flush()
            db.session.commit()
            db.session.flush()
            db.session.refresh(row)
            db.session.flush()
            message = f"Created 'User_Resumes' User_Id = {row.User_Id}"
            row     = json.loads(row.get_json())
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
    else:
        code    = API_ERROR
        message = 'Unauthorized request'            
    return get_api_response(code=code,message=message,kind='User_Resumes',entities=[row],name=current_app.config['NAME'])

@main.route('/api/put/User_Resumes/<int:id>', methods=['PUT'])
def api_put_User_Resumes(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = User_Resumes()
            query = db.session.query(User_Resumes)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(User_Resumes.User_Id == id_values[id_counter])
            id_counter += 1
            query = query.filter(User_Resumes.CR_Date_From == id_values[id_counter])
            id_counter += 1
            query = query.filter(User_Resumes.CR_Date_To == id_values[id_counter])
            id_counter += 1
            query = query.filter(User_Resumes.CIT_Status == id_values[id_counter])
            id_counter += 1
            query = query.filter(User_Resumes.Cur_Code == id_values[id_counter])
            id_counter += 1
            query = query.filter(User_Resumes.CU_Id == id_values[id_counter])
            id_counter += 1
            query = query.filter(User_Resumes.CI_Id == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                if 'Cus_Id' in request.json.keys():
                    row.Cus_Id = request.json.get('Cus_Id')
                if 'CIT_Count' in request.json.keys():
                    row.CIT_Count = request.json.get('CIT_Count')
                if 'CIT_Quantity' in request.json.keys():
                    row.CIT_Quantity = request.json.get('CIT_Quantity')
                if 'CIT_Generation' in request.json.keys():
                    row.CIT_Generation = request.json.get('CIT_Generation')
                if 'CI_CC_Id' in request.json.keys():
                    row.CI_CC_Id = request.json.get('CI_CC_Id')
                if 'CU_Operation' in request.json.keys():
                    row.CU_Operation = request.json.get('CU_Operation')
                if 'Typ_Code' in request.json.keys():
                    row.Typ_Code = request.json.get('Typ_Code')
                if 'CC_Cur_Code' in request.json.keys():
                    row.CC_Cur_Code = request.json.get('CC_Cur_Code')
                if 'Rat_Id' in request.json.keys():
                    row.Rat_Id = request.json.get('Rat_Id')
                if 'Rat_Price' in request.json.keys():
                    row.Rat_Price = request.json.get('Rat_Price')
                if 'Rat_MU_Code' in request.json.keys():
                    row.Rat_MU_Code = request.json.get('Rat_MU_Code')
                if 'Rat_Cur_Code' in request.json.keys():
                    row.Rat_Cur_Code = request.json.get('Rat_Cur_Code')
                if 'Rat_Period' in request.json.keys():
                    row.Rat_Period = request.json.get('Rat_Period')
                if 'Rat_Hourly' in request.json.keys():
                    row.Rat_Hourly = request.json.get('Rat_Hourly')
                if 'Rat_Daily' in request.json.keys():
                    row.Rat_Daily = request.json.get('Rat_Daily')
                if 'Rat_Monthly' in request.json.keys():
                    row.Rat_Monthly = request.json.get('Rat_Monthly')
                if 'CR_Quantity' in request.json.keys():
                    row.CR_Quantity = request.json.get('CR_Quantity')
                if 'CR_Quantity_at_Rate' in request.json.keys():
                    row.CR_Quantity_at_Rate = request.json.get('CR_Quantity_at_Rate')
                if 'CC_XR' in request.json.keys():
                    row.CC_XR = request.json.get('CC_XR')
                if 'CR_Cur_XR' in request.json.keys():
                    row.CR_Cur_XR = request.json.get('CR_Cur_XR')
                if 'CR_ST_at_Rate_Cur' in request.json.keys():
                    row.CR_ST_at_Rate_Cur = request.json.get('CR_ST_at_Rate_Cur')
                if 'CR_ST_at_CC_Cur' in request.json.keys():
                    row.CR_ST_at_CC_Cur = request.json.get('CR_ST_at_CC_Cur')
                if 'CR_ST_at_Cur' in request.json.keys():
                    row.CR_ST_at_Cur = request.json.get('CR_ST_at_Cur')
                if 'Cus_Name' in request.json.keys():
                    row.Cus_Name = request.json.get('Cus_Name')
                if 'CI_Name' in request.json.keys():
                    row.CI_Name = request.json.get('CI_Name')
                if 'CU_Description' in request.json.keys():
                    row.CU_Description = request.json.get('CU_Description')
                if 'CC_Description' in request.json.keys():
                    row.CC_Description = request.json.get('CC_Description')
                if 'Rat_Period_Description' in request.json.keys():
                    row.Rat_Period_Description = request.json.get('Rat_Period_Description')
                if 'CC_Code' in request.json.keys():
                    row.CC_Code = request.json.get('CC_Code')
                if 'Pla_Id' in request.json.keys():
                    row.Pla_Id = request.json.get('Pla_Id')
                if 'Pla_Name' in request.json.keys():
                    row.Pla_Name = request.json.get('Pla_Name')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'User_Resumes' User_Id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found User_Resumes with User_Id = {id}"
                row     = None
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='User_Resumes',entities=[row],name=current_app.config['NAME'])

@main.route('/api/patch/User_Resumes/<int:id>', methods=['PATCH'])
def api_patch_User_Resumes(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = User_Resumes()
            query = db.session.query(User_Resumes)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(User_Resumes.User_Id == id_values[id_counter])
            id_counter += 1
            query = query.filter(User_Resumes.CR_Date_From == id_values[id_counter])
            id_counter += 1
            query = query.filter(User_Resumes.CR_Date_To == id_values[id_counter])
            id_counter += 1
            query = query.filter(User_Resumes.CIT_Status == id_values[id_counter])
            id_counter += 1
            query = query.filter(User_Resumes.Cur_Code == id_values[id_counter])
            id_counter += 1
            query = query.filter(User_Resumes.CU_Id == id_values[id_counter])
            id_counter += 1
            query = query.filter(User_Resumes.CI_Id == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                db.session.rollback()
                if request.values is not None and len(request.values):
                    if 'Cus_Id' in request.values:
                        row.Cus_Id = request.values.get('Cus_Id')
                    if 'CIT_Count' in request.values:
                        row.CIT_Count = request.values.get('CIT_Count')
                    if 'CIT_Quantity' in request.values:
                        row.CIT_Quantity = request.values.get('CIT_Quantity')
                    if 'CIT_Generation' in request.values:
                        row.CIT_Generation = request.values.get('CIT_Generation')
                    if 'CI_CC_Id' in request.values:
                        row.CI_CC_Id = request.values.get('CI_CC_Id')
                    if 'CU_Operation' in request.values:
                        row.CU_Operation = request.values.get('CU_Operation')
                    if 'Typ_Code' in request.values:
                        row.Typ_Code = request.values.get('Typ_Code')
                    if 'CC_Cur_Code' in request.values:
                        row.CC_Cur_Code = request.values.get('CC_Cur_Code')
                    if 'Rat_Id' in request.values:
                        row.Rat_Id = request.values.get('Rat_Id')
                    if 'Rat_Price' in request.values:
                        row.Rat_Price = request.values.get('Rat_Price')
                    if 'Rat_MU_Code' in request.values:
                        row.Rat_MU_Code = request.values.get('Rat_MU_Code')
                    if 'Rat_Cur_Code' in request.values:
                        row.Rat_Cur_Code = request.values.get('Rat_Cur_Code')
                    if 'Rat_Period' in request.values:
                        row.Rat_Period = request.values.get('Rat_Period')
                    if 'Rat_Hourly' in request.values:
                        row.Rat_Hourly = request.values.get('Rat_Hourly')
                    if 'Rat_Daily' in request.values:
                        row.Rat_Daily = request.values.get('Rat_Daily')
                    if 'Rat_Monthly' in request.values:
                        row.Rat_Monthly = request.values.get('Rat_Monthly')
                    if 'CR_Quantity' in request.values:
                        row.CR_Quantity = request.values.get('CR_Quantity')
                    if 'CR_Quantity_at_Rate' in request.values:
                        row.CR_Quantity_at_Rate = request.values.get('CR_Quantity_at_Rate')
                    if 'CC_XR' in request.values:
                        row.CC_XR = request.values.get('CC_XR')
                    if 'CR_Cur_XR' in request.values:
                        row.CR_Cur_XR = request.values.get('CR_Cur_XR')
                    if 'CR_ST_at_Rate_Cur' in request.values:
                        row.CR_ST_at_Rate_Cur = request.values.get('CR_ST_at_Rate_Cur')
                    if 'CR_ST_at_CC_Cur' in request.values:
                        row.CR_ST_at_CC_Cur = request.values.get('CR_ST_at_CC_Cur')
                    if 'CR_ST_at_Cur' in request.values:
                        row.CR_ST_at_Cur = request.values.get('CR_ST_at_Cur')
                    if 'Cus_Name' in request.values:
                        row.Cus_Name = request.values.get('Cus_Name')
                    if 'CI_Name' in request.values:
                        row.CI_Name = request.values.get('CI_Name')
                    if 'CU_Description' in request.values:
                        row.CU_Description = request.values.get('CU_Description')
                    if 'CC_Description' in request.values:
                        row.CC_Description = request.values.get('CC_Description')
                    if 'Rat_Period_Description' in request.values:
                        row.Rat_Period_Description = request.values.get('Rat_Period_Description')
                    if 'CC_Code' in request.values:
                        row.CC_Code = request.values.get('CC_Code')
                    if 'Pla_Id' in request.values:
                        row.Pla_Id = request.values.get('Pla_Id')
                    if 'Pla_Name' in request.values:
                        row.Pla_Name = request.values.get('Pla_Name')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'User_Resumes' User_Id = {id}"
                try:
                    row     = json.loads(row.get_json())
                except:
                    row     = None
            else:
                code    = API_NOT_FOUND
                message = f"Not found User_Resumes with User_Id = {id}"
                row     = None
                db.session.rollback()
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
            db.session.rollback()
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='User_Resumes',entities=[row],name=current_app.config['NAME'])

@main.route('/api/delete/User_Resumes/<int:id>', methods=['DELETE'])
def api_delete_User_Resumes(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = User_Resumes()
            query = db.session.query(User_Resumes)
            
            # First loop mandatory for row population ----------------------
            # detected primary key field: c.field
            query       = query.filter(User_Resumes.User_Id == id_values[id_counter])
            id_counter +=1
            # detected primary key field: c.field
            query       = query.filter(User_Resumes.CR_Date_From == id_values[id_counter])
            id_counter +=1
            # detected primary key field: c.field
            query       = query.filter(User_Resumes.CR_Date_To == id_values[id_counter])
            id_counter +=1
            # detected primary key field: c.field
            query       = query.filter(User_Resumes.CIT_Status == id_values[id_counter])
            id_counter +=1
            # detected primary key field: c.field
            query       = query.filter(User_Resumes.Cur_Code == id_values[id_counter])
            id_counter +=1
            # detected primary key field: c.field
            query       = query.filter(User_Resumes.CU_Id == id_values[id_counter])
            id_counter +=1
            # detected primary key field: c.field
            query       = query.filter(User_Resumes.CI_Id == id_values[id_counter])
            id_counter +=1
            # --------------------------------------------------------------
            row = query.one_or_none()

            if row is not None:
                db.session.delete(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                message = f"Deleted 'User_Resumes' User_Id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found 'User_Resumes' with User_Id = {id}"
                row     = None        
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='User_Resumes',entities=[],name=current_app.config['NAME'])

# ======================================================================# =============================================================================
# Auto-Generated code. do not modify
# (c) Sertechno 2018
# GLVH @ 2021-12-13 19:33:35
# =============================================================================
# gen_views.py:32 => /home/gvalera/GIT/EG-Suite-Tools/Collector/code/auto/views/view_users.py
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:41.547686
# ======================================================================        
# gen_views_form.html:AG 2021-12-13 19:33:41.547712
@main.route('/forms/Users', methods=['GET', 'POST'])
@login_required

def forms_Users():
    """ Form handling function for table Users """
    logger.debug('forms_Users(): Enter')
    
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Users'
    class_name='User'
    template_name='Users'
    sharding=False
    id  =  request.args.get('id',0,type=int)
    
    # Ensures DB Data is commited prior main query
    try:
        db.session.commit()
    except:
        db.session.rollback()
    row =  User.query.filter(User.id == id).first()
    if row is None:
        row=User()
        session['is_new_row']=True
    session['data'] =  {  'id':row.id, 'username':row.username, 'role_id':row.role_id, 'email':row.email, 'password_hash':row.password_hash, 'confirmed':row.confirmed, 'CC_Id':row.CC_Id }
    
    form = frm_User()
    
    if form.has_FKs:
        form.role_id.choices = db.session.query(Role.id,Role.name).order_by(Role.name).all()
        form.CC_Id.choices = db.session.query(cost_center.CC_Id,cost_center.CC_Description).order_by(cost_center.CC_Description).all()

    
    # Actual Form activation here
    if form.validate_on_submit():
        # Code for SAVE option -----------------------------------------
        if form.submit_Save.data and current_user.role_id > 1:
            
            row.username = form.username.data
            row.role_id = form.role_id.data
            row.email = form.email.data
            row.password_hash = form.password_hash.data
            row.confirmed = form.confirmed.data
            row.CC_Id = form.CC_Id.data
            try:
               session['new_row']=str(row)
               db.session.flush()
               db.session.add(row)
               db.session.commit()
               db.session.flush()
               if session['is_new_row']==True:
                   logger.audit ( '%s:NEW:%s' % (current_user.username,session['new_row'] ) )
                   flash('New User created OK')
               else:
                   logger.audit ( '%s:OLD:%s' % (current_user.username,session['prev_row']) )
                   logger.audit ( '%s:UPD:%s' % (current_user.username,session['new_row'] ) )    
                   message=Markup('<b>User id saved OK</b>')
                   flash(message)
               db.session.flush()
            except Exception as e:
               db.session.rollback()
               db.session.flush()
               message=Markup('ERROR saving User record : %s'%(e))
               flash(message)
            return redirect(url_for('.select_Users_query'))
        # --------------------------------------------------------------
        # Code for NEW option
        # GV 20190109 f.write(        "        elif   form.submit_New.data:\n")
        elif   form.submit_New.data and current_user.role_id>1:
            #print('New Data Here ...')
            session['is_new_row']=True
            db.session.flush()
            row=User()
    
            return redirect(url_for('.forms_Users',Id=row.Id))
    
        # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            message=Markup('User Record modifications discarded ...')
            flash(message)
        # Code for ANY OTHER option should never get here
        else:
            #print('form validated but not submited ???')
            message=Markup("<b>User data modifications not allowed for user '%s'. Please contact EG Suite's Administrator ...</b>"%(current_user.username))    
            flash(message)
    
            return redirect(url_for('.forms_Users',Id=row.Id))
    
    
    form.username.data = row.username
    form.role_id.data = row.role_id
    form.email.data = row.email
    form.password_hash.data = row.password_hash
    form.confirmed.data = row.confirmed
    form.CC_Id.data = row.CC_Id
    session['prev_row'] = str(row)
    session['is_new_row'] = False
    logger.debug('forms_Users(): Exit')
    # Generates pagination data here
    P=[]
    # Tab Relations = []
    
    # Generation of pagination data completed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('users.html', form=form, row=row, P=P,collectordata=collectordata)    
# ======================================================================



# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:41.562593
# ======================================================================        
# gen_views_delete.html:AG 2021-12-13 19:33:41.562609
@main.route('/forms/Users_delete', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.DELETE)
@admin_required
def forms_Users_delete():
    """ Delete record handling function for table Users """
    logger.debug('forms_Users_delete(): Enter')
    id  =  request.args.get('id',0,type=int)
    row =  User.query.filter(User.id == id).first()

    if row is None:
        row=User()
    session['data'] =  {  'id':row.id, 'username':row.username, 'role_id':row.role_id, 'email':row.email, 'password_hash':row.password_hash, 'confirmed':row.confirmed, 'CC_Id':row.CC_Id }
                       
    form = frm_User_delete()

    # Tab['has_fks'] True
    
    pass # Tab['has_fks'] True
    
            
    # Actual Form activation here
    if form.validate_on_submit():
    
    # Code for SAVE option
        if  form.submit_Delete.data:
            print('Delete Data Here...')

    
    #f.write(        "            print('Delete Data Here...')
            try:
                session['deleted_row']=str(row)
                db.session.flush()
                db.session.delete(row)
                db.session.commit()
                db.session.flush()
                logger.audit ( '%s:DEL:%s' % (current_user.username,session['deleted_row']) )
                flash('User id deleted OK')
            except exc.IntegrityError as e:
                db.session.rollback()    
                flash('INTEGRITY ERROR: Are you sure there are no dependant records in other tables?')
                return redirect(url_for('.forms_Users_delete',id=session['data']['id']))    
    
            return redirect(url_for('.select_Users_query'))    
    # Code for CANCEL option 
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Record modifications discarded ...')
            return redirect(url_for('.select_Users_query'))    
    # Code for ANY OTHER option should never get here
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.select_Users_query'))    
    
    logger.debug('forms_Users_delete(): Exit')
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    return render_template('users_delete.html', form=form, data=session.get('data'),row=row,collectordata=collectordata)
#===============================================================================

# table_name: Users
# class_name: User
# is shardened: None
# current_app: 
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:41.587823
# ======================================================================

# gen_views_select_query.html:AG 2021-12-13 19:33:41.587841        
@main.route('/select/Users_Query', methods=['GET','POST'])
@login_required
@admin_required
def select_Users_query():
    """ Select rows handling function for table 'Users' """
    logger.debug('select_Users_query(): Enter')
    #chk_c000001(filename=os.path.join(current_app.root_path, '.c000001'),request=request,db=db,logger=logger)
    # Shardening Code goes her if needed
    collectordata={}
    collectordata.update({"COLLECTOR_PERIOD":get_period_data(current_user.id,db.engine,Interface)})
    collectordata.update({"CONFIG":current_app.config})
    suffix = collectordata['COLLECTOR_PERIOD']['active']
    table_name='Users'
    class_name='User'
    template_name='Users'
    sharding=False


    logger.debug("-----------------------------------------------------------")
    logger.debug("%s: template_name            = %s",__name__,template_name)

    logger.debug("-----------------------------------------------------------")    
        
    # Get parameters from URL call
    ia       =  request.args.get('ia',     None,type=str)
    if ia is not None:
        ia=ia.split(',')
        if ia[0]=='ORDER':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='User',Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_ORDER_BY,Argument_1=ia[1],Argument_2=ia[2])
        elif ia[0]=='GROUP':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='User',Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_GROUP_BY,Argument_1=ia[1])
        elif ia[0]=='LIMIT':
            #set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name='User',Option_Type=OPTION_LIMIT,Argument_1=ia[1])
            set_query_option(engine=db.engine,Interface=Interface,User_Id=current_user.id,Table_name=class_name,Option_Type=OPTION_LIMIT,Argument_1=ia[1])

    iad      =  request.args.get('iad',     None,type=int)
    if iad is not None: delete_query_option(engine=db.engine,Interface=Interface,Id=iad) 
    
    field    =  request.args.get('field',   None,type=str)
    value    =  request.args.get('value',   None,type=str)
    
    # Populates a list of foreign keys used for advanced filtering
    # ------------------------------------------------------------------
    foreign_keys={}
    
    foreign_keys.update({'role_id':(Role,'Role','id','name','role_id')})
    foreign_keys.update({'CC_Id':(cost_center,'cost_center','CC_Id','CC_Description','CC_Id')})
    # ------------------------------------------------------------------
    
    if field is not None:
        reset_query_options(    engine=db.engine,Interface=Interface,
                                User_Id=current_user.id,
                                #Table_name='User'
                                Table_name=class_name
                                )

        
        if field in foreign_keys.keys():
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys[field]
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)
            foreign_record=Class.query.get(value)
            foreign_description="'%s'"%getattr(foreign_record,referenced_Value)
        set_query_option(   engine=db.engine,Interface=Interface,
                        User_Id=current_user.id,
                        Table_name=class_name,
                        Option_Type=OPTION_FILTER,
                        Argument_1=foreign_field,
                        Argument_2='==',
                        Argument_3=foreign_description
                        )
    page     =  request.args.get('page',    1   ,type=int)
    addx     =  request.args.get('add.x',   None,type=int)
    addy     =  request.args.get('add.y',   None,type=int)
    exportx  =  request.args.get('export.x',None,type=int)
    exporty  =  request.args.get('export.y',None,type=int)
    filterx  =  request.args.get('filter.x',None,type=int)
    filtery  =  request.args.get('filter.y',None,type=int)
    # Select excluyent view mode
    if   addx    is not None: mode = 'add'
    elif exportx is not None: mode = 'export'
    elif filterx is not None: mode = 'filter'
    else:                     mode = 'select'
    id =  request.args.get('id',None,type=str)
    username =  request.args.get('username',None,type=str)
    role_id =  request.args.get('role_id',None,type=str)
    email =  request.args.get('email',None,type=str)
    password_hash =  request.args.get('password_hash',None,type=str)
    confirmed =  request.args.get('confirmed',None,type=str)
    CC_Id =  request.args.get('CC_Id',None,type=str)
    
    # Build default query all fields from table
    

    if id is not None and len(id)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='id:Id',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%id
                )
    
    
    if username is not None and len(username)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='username:username',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%username
                )
    
    
    if role_id is not None and len(role_id)>0:
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys['role_id']
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)            
            set_query_option(   engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1=foreign_field,
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%role_id
                )
                                
    
    
    if email is not None and len(email)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='email:email',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%email
                )
    
    
    if password_hash is not None and len(password_hash)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='password_hash:password_hash',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%password_hash
                )
    
    
    if confirmed is not None and len(confirmed)>0:
            set_query_option(engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1='confirmed:confirmed',
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%confirmed
                )
    
    
    if CC_Id is not None and len(CC_Id)>0:
            Class,referenced_classname,referenced_Field,referenced_Value,column_Header=foreign_keys['CC_Id']
            foreign_field='%s.%s:%s'%(referenced_classname,referenced_Value,column_Header)            
            set_query_option(   engine=db.engine,Interface=Interface,
                User_Id=current_user.id,
                Table_name=class_name,
                Option_Type=OPTION_FILTER,
                Argument_1=foreign_field,
                Argument_2='LIKE',
                Argument_3='\"%%%s%%\"'%CC_Id
                )
                                
    
    
    
    statement_query,options=get_query_options(engine=db.engine,Interface=Interface,Table_name=class_name,User_Id=current_user.id)
    tracebox_log(statement_query,logger,length=80)
    query=eval(statement_query)
    filtered_query = query    
    if mode == 'filter':
        query=filtered_query
    elif mode == 'export':
        query=filtered_query
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%s_'%table_name, dir=None, text=False)
        dict = {'header':{},'detail':[]}
        count = 0
        rows = query.all()
        for row in rows:
            dict['detail'].append({})
            for column in ['id', 'username', 'role_id', 'email', 'password_hash', 'confirmed', 'CC_Id']:
                dict['detail'][count].update( { column:str(row.__getattribute__(column))})
                
            count += 1
        dict['header'].update({'count':count})
        jsonarray      = json.dumps(dict)
        data           = json.loads(jsonarray)  
        dataframe      = json_normalize(data, 'detail').assign(**data['header'])
        fh,output_file = tempfile.mkstemp(suffix='', prefix='%_'%table_name, dir='/tmp', text=False)
        xlsx_file      = '%s/%s'%(current_app.root_path,url_for('static',filename='%s.xls'%(output_file)))
        dataframe.to_excel(xlsx_file,sheet_name=table_name,columns=['id', 'username', 'role_id', 'email', 'password_hash', 'confirmed', 'CC_Id'])
        return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file.replace('/','_')+'.xls')
    elif mode == 'add':
        return redirect(url_for('.forms_%s'%table_name))
    elif mode == 'select':
        pass
        # if some filter is required
        if field is not None:
            if field == 'id':
                if value is not None:
                    query = query.filter_by(id=value)
            if field == 'username':
                if value is not None:
                    query = query.filter_by(username=value)
            if field == 'role_id':
                if value is not None:
                    query = query.filter_by(role_id=value)
            if field == 'email':
                if value is not None:
                    query = query.filter_by(email=value)
            if field == 'password_hash':
                if value is not None:
                    query = query.filter_by(password_hash=value)
            if field == 'confirmed':
                if value is not None:
                    query = query.filter_by(confirmed=value)
            if field == 'CC_Id':
                if value is not None:
                    query = query.filter_by(CC_Id=value)
            # ------------------------------------------------------------------
    # JOIN other tables and generate foreign fields
    # Will replace class name by sharding class in joins structure
    # will have no effect in no sharding environment
    query = query.join(Role,User.role_id == Role.id).add_columns(Role.name).join(cost_center,User.CC_Id == cost_center.CC_Id).add_columns(cost_center.CC_Description)
    # ------------------------------------------------------------------
    
    # Actual request from DB follows
    tracebox_log(query,logger,length=80)
    # getting paginated rows for query
    rows = query.paginate(page, per_page=current_app.config['LINES_PER_PAGE'], error_out=False)
    # Setting pagination variables ...
    if field is not None:
       next_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, field=field, value=value, page=rows.prev_num) if rows.has_prev else None
    else:
       next_url = url_for('.select_%s_query'%template_name, page=rows.next_num) if rows.has_next else None
       prev_url = url_for('.select_%s_query'%template_name, page=rows.prev_num) if rows.has_prev else None
    # Actual rendering ...
    if request.headers.get('Content-Type') is not None or request.args.get('JSON',None,type=str) is not None:
        # NOTE: needs review for JSONnifiyng output when needed (API Interface?)
        if "JSON" in request.headers.get('Content-Type') or request.args.get('JSON',None,type=str) is not None:
            logger.debug('select_%s_query(): will render: JSON rows'%template_name)
            logger.debug('select_%s_query(): Exit'%template_name)
            return json.dumps(serialize_object(rows.__dict__))
    logger.debug('select_%s_query(): will render: %s_All.html'%(template_name,table_name.lower()))
    logger.debug('select_%s_query(): Exit'%template_name)
    return render_template('%s_select_All.html'%template_name.lower(),rows=rows,options=options,collectordata=collectordata)
#===============================================================================
   
# ======================================================================
#  Auto-Generated code. Do not modify 
#  (C) Sertechno/Emtec Group (2018,2019,2020)
#  GLVH @ 2021-12-13 19:33:41.627707
# ======================================================================
# gen_views_api.html:AG 2021-12-13 19:33:41.627725
# table_name: Users
# class_name: User
# is shardened: None
# Table 'Users' keys = id
# Errors: None
# ID field found 'id' auto_increment db.Integer
# Users id field is 'Users.id' of type 'int:'

@main.route('/api/get/Users'     , methods=['GET'])
@main.route('/api/get/Users/<int:id>', methods=['GET'])
def api_get_Users(id=None):
    code       = API_OK
    message    = 'OK'
    rows       = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        #response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        #response.headers['Pragma']        = 'no-cache'
        try:
            id_counter = 0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values=[id]
            # Codigo para un solo campo de id
            # chequear si marcado explicitamente
            db.session.flush()
            query = db.session.query(Users)
            if id is not None:
                query = query.filter(Users.id == id_values[id_counter])
                rows = query.one_or_none()
            else:
                if request.args is not None and len(request.args):
                    if 'id' in request.args:
                        query = query.filter(Users.id == request.args.get('id'))
                    if 'username' in request.args:
                        query = query.filter(Users.username == request.args.get('username'))
                    if 'role_id' in request.args:
                        query = query.filter(Users.role_id == request.args.get('role_id'))
                    if 'email' in request.args:
                        query = query.filter(Users.email == request.args.get('email'))
                    if 'password_hash' in request.args:
                        query = query.filter(Users.password_hash == request.args.get('password_hash'))
                    if 'confirmed' in request.args:
                        query = query.filter(Users.confirmed == request.args.get('confirmed'))
                    if 'CC_Id' in request.args:
                        query = query.filter(Users.CC_Id == request.args.get('CC_Id'))
                rows = query.all()
            if rows is not None:
                if type(rows) == list:
                    for i in range(len(rows)):
                        rows[i] = json.loads(rows[i].get_json())
                else:
                    rows = [json.loads(rows.get_json())]
            else:
                rows = []
            if len(rows) == 0:
                code = API_NO_DATA
                state = get_api_state(API_NO_DATA)
                
                if id is None:
                    message = f"No 'Users' records found"
                else:
                    message = f"No 'Users.id' = {id} record found"
                
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Users',entities=rows,name=current_app.config['NAME'])

@main.route('/api/post/Users', methods=['POST'])
def api_post_Users():
    code    = API_OK
    message = 'OK'
    row     = None
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            row = Users()
            # Populates row from json, if ID=int:autoincrement then None
            row.id = None
            row.username = request.json.get('username',None)
            row.role_id = request.json.get('role_id',None)
            row.email = request.json.get('email',None)
            row.password_hash = request.json.get('password_hash',None)
            row.confirmed = request.json.get('confirmed',0)
            row.CC_Id = request.json.get('CC_Id',1)
            # ----------------------------------------------------------
            db.session.add(row)
            db.session.flush()
            db.session.commit()
            db.session.flush()
            db.session.refresh(row)
            db.session.flush()
            message = f"Created 'Users' id = {row.id}"
            row     = json.loads(row.get_json())
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
    else:
        code    = API_ERROR
        message = 'Unauthorized request'            
    return get_api_response(code=code,message=message,kind='Users',entities=[row],name=current_app.config['NAME'])

@main.route('/api/put/Users/<int:id>', methods=['PUT'])
def api_put_Users(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Users()
            query = db.session.query(Users)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Users.id == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                if 'username' in request.json.keys():
                    row.username = request.json.get('username')
                if 'role_id' in request.json.keys():
                    row.role_id = request.json.get('role_id')
                if 'email' in request.json.keys():
                    row.email = request.json.get('email')
                if 'password_hash' in request.json.keys():
                    row.password_hash = request.json.get('password_hash')
                if 'confirmed' in request.json.keys():
                    row.confirmed = request.json.get('confirmed')
                if 'CC_Id' in request.json.keys():
                    row.CC_Id = request.json.get('CC_Id')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Users' id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found Users with id = {id}"
                row     = None
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Users',entities=[row],name=current_app.config['NAME'])

@main.route('/api/patch/Users/<int:id>', methods=['PATCH'])
def api_patch_Users(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Users()
            query = db.session.query(Users)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Users.id == id_values[id_counter])
            id_counter += 1
            # --------------------------------------------------------------
            row = query.one_or_none()
            # If row exists then continue:
            if row is not None:
                # Second loop seek for updated fields ----------------------
                db.session.rollback()
                if request.values is not None and len(request.values):
                    if 'username' in request.values:
                        row.username = request.values.get('username')
                    if 'role_id' in request.values:
                        row.role_id = request.values.get('role_id')
                    if 'email' in request.values:
                        row.email = request.values.get('email')
                    if 'password_hash' in request.values:
                        row.password_hash = request.values.get('password_hash')
                    if 'confirmed' in request.values:
                        row.confirmed = request.values.get('confirmed')
                    if 'CC_Id' in request.values:
                        row.CC_Id = request.values.get('CC_Id')
                # ----------------------------------------------------------
                db.session.merge(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                db.session.refresh(row)
                db.session.flush()
                message = f"Modified 'Users' id = {id}"
                try:
                    row     = json.loads(row.get_json())
                except:
                    row     = None
            else:
                code    = API_NOT_FOUND
                message = f"Not found Users with id = {id}"
                row     = None
                db.session.rollback()
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
            row     = None
            db.session.rollback()
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Users',entities=[row],name=current_app.config['NAME'])

@main.route('/api/delete/Users/<int:id>', methods=['DELETE'])
def api_delete_Users(id):
    code    = API_OK
    message = 'OK'
    authorized = api_check_authorization(request,current_app)
    if authorized:
        try:
            id_counter=0
            if type(id) == str and ',' in id:
                id_values = id.split(',')
            else:
                id_values = [id]
            row   = Users()
            query = db.session.query(Users)
            
            # First loop mandatory for row population ----------------------
            query = query.filter(Users.id == id)
            # --------------------------------------------------------------
            row = query.one_or_none()

            if row is not None:
                db.session.delete(row)
                db.session.flush()
                db.session.commit()
                db.session.flush()
                message = f"Deleted 'Users' id = {id}"
                row     = json.loads(row.get_json())
            else:
                code    = API_NOT_FOUND
                message = f"Not found 'Users' with id = {id}"
                row     = None        
        except Exception as e:
            emtec_handle_general_exception(e,fp=sys.stderr)
            code    = API_SYSTEM_ERROR
            message = str(e)
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(code=code,message=message,kind='Users',entities=[],name=current_app.config['NAME'])

# ======================================================================# =============================================================================
# View for Change_CIT_State
# (c) Sertechno 2018
# GLVH @ 2019-08-16
# =============================================================================

from emtec.collector.forms       import frm_change_cit_state,frm_change_cit_state_confirm
from babel.numbers  import format_number, format_decimal, format_percent
from sqlalchemy     import and_

@main.route('/forms/Change_CIT_State', methods=['GET', 'POST'])
@login_required
def forms_Change_CIT_State():
    logger.debug('Enter: forms_Change_CIT_State()'%())

    session['data'] =  {    'CU_Id': None, 
                            'CIT_Date_From':None, 
                            'CIT_Time_From':'00:00:00', 
                            'CIT_Date_To':None, 
                            'CIT_Time_To':'23:00:00', 
                            'CIT_Status':1,
                            'CIT_Status_To':1
                       }

    form = frm_change_cit_state()

    hours=[]
    for h in range(0,24):
        hh="%02d:00:00"%h
        hours.append((hh,hh))

    form.CU_Id.choices = db.session.query(charge_unit.CU_Id,charge_unit.CU_Description).order_by(charge_unit.CU_Description).all()
    form.CIT_Status.choices = db.session.query(cit_status.CIT_Status,cit_status.Value).all()
    form.CIT_Status_To.choices = db.session.query(cit_status.CIT_Status,cit_status.Value).all()
    form.CIT_Time_From.choices = hours
    form.CIT_Time_To.choices = hours
 
    if form.validate_on_submit():
        session['data']['CU_Id'         ] = form.CU_Id.data
        session['data']['CIT_Date_From' ] = form.CIT_Date_From.data
        session['data']['CIT_Time_From' ] = form.CIT_Time_From.data
        session['data']['CIT_Date_To'   ] = form.CIT_Date_To.data
        session['data']['CIT_Time_To'   ] = form.CIT_Time_To.data
        session['data']['CIT-Status'    ] = form.CIT_Status.data
        session['data']['CIT-Status_To' ] = form.CIT_Status_To.data
        if     form.submit_Search.data:
            # Get the Selected options index for string lists
            for i in range(len(form.CU_Id.choices)):
                if form.CU_Id.choices[i][0]==form.CU_Id.data:
                    cu_index=i
            return redirect(url_for('.report_Change_CIT_State_Confirm',
                                CU_Id           = form.CU_Id.data,
                                CU_Description        = form.CU_Id.choices[cu_index][1],
                                CIT_Date_From   = form.CIT_Date_From.data,
                                CIT_Time_From   = form.CIT_Time_From.data,
                                CIT_Date_To     = form.CIT_Date_To.data,
                                CIT_Time_To     = form.CIT_Time_To.data,
                                CIT_Status      = form.CIT_Status.data,
                                CIT_Status_Value= form.CIT_Status.choices[form.CIT_Status.data-1][1],
                                CIT_Status_To      = form.CIT_Status_To.data,
                                CIT_Status_To_Value= form.CIT_Status.choices[form.CIT_Status_To.data-1][1],
                                ))
        elif   form.submit_Cancel.data:
            flash('Search discarded ...')
        else:
            flash('form validated but not submited. Report to Support ...')
        return redirect(url_for('.forms_Change_CIT_State'))

    form.CU_Id.data        = session['data']['CU_Id']
    form.CIT_Date_From.data = session['data']['CIT_Date_From']
    form.CIT_Time_From.data = session['data']['CIT_Time_From']
    form.CIT_Date_To.data   = session['data']['CIT_Date_To']
    form.CIT_Time_To.data   = session['data']['CIT_Time_To']
    form.CIT_Status.data    = session['data']['CIT_Status']
    form.CIT_Status_To.data    = session['data']['CIT_Status_To']

    return render_template('change_cit_state.html',form=form, data=session.get('data'))

# =============================================================================

import simplejson as json
import datetime

@main.route('/report/Change_CIT_State_Confirm', methods=['GET','POST'])
@login_required
def report_Change_CIT_State_Confirm():
    logger.debug('Enter: report_Charging_Resume()')
    CU_Id          =  request.args.get('CU_Id',None,type=int)
    CU_Description        =  request.args.get('CU_Description',None,type=str)
    CIT_Date_From   =  request.args.get('CIT_Date_From',None,type=str)
    CIT_Time_From   =  request.args.get('CIT_Time_From',None,type=str)
    CIT_Date_To     =  request.args.get('CIT_Date_To',None,type=str)
    CIT_Time_To     =  request.args.get('CIT_Time_To',None,type=str)
    CIT_Status      =  request.args.get('CIT_Status',None,type=int)
    CIT_Status_Value=  request.args.get('CIT_Status_Value',None,type=str)
    CIT_Status_To      =  request.args.get('CIT_Status_To',None,type=int)
    CIT_Status_To_Value=  request.args.get('CIT_Status_To_Value',None,type=str)    

    # DateTime fields are required for correct searches & updates
    CIT_DateTime_From   =  '%s %s'%(CIT_Date_From,CIT_Time_From)
    CIT_DateTime_To     =  '%s %s'%(CIT_Date_To,CIT_Time_To)
    
    query = db.session.query(charge_item)\
                    .join(charge_unit).add_column(charge_unit.CU_UUID)\
                    .join(configuration_item)\
                    .filter(charge_item.CU_Id == CU_Id)\
                    .filter(charge_item.CIT_Status == CIT_Status)\
                    .filter(and_(   charge_item.CIT_DateTime >= CIT_DateTime_From,
                                    charge_item.CIT_DateTime <= CIT_DateTime_To
                                )
                            )
        
    rows=query.all()

    form = frm_change_cit_state_confirm()

    if form.validate_on_submit():
        if     form.submit_Change.data:
            # Aqui cambia efectivamente los datos
            query = db.session.query(charge_item)\
                    .filter(charge_item.CU_Id == CU_Id)\
                    .filter(charge_item.CIT_Status == CIT_Status)\
                    .filter(and_(   charge_item.CIT_DateTime >= CIT_DateTime_From,
                                    charge_item.CIT_DateTime <= CIT_DateTime_To
                                )
                            )
            rows=query.all()
                        
            try:
                count=0
                audit_records=[]
                for row in rows:
                    previous=str(row)
                    row.CIT_Status = CIT_Status_To
                    updated=str(row)
                    audit_records.append([previous,updated])
                    count += 1
                db.session.commit()
                flash("Charge Items status modified OK from '%s' to '%s' for %d records"%(CIT_Status_Value,CIT_Status_To_Value,count))
                for record in audit_records:
                    logger.audit("%s:OLD:%s"%(current_user.username,record[0]))
                    logger.audit("%s:UPD:%s"%(current_user.username,record[1]))
            except Exception as e:
                flash("Exception updating Charge Items: %s"%e)            
            return redirect(url_for('.forms_Change_CIT_State'))
        elif   form.submit_Cancel.data:
            flash('Change discarded ...')
        else:
            flash('form validated but not submited. Report to Support ...')
        return redirect(url_for('.forms_Change_CIT_State'))
    
    return render_template('change_cit_state_confirm.html',rows=rows,form=form,
                CU_Id=CU_Id,
                CU_Description=CU_Description,
                CIT_Date_From=CIT_Date_From,
                CIT_Time_From=CIT_Time_From,
                CIT_Date_To=CIT_Date_To,
                CIT_Time_To=CIT_Time_To,
                CIT_Status=CIT_Status,
                CIT_Status_Value=CIT_Status_Value,                
                CIT_Status_To=CIT_Status_To,
                CIT_Status_To_Value=CIT_Status_To_Value 
                )


# =============================================================================
# View for Get Charging Resume from DB
# (c) Sertechno 2018
# GLVH @ 2019-08-16
# =============================================================================

from emtec.collector.forms  import frm_charging_resume_all
from babel.numbers          import format_number
from babel.numbers          import format_decimal
from babel.numbers          import format_percent

@main.route('/forms/Get_Charging_Resume_All', methods=['GET', 'POST'])
@login_required
def forms_Get_Charging_Resume_All():
    logger.debug(f'{this()}: Enter')

    db.session.flush()
    db.session.commit()

    collectordata=get_collectordata()

    session['data'] =  {    
        'User_Id': current_user.id,
        'Cus_Id': None,
        'CIT_Date_From':collectordata['COLLECTOR_PERIOD']['start'], 
        'CIT_Date_To':collectordata['COLLECTOR_PERIOD']['end'], 
        'CIT_Status':1,
        'Cur_Code':'USD'
        }

    form = frm_charging_resume_all()

    # ------------------------------------------------------------------------------
    # Will setup filter to consider only Currencies with actual Exchange Rates in DB
    # Commit all pending DB states in order to refresh data
    db.session.commit()
    # Prepare query
    query = db.session.query(exchange_rate.Cur_Code.distinct().label('Cur_Code'))
    # Execute query and convert in list for further use in choices selection
    cur_choices = [row.Cur_Code for row in query.all()]

    form.CIT_Status.choices = db.session.query(cit_status.CIT_Status,cit_status.Value).all()
    form.Cur_Code.choices   = db.session.query(currency.Cur_Code,currency.Cur_Name).filter(currency.Cur_Code.in_(cur_choices)).all()

    if form.validate_on_submit():
        session['data']['CIT_Date_From' ] = form.CIT_Date_From.data
        session['data']['CIT_Date_To'   ] = form.CIT_Date_To.data
        session['data']['CIT-Status'    ] = form.CIT_Status.data
        session['data']['Cur_Code'      ] = form.Cur_Code.data
        if     form.submit_Report.data:
            # Get the Selected options index for string lists
            for i in range(len(form.Cur_Code.choices)):
                if form.Cur_Code.choices[i][0]==form.Cur_Code.data:
                    cur_index=i
            return redirect(url_for('.report_Charging_Resume_All',
                                CIT_Date_From   = form.CIT_Date_From.data,
                                CIT_Date_To     = form.CIT_Date_To.data,
                                CIT_Status      = form.CIT_Status.data,
                                CIT_Status_Value= form.CIT_Status.choices[form.CIT_Status.data-1][1],
                                Cur_Code        = form.Cur_Code.data,
                                Cur_Name        = form.Cur_Code.choices[cur_index][1],
                                Update          = 0
                                ))
        if     form.submit_Update.data:
            # Get the Selected options index for string lists
            for i in range(len(form.Cur_Code.choices)):
                if form.Cur_Code.choices[i][0]==form.Cur_Code.data:
                    cur_index=i
            return redirect(url_for('.report_Charging_Resume_All',
                                CIT_Date_From   = form.CIT_Date_From.data,
                                CIT_Date_To     = form.CIT_Date_To.data,
                                CIT_Status      = form.CIT_Status.data,
                                CIT_Status_Value= form.CIT_Status.choices[form.CIT_Status.data-1][1],
                                Cur_Code        = form.Cur_Code.data,
                                Cur_Name        = form.Cur_Code.choices[cur_index][1],
                                Update          = 1
                                ))

        elif   form.submit_Cancel.data:
            flash('Report discarded ...')
        else:
            flash('form validated but not submited. Report to Support ...')
        return redirect(url_for('.forms_Get_Charging_Resume_All'))

    form.CIT_Date_From.data = session['data']['CIT_Date_From']
    form.CIT_Date_To.data   = session['data']['CIT_Date_To']
    form.CIT_Status.data    = session['data']['CIT_Status']
    form.Cur_Code.data      = session['data']['Cur_Code']

    return render_template(
        'charging_resume_all.html',
        form=form, 
        data=session.get('data'),
        collectordata=collectordata
        )

# =============================================================================

import simplejson as json

@main.route('/report/Charging_Resume_All', methods=['GET','POST'])
@login_required
def report_Charging_Resume_All():
    logger.debug(f'{this()}: Enter')    

    db.session.flush()
    db.session.commit()

    collectordata=get_collectordata()

    CIT_Date_From   =  request.args.get('CIT_Date_From',None,type=str)
    CIT_Date_To     =  request.args.get('CIT_Date_To',None,type=str)
    CIT_Status      =  request.args.get('CIT_Status',None,type=int)
    CIT_Status_Value=  request.args.get('CIT_Status_Value',None,type=str)
    Cur_Code        =  request.args.get('Cur_Code',None,type=str)
    Cur_Name        =  request.args.get('Cur_Name',None,type=str)
    Update          =  request.args.get('Update',0,type=int)
    
    # Updated cached data for this specific query if requested 
    if Update == 1:
        CI = db.session.query(
                Configuration_Items.CI_Id,
                Configuration_Items.Cus_Id
                ).order_by(
                    Configuration_Items.CC_Id,
                    Configuration_Items.CI_Id
                ).all()
        
        logger.debug (f"{this()}: {len(CI)} CI's found ")
        Cus_Id=None
        logger.info(f"{this()}: Updating Charge Resume Update ...")
        ci_list = []
        for ci in CI:
            ci_list.append(ci.CI_Id)
            if Cus_Id is None: Cus_Id = ci.Cus_Id 
            
        records = db.Update_Charge_Resume_CIS(
            Cus_Id,
            CIT_Date_From,
            CIT_Date_To,
            CIT_Status,
            Cur_Code,
            ci_list,             # <-- Lista de CIs Requeridos          
            charge_item,
            current_user.id
            )

    # Get Actual Remume Data from Database
    # NOTE: Here needs some Sand-Clock Message or something in case it takes so long ...

    rows = db.Get_Charge_Resume_Filter(
                FILTER_ALL,
                0,
                CIT_Date_From,
                CIT_Date_To,
                CIT_Status,
                Cur_Code,
                User_Id=current_user.id
            )

    return render_template('report_charging_resume_all.html',
                rows=rows,
                CIT_Date_From=CIT_Date_From,
                CIT_Date_To=CIT_Date_To,
                CIT_Status=CIT_Status,
                CIT_Status_Value=CIT_Status_Value,                
                Cur_Code=Cur_Code,
                Cur_Name=Cur_Name
                )
# ======================================================================
# View for Get Charging Resume from DB per CC
# (c) Sertechno 2019
# GLVH @ 2019-08-16
# ======================================================================

from emtec.collector.db.orm import *
from emtec.collector.forms  import frm_charging_resume_cc
from babel.numbers          import format_number
from babel.numbers          import format_decimal
from babel.numbers          import format_percent

@main.route('/forms/Get_Charging_Resume_CC', methods=['GET', 'POST'])
@login_required
def forms_Get_Charging_Resume_CC():
    logger.debug(f'{this()}: Enter')
    collectordata=get_collectordata()

    session['data'] =  {    'CC_Id': None, 
                            'CIT_Date_From':collectordata['COLLECTOR_PERIOD']['start'], 
                            'CIT_Date_To':collectordata['COLLECTOR_PERIOD']['end'], 
                            'CIT_Status':1,
                            'Cur_Code':'USD'
                        }

    form = frm_charging_resume_cc()
    # ------------------------------------------------------------------
    # Will setup filter to consider only Currencies with actual Exchange
    # Rates in DB
    # Commit all pending DB states in order to refresh data
    db.session.commit()
    # Prepare query
    query = db.session.query(exchange_rate.Cur_Code.distinct().label('Cur_Code'))
    # Execute query and convert in list for further use in choices selection
    cur_choices = [row.Cur_Code for row in query.all()]
    # ------------------------------------------------------------------

    form.CC_Id.choices      = db.session.query(cost_center.CC_Id,cost_center.CC_Description).all()
    form.CIT_Status.choices = db.session.query(cit_status.CIT_Status,cit_status.Value).all()
    form.Cur_Code.choices   = db.session.query(currency.Cur_Code,currency.Cur_Name).filter(currency.Cur_Code.in_(cur_choices)).all()

    if form.validate_on_submit():
        session['data']['CC_Id'         ] = form.CC_Id.data
        session['data']['CIT_Date_From' ] = form.CIT_Date_From.data
        session['data']['CIT_Date_To'   ] = form.CIT_Date_To.data
        session['data']['CIT-Status'    ] = form.CIT_Status.data
        session['data']['Cur_Code'      ] = form.Cur_Code.data
        if     form.submit_Report.data:
            # Get the Selected options index for string lists
            for i in range(len(form.CC_Id.choices)):
                if form.CC_Id.choices[i][0]==form.CC_Id.data:
                    cc_index=i
            for i in range(len(form.Cur_Code.choices)):
                if form.Cur_Code.choices[i][0]==form.Cur_Code.data:
                    cur_index=i
            return redirect(url_for('.report_Charging_Resume_CC',
                                CC_Id           = form.CC_Id.data,
                                CC_Description  = form.CC_Id.choices[cc_index][1],
                                CIT_Date_From   = form.CIT_Date_From.data,
                                CIT_Date_To     = form.CIT_Date_To.data,
                                CIT_Status      = form.CIT_Status.data,
                                CIT_Status_Value= form.CIT_Status.choices[form.CIT_Status.data-1][1],
                                Cur_Code        = form.Cur_Code.data,
                                Cur_Name        = form.Cur_Code.choices[cur_index][1],
                                Update          = 0
                                ))
        if     form.submit_Update.data:
            # Get the Selected options index for string lists
            for i in range(len(form.CC_Id.choices)):
                if form.CC_Id.choices[i][0]==form.CC_Id.data:
                    cc_index=i
            for i in range(len(form.Cur_Code.choices)):
                if form.Cur_Code.choices[i][0]==form.Cur_Code.data:
                    cur_index=i
            return redirect(url_for('.report_Charging_Resume_CC',
                                CC_Id           = form.CC_Id.data,
                                CC_Description  = form.CC_Id.choices[cc_index][1],
                                CIT_Date_From   = form.CIT_Date_From.data,
                                CIT_Date_To     = form.CIT_Date_To.data,
                                CIT_Status      = form.CIT_Status.data,
                                CIT_Status_Value= form.CIT_Status.choices[form.CIT_Status.data-1][1],
                                Cur_Code        = form.Cur_Code.data,
                                Cur_Name        = form.Cur_Code.choices[cur_index][1],
                                Update          = 1
                                ))

        elif   form.submit_Cancel.data:
            flash('Report discarded ...')
        else:
            flash('Form validated but not submited. Report to Support ...')
        return redirect(url_for('.forms_Get_Charging_Resume'))

    form.CC_Id.data         = session['data']['CC_Id']
    form.CIT_Date_From.data = session['data']['CIT_Date_From']
    form.CIT_Date_To.data   = session['data']['CIT_Date_To']
    form.CIT_Status.data    = session['data']['CIT_Status']
    form.Cur_Code.data      = session['data']['Cur_Code']

    return render_template( 'charging_resume_cc.html',
                            form=form, 
                            data=session.get('data'),
                            collectordata=collectordata
                            )

# ======================================================================

import simplejson as json

@main.route('/report/Charging_Resume_CC', methods=['GET','POST'])
@login_required
def report_Charging_Resume_CC():
    logger.debug(f'{this()}: Enter')
    
    collectordata=get_collectordata()
    
    db.session.flush()
    db.session.commit()

    CC_Id           =  request.args.get('CC_Id',None,type=int)
    CC_Description  =  request.args.get('CC_Description',None,type=str)
    CIT_Date_From   =  request.args.get('CIT_Date_From',None,type=str)
    CIT_Date_To     =  request.args.get('CIT_Date_To',None,type=str)
    CIT_Status      =  request.args.get('CIT_Status',None,type=int)
    CIT_Status_Value=  request.args.get('CIT_Status_Value',None,type=str)
    Cur_Code        =  request.args.get('Cur_Code',None,type=str)
    Cur_Name        =  request.args.get('Cur_Name',None,type=str)
    Update          =  request.args.get('Update',0,type=int)
    
    # Updated cached data for this specific query if requested 
    if Update == 1:
        logger.debug (f"{this()}: Update is requested")
        # -------------------------------------------------------------------------------------------------------------- #
        # Previous Code faster but requires more memory will be replaced by an by CI loop                                #
        # -------------------------------------------------------------------------------------------------------------- #
        Cus_Id=db.session.query(Cost_Centers.Cus_Id
            ).filter(Cost_Centers.CC_Id==CC_Id
            ).first(
            )[0]
            
        LISTA = db.get_cost_centers(CC_Id)
        logger.debug(f"{this()}: LISTA de CCs= {LISTA}")
        CI = db.session.query(Configuration_Items.CI_Id,Configuration_Items.Cus_Id).\
                filter(Configuration_Items.CC_Id.in_(LISTA)).\
                order_by(Configuration_Items.CC_Id,Configuration_Items.CI_Id).all()
        
        logger.debug (f"{this()}: {len(CI)} CI's found for cost center {CC_Id}")
        
        resume_records=0
        
        logger.info(f"{this()}: Updating Charge Resume Update ...")
        ci_list = []
        
        for ci in CI:
            ci_list.append(ci.CI_Id)
        records = db.Update_Charge_Resume_CIS(
            Cus_Id,
            CIT_Date_From,
            CIT_Date_To,
            CIT_Status,
            Cur_Code,
            ci_list,             # <-- Lista de CIs Requeridos          
            charge_item,
            current_user.id
            )
    
        logger.debug (f"{this()}: Resume_records updated= {resume_records}")
    else:
        logger.debug (f"{this()}: Update is NOT requested")
    
    # Get Actual Remume Data from Database
    # NOTE: Here needs some Sand-Clock Message or something in case it takes so long ...
    rows = db.Get_Charge_Resume_Filter(
                FILTER_COST_CENTER,
                CC_Id,
                CIT_Date_From,
                CIT_Date_To,
                CIT_Status,
                Cur_Code,
                User_Id=current_user.id
            )
    return render_template(
                'report_charging_resume.html',
                rows=rows,
                CC_Id=CC_Id,
                CC_Description=CC_Description,
                CIT_Date_From=CIT_Date_From,
                CIT_Date_To=CIT_Date_To,
                CIT_Status=CIT_Status,
                CIT_Status_Value=CIT_Status_Value,                
                Cur_Code=Cur_Code,
                Cur_Name=Cur_Name,
                collectordata=collectordata
                )
# ======================================================================
# View for Get Charging Resume from DB
# (c) Sertechno 2018
# GLVH @ 2019-08-16
# ======================================================================

from emtec.collector.forms  import frm_charging_resume_level
from babel.numbers          import format_number
from babel.numbers          import format_decimal
from babel.numbers          import format_percent

@main.route('/forms/Get_Charging_Resume_Level', methods=['GET', 'POST'])
@login_required
def forms_Get_Charging_Resume_Level():
    logger.debug(f'{this()}: Enter')
    collectordata=get_collectordata()

    session['data'] =  {    'Cus_Id': None, 
                            'CIT_Date_From':collectordata['COLLECTOR_PERIOD']['start'], 
                            'CIT_Date_To':collectordata['COLLECTOR_PERIOD']['end'], 
                            'CIT_Status':1,
                            'Cur_Code':'USD',
                            'Level':1}

    form = frm_charging_resume_level()

    # ------------------------------------------------------------------------------
    # Will setup filter to consider only Currencies with actual Exchange Rates in DB
    # Commit all pending DB states in order to refresh data
    db.session.commit()
    # Prepare query
    query = db.session.query(exchange_rate.Cur_Code.distinct().label('Cur_Code'))
    # Execute query and convert in list for further use in choices selection
    cur_choices = [row.Cur_Code for row in query.all()]

    form.Cus_Id.choices     = db.session.query(customer.Cus_Id,customer.Cus_Name).all()
    form.CIT_Status.choices = db.session.query(cit_status.CIT_Status,cit_status.Value).all()
    form.Cur_Code.choices   = db.session.query(currency.Cur_Code,currency.Cur_Name).filter(currency.Cur_Code.in_(cur_choices)).all()
    form.Level.choices      = [(1,"Cost Center"),(2,"Device"),(3,"Component")]

    if form.validate_on_submit():
        session['data']['Cus_Id'        ] = form.Cus_Id.data
        session['data']['CIT_Date_From' ] = form.CIT_Date_From.data
        session['data']['CIT_Date_To'   ] = form.CIT_Date_To.data
        session['data']['CIT-Status'    ] = form.CIT_Status.data
        session['data']['Cur_Code'      ] = form.Cur_Code.data
        session['data']['Level'         ] = form.Level.data
        
        if     form.submit_Report.data:
            # Get the Selected options index for string lists
            for i in range(len(form.Cus_Id.choices)):
                if form.Cus_Id.choices[i][0]==form.Cus_Id.data:
                    cus_index=i
            for i in range(len(form.Cur_Code.choices)):
                if form.Cur_Code.choices[i][0]==form.Cur_Code.data:
                    cur_index=i
            for i in range(len(form.Level.choices)):
                if form.Level.choices[i][0]==form.Level.data:
                    level_index=i
            return redirect(url_for('.report_Charging_Resume_Level',
                                Cus_Id          = form.Cus_Id.data,
                                Cus_Name        = form.Cus_Id.choices[cus_index][1],
                                CIT_Date_From   = form.CIT_Date_From.data,
                                CIT_Date_To     = form.CIT_Date_To.data,
                                CIT_Status      = form.CIT_Status.data,
                                CIT_Status_Value= form.CIT_Status.choices[form.CIT_Status.data-1][1],
                                Cur_Code        = form.Cur_Code.data,
                                Cur_Name        = form.Cur_Code.choices[cur_index][1],
                                Level           = form.Level.choices[level_index][1],
                                Update          = 0
                                ))
        if     form.submit_Update.data:
            # Get the Selected options index for string lists
            for i in range(len(form.Cus_Id.choices)):
                if form.Cus_Id.choices[i][0]==form.Cus_Id.data:
                    cus_index=i
            for i in range(len(form.Cur_Code.choices)):
                if form.Cur_Code.choices[i][0]==form.Cur_Code.data:
                    cur_index=i
            for i in range(len(form.Level.choices)):
                if form.Level.choices[i][0]==form.Level.data:
                    level_index=i
            return redirect(url_for('.report_Charging_Resume_Level',
                                Cus_Id          = form.Cus_Id.data,
                                Cus_Name        = form.Cus_Id.choices[cus_index][1],
                                CIT_Date_From   = form.CIT_Date_From.data,
                                CIT_Date_To     = form.CIT_Date_To.data,
                                CIT_Status      = form.CIT_Status.data,
                                CIT_Status_Value= form.CIT_Status.choices[form.CIT_Status.data-1][1],
                                Cur_Code        = form.Cur_Code.data,
                                Cur_Name        = form.Cur_Code.choices[cur_index][1],
                                Level           = form.Level.choices[level_index][1],
                                Update          = 1
                                ))

        elif   form.submit_Cancel.data:
            flash('Report discarded ...')
        else:
            flash('form validated but not submited. Report to Support ...')
        return redirect(url_for('.forms_Get_Charging_Resume_Level'))

    form.Cus_Id.data        = session['data']['Cus_Id']
    form.CIT_Date_From.data = session['data']['CIT_Date_From']
    form.CIT_Date_To.data   = session['data']['CIT_Date_To']
    form.CIT_Status.data    = session['data']['CIT_Status']
    form.Cur_Code.data      = session['data']['Cur_Code']
    form.Level.data         = session['data']['Level']

    return render_template(
        'charging_resume_level.html',
        form=form, 
        data=session.get('data'),
        collectordata=collectordata
        )

# =============================================================================

import simplejson as json

@main.route('/report/Charging_Resume_Level', methods=['GET','POST'])
@login_required
def report_Charging_Resume_Level():
    logger.debug(f'{this()}: Enter')
    collectordata=get_collectordata()
    
    db.session.flush()
    db.session.commit()
    
    Cus_Id          =  request.args.get('Cus_Id',None,type=int)
    Cus_Name        =  request.args.get('Cus_Name',None,type=str)
    CIT_Date_From   =  request.args.get('CIT_Date_From',None,type=str)
    CIT_Date_To     =  request.args.get('CIT_Date_To',None,type=str)
    CIT_Status      =  request.args.get('CIT_Status',None,type=int)
    CIT_Status_Value=  request.args.get('CIT_Status_Value',None,type=str)
    Cur_Code        =  request.args.get('Cur_Code',None,type=str)
    Cur_Name        =  request.args.get('Cur_Name',None,type=str)
    Level           =  request.args.get('Level',None,type=str)
    Update          =  request.args.get('Update',0,type=int)
    
    # Updated cached data for this specific query if requested 
    if Update == 1:
        CI = db.session.query(
                Configuration_Items.CI_Id.distinct().label('CI_Id')
                ).filter(Configuration_Items.Cus_Id==Cus_Id
                ).order_by(Configuration_Items.CI_Id
                ).all()
        logger.debug (f"{this()}: {len(CI)} CI's found for customer {Cus_Id}")
        
        resume_records=0

        logger.info(f"{this()}: Updating Charge Resume Update ...")
        ci_list = []
        for ci in CI:
            ci_list.append(ci.CI_Id)
        records = db.Update_Charge_Resume_CIS(
            Cus_Id,
            CIT_Date_From,
            CIT_Date_To,
            CIT_Status,
            Cur_Code,
            ci_list,             # <-- Lista de CIs Requeridos          
            charge_item,
            current_user.id
            )
    
        logger.debug (f"{this()}: resume_records = {resume_records}")
        
    # Get Actual Remume Data from Database
    # NOTE: Here needs some Sand-Clock Message or something in case it takes so long ...

    rows =  db.Get_Charge_Resume_Filter(
                FILTER_CUSTOMER,
                Cus_Id,
                CIT_Date_From,
                CIT_Date_To,
                CIT_Status,
                Cur_Code,
                User_Id=current_user.id
            )
    
    return render_template('report_charging_resume_level.html',
                rows=rows,
                Cus_Id=Cus_Id,
                Cus_Name=Cus_Name,
                CIT_Date_From=CIT_Date_From,
                CIT_Date_To=CIT_Date_To,
                CIT_Status=CIT_Status,
                CIT_Status_Value=CIT_Status_Value,                
                Cur_Code=Cur_Code,
                Cur_Name=Cur_Name,
                Level=Level,
                collectordata=collectordata
                )
# =============================================================================
# View for Get Charging Resume from DB
# (c) Sertechno 2018
# GLVH @ 2019-08-16
# =============================================================================

from emtec.collector.forms  import frm_charging_resume_platform
from babel.numbers          import format_number
from babel.numbers          import format_decimal
from babel.numbers          import format_percent

@main.route('/forms/Get_Charging_Resume_Platform', methods=['GET', 'POST'])
@login_required
def forms_Get_Charging_Resume_Platform():
    logger.debug(f'{this()}: Enter')
    collectordata=get_collectordata()
    session['data'] =  {    'Pla_Id': None, 
                            'CIT_Date_From':collectordata['COLLECTOR_PERIOD']['start'], 
                            'CIT_Date_To':collectordata['COLLECTOR_PERIOD']['end'], 
                            'CIT_Status':1,
                            'Cur_Code':'USD'}

    form = frm_charging_resume_platform()

    # ------------------------------------------------------------------------------
    # Will setup filter to consider only Currencies with actual Exchange Rates in DB
    # Commit all pending DB states in order to refresh data
    db.session.commit()
    # Prepare query
    query = db.session.query(exchange_rate.Cur_Code.distinct().label('Cur_Code'))
    # Execute query and convert in list for further use in choices selection
    cur_choices = [row.Cur_Code for row in query.all()]

    form.Pla_Id.choices     = db.session.query(platform.Pla_Id,platform.Pla_Name).all()
    form.CIT_Status.choices = db.session.query(cit_status.CIT_Status,cit_status.Value).all()
    form.Cur_Code.choices   = db.session.query(currency.Cur_Code,currency.Cur_Name).filter(currency.Cur_Code.in_(cur_choices)).all()

    if form.validate_on_submit():
        session['data']['Pla_Id'        ] = form.Pla_Id.data
        session['data']['CIT_Date_From' ] = form.CIT_Date_From.data
        session['data']['CIT_Date_To'   ] = form.CIT_Date_To.data
        session['data']['CIT-Status'    ] = form.CIT_Status.data
        session['data']['Cur_Code'      ] = form.Cur_Code.data
        if     form.submit_Report.data:
            # Get the Selected options index for string lists
            for i in range(len(form.Pla_Id.choices)):
                if form.Pla_Id.choices[i][0]==form.Pla_Id.data:
                    pla_index=i
            for i in range(len(form.Cur_Code.choices)):
                if form.Cur_Code.choices[i][0]==form.Cur_Code.data:
                    cur_index=i
            return redirect(url_for('.report_Charging_Resume_Platform',
                                Pla_Id          = form.Pla_Id.data,
                                Pla_Name        = form.Pla_Id.choices[pla_index][1],
                                CIT_Date_From   = form.CIT_Date_From.data,
                                CIT_Date_To     = form.CIT_Date_To.data,
                                CIT_Status      = form.CIT_Status.data,
                                CIT_Status_Value= form.CIT_Status.choices[form.CIT_Status.data-1][1],
                                Cur_Code        = form.Cur_Code.data,
                                Cur_Name        = form.Cur_Code.choices[cur_index][1],
                                Update          = 0
                                ))
        if     form.submit_Update.data:
            # Get the Selected options index for string lists
            for i in range(len(form.Pla_Id.choices)):
                if form.Pla_Id.choices[i][0]==form.Pla_Id.data:
                    pla_index=i
            for i in range(len(form.Cur_Code.choices)):
                if form.Cur_Code.choices[i][0]==form.Cur_Code.data:
                    cur_index=i
            return redirect(url_for('.report_Charging_Resume_Platform',
                                Pla_Id          = form.Pla_Id.data,
                                Pla_Name        = form.Pla_Id.choices[pla_index][1],
                                CIT_Date_From   = form.CIT_Date_From.data,
                                CIT_Date_To     = form.CIT_Date_To.data,
                                CIT_Status      = form.CIT_Status.data,
                                CIT_Status_Value= form.CIT_Status.choices[form.CIT_Status.data-1][1],
                                Cur_Code        = form.Cur_Code.data,
                                Cur_Name        = form.Cur_Code.choices[cur_index][1],
                                Update          = 1
                                ))

        elif   form.submit_Cancel.data:
            flash('Report discarded ...')
        else:
            flash('Form validated but not submited. Report to Support ...')
        return redirect(url_for('.forms_Get_Charging_Resume_Platform'))

    form.Pla_Id.data        = session['data']['Pla_Id']
    form.CIT_Date_From.data = session['data']['CIT_Date_From']
    form.CIT_Date_To.data   = session['data']['CIT_Date_To']
    form.CIT_Status.data    = session['data']['CIT_Status']
    form.Cur_Code.data      = session['data']['Cur_Code']

    return render_template('charging_resume_platform.html',form=form, data=session.get('data'),collectordata=collectordata)

# =============================================================================

import simplejson as json

@main.route('/report/Charging_Resume_Platform', methods=['GET','POST'])
@login_required
def report_Charging_Resume_Platform():
    logger.debug(f'{this()}: Enter')
    
    collectordata=get_collectordata()

    db.session.flush()
    db.session.commit()

    Pla_Id          =  request.args.get('Pla_Id',None,type=int)
    Pla_Name        =  request.args.get('Pla_Name',None,type=str)
    CIT_Date_From   =  request.args.get('CIT_Date_From',None,type=str)
    CIT_Date_To     =  request.args.get('CIT_Date_To',None,type=str)
    CIT_Status      =  request.args.get('CIT_Status',None,type=int)
    CIT_Status_Value=  request.args.get('CIT_Status_Value',None,type=str)
    Cur_Code        =  request.args.get('Cur_Code',None,type=str)
    Cur_Name        =  request.args.get('Cur_Name',None,type=str)
    Update          =  request.args.get('Update',0,type=int)
        
    # Updated cached data for this specific query if requested 
    if Update == 1:
        
        CI = db.session.query(
                Configuration_Items.CI_Id,
                Configuration_Items.Cus_Id,
                ).filter(Configuration_Items.Pla_Id==Pla_Id
                ).order_by( Configuration_Items.CC_Id,
                            Configuration_Items.CI_Id
                ).all()
        
        logger.debug (f"{this()}: {len(CI)} CI's found for platform {Pla_Id}")
        
        resume_records=0

        if CI is not None:
            cis=len(CI)
            cis_count=0
        
        Cus_Id = None
        logger.info(f"{this()}: Updating Charge Resume Update ...")
        ci_list = []
        for ci in CI:
            ci_list.append(ci.CI_Id)
            if Cus_Id is None: Cus_Id = ci.Cus_Id 
        records = db.Update_Charge_Resume_CIS(
            Cus_Id,
            CIT_Date_From,
            CIT_Date_To,
            CIT_Status,
            Cur_Code,
            ci_list,             # <-- Lista de CIs Requeridos          
            charge_item,
            current_user.id
            )

    rows =  db.Get_Charge_Resume_Filter(
            FILTER_PLATFORM,
            Pla_Id,
            CIT_Date_From,
            CIT_Date_To,
            CIT_Status,
            Cur_Code,
            User_Id=current_user.id
        )

    return render_template('report_charging_resume_platform.html',
                rows=rows,
                Pla_Id=Pla_Id,
                Pla_Name=Pla_Name,
                CIT_Date_From=CIT_Date_From,
                CIT_Date_To=CIT_Date_To,
                CIT_Status=CIT_Status,
                CIT_Status_Value=CIT_Status_Value,                
                Cur_Code=Cur_Code,
                Cur_Name=Cur_Name,
                collectordata=collectordata
                )
# ======================================================================
# View for Get Charging Resume from DB
# (c) Sertechno 2018
# GLVH @ 2019-08-16
# GLVH @ 2019-08-18 Refactoring to ORM DB Only
# GLVH @ 2020-10-25 Proper sharding and initialization handling
# ======================================================================

from pprint                         import pformat
from emtec.collector.forms          import frm_charging_resume
from babel.numbers                  import format_number
from babel.numbers                  import format_decimal
from babel.numbers                  import format_percent
from emtec.collector.db.orm_model   import Configuration_Items
from emtec.feedback                 import *
import tempfile
import threading
import queue

# ======================================================================

@main.route('/forms/Get_Charging_Resume', methods=['GET', 'POST'])
@login_required
def forms_Get_Charging_Resume():
    logger.debug(f'{this()}: Enter')
    collectordata=get_collectordata()

    session['data'] =  {    
        'User_Id': 0,
        'Cus_Id': None,
        'CIT_Date_From':collectordata['COLLECTOR_PERIOD']['start'], 
        'CIT_Date_To':collectordata['COLLECTOR_PERIOD']['end'], 
        'CIT_Status':1,
        'Cur_Code':'USD'
        }

    form = frm_charging_resume()

    # ------------------------------------------------------------------------------
    # Will setup filter to consider only Currencies with actual Exchange Rates in DB
    # Commit all pending DB states in order to refresh data
    db.session.commit()
    db.session.flush()
    # Prepare query
    query = db.session.query(exchange_rate.Cur_Code.distinct().label('Cur_Code'))
    # Execute query and convert in list for further use in choices selection
    cur_choices = [row.Cur_Code for row in query.all()]

    form.Cus_Id.choices     = db.session.query(customer.Cus_Id,customer.Cus_Name).all()
    form.CIT_Status.choices = db.session.query(cit_status.CIT_Status,cit_status.Value).all()
    form.Cur_Code.choices   = db.session.query(currency.Cur_Code,currency.Cur_Name).filter(currency.Cur_Code.in_(cur_choices)).all()

    if form.validate_on_submit():
        session['data']['User_Id'       ] = form.User_Id 
        session['data']['Cus_Id'        ] = form.Cus_Id.data
        session['data']['CIT_Date_From' ] = form.CIT_Date_From.data
        session['data']['CIT_Date_To'   ] = form.CIT_Date_To.data
        session['data']['CIT-Status'    ] = form.CIT_Status.data
        session['data']['Cur_Code'      ] = form.Cur_Code.data
        print(f"session[data]={session.get('data')}")
        print(f"current_user={current_user}")
        if     form.submit_Report.data:
            # Get the Selected options index for string lists
            for i in range(len(form.Cus_Id.choices)):
                if form.Cus_Id.choices[i][0]==form.Cus_Id.data:
                    cus_index=i
            for i in range(len(form.Cur_Code.choices)):
                if form.Cur_Code.choices[i][0]==form.Cur_Code.data:
                    cur_index=i
            return redirect(url_for('.report_Charging_Resume',
                                User_Id         = current_user.id,
                                Cus_Id          = form.Cus_Id.data,
                                Cus_Name        = form.Cus_Id.choices[cus_index][1],
                                CIT_Date_From   = form.CIT_Date_From.data,
                                CIT_Date_To     = form.CIT_Date_To.data,
                                CIT_Status      = form.CIT_Status.data,
                                CIT_Status_Value= form.CIT_Status.choices[form.CIT_Status.data-1][1],
                                Cur_Code        = form.Cur_Code.data,
                                Cur_Name        = form.Cur_Code.choices[cur_index][1],
                                Update          = 0
                                ))
        if     form.submit_Update.data:
            # Get the Selected options index for string lists
            for i in range(len(form.Cus_Id.choices)):
                if form.Cus_Id.choices[i][0]==form.Cus_Id.data:
                    cus_index=i
            for i in range(len(form.Cur_Code.choices)):
                if form.Cur_Code.choices[i][0]==form.Cur_Code.data:
                    cur_index=i
            return redirect(url_for('.report_Charging_Resume',
                                User_Id         = current_user.id,
                                Cus_Id          = form.Cus_Id.data,
                                Cus_Name        = form.Cus_Id.choices[cus_index][1],
                                CIT_Date_From   = form.CIT_Date_From.data,
                                CIT_Date_To     = form.CIT_Date_To.data,
                                CIT_Status      = form.CIT_Status.data,
                                CIT_Status_Value= form.CIT_Status.choices[form.CIT_Status.data-1][1],
                                Cur_Code        = form.Cur_Code.data,
                                Cur_Name        = form.Cur_Code.choices[cur_index][1],
                                Update          = 1
                                ))
        elif   form.submit_Cancel.data:
            flash('Report discarded ...')
        else:
            flash('form validated but not submited. Report to Support ...')
        return redirect(url_for('.forms_Get_Charging_Resume'))
    
    form.User_Id            = session['data']['User_Id']
    form.Cus_Id.data        = session['data']['Cus_Id']
    form.CIT_Date_From.data = session['data']['CIT_Date_From']
    form.CIT_Date_To.data   = session['data']['CIT_Date_To']
    form.CIT_Status.data    = session['data']['CIT_Status']
    form.Cur_Code.data      = session['data']['Cur_Code']

    return render_template('charging_resume.html',
                form=form, 
                data=session.get('data'), 
                collectordata=get_collectordata()
                )

@main.route('/forms/Get_Charging_Resume_Progress', methods=['GET', 'POST'])
@login_required
def forms_Get_Charging_Resume_Progress():
    logger.debug(f'{this()}: Enter')
    collectordata=get_collectordata()

    session['data'] =  {    
        'User_Id': 0,
        'Cus_Id': None,
        'CIT_Date_From':collectordata['COLLECTOR_PERIOD']['start'], 
        'CIT_Date_To':collectordata['COLLECTOR_PERIOD']['end'], 
        'CIT_Status':1,
        'Cur_Code':'USD'
        }

    form = frm_charging_resume()

    # ------------------------------------------------------------------------------
    # Will setup filter to consider only Currencies with actual Exchange Rates in DB
    # Commit all pending DB states in order to refresh data
    db.session.commit()
    db.session.flush()
    # Prepare query
    query = db.session.query(exchange_rate.Cur_Code.distinct().label('Cur_Code'))
    # Execute query and convert in list for further use in choices selection
    cur_choices = [row.Cur_Code for row in query.all()]

    form.Cus_Id.choices     = db.session.query(customer.Cus_Id,customer.Cus_Name).all()
    form.CIT_Status.choices = db.session.query(cit_status.CIT_Status,cit_status.Value).all()
    form.Cur_Code.choices   = db.session.query(currency.Cur_Code,currency.Cur_Name).filter(currency.Cur_Code.in_(cur_choices)).all()

    if form.validate_on_submit():
        session['data']['User_Id'       ] = form.User_Id 
        session['data']['Cus_Id'        ] = form.Cus_Id.data
        session['data']['CIT_Date_From' ] = form.CIT_Date_From.data
        session['data']['CIT_Date_To'   ] = form.CIT_Date_To.data
        session['data']['CIT-Status'    ] = form.CIT_Status.data
        session['data']['Cur_Code'      ] = form.Cur_Code.data
        print(f"session[data]={session.get('data')}")
        print(f"current_user={current_user}")
        if     form.submit_Report.data:
            # Get the Selected options index for string lists
            for i in range(len(form.Cus_Id.choices)):
                if form.Cus_Id.choices[i][0]==form.Cus_Id.data:
                    cus_index=i
            for i in range(len(form.Cur_Code.choices)):
                if form.Cur_Code.choices[i][0]==form.Cur_Code.data:
                    cur_index=i
            return redirect(url_for('.report_Charging_Resume_Progress',
                                User_Id         = current_user.id,
                                Cus_Id          = form.Cus_Id.data,
                                Cus_Name        = form.Cus_Id.choices[cus_index][1],
                                CIT_Date_From   = form.CIT_Date_From.data,
                                CIT_Date_To     = form.CIT_Date_To.data,
                                CIT_Status      = form.CIT_Status.data,
                                CIT_Status_Value= form.CIT_Status.choices[form.CIT_Status.data-1][1],
                                Cur_Code        = form.Cur_Code.data,
                                Cur_Name        = form.Cur_Code.choices[cur_index][1],
                                Update          = 0
                                ))
        if     form.submit_Update.data:
            # Get the Selected options index for string lists
            for i in range(len(form.Cus_Id.choices)):
                if form.Cus_Id.choices[i][0]==form.Cus_Id.data:
                    cus_index=i
            for i in range(len(form.Cur_Code.choices)):
                if form.Cur_Code.choices[i][0]==form.Cur_Code.data:
                    cur_index=i
            return redirect(url_for('.report_Charging_Resume_Progress',
                                User_Id         = current_user.id,
                                Cus_Id          = form.Cus_Id.data,
                                Cus_Name        = form.Cus_Id.choices[cus_index][1],
                                CIT_Date_From   = form.CIT_Date_From.data,
                                CIT_Date_To     = form.CIT_Date_To.data,
                                CIT_Status      = form.CIT_Status.data,
                                CIT_Status_Value= form.CIT_Status.choices[form.CIT_Status.data-1][1],
                                Cur_Code        = form.Cur_Code.data,
                                Cur_Name        = form.Cur_Code.choices[cur_index][1],
                                Update          = 1
                                ))
        elif   form.submit_Cancel.data:
            flash('Report discarded ...')
        else:
            flash('form validated but not submited. Report to Support ...')
        return redirect(url_for('.forms_Get_Charging_Resume_Progress'))
    
    form.User_Id            = session['data']['User_Id']
    form.Cus_Id.data        = session['data']['Cus_Id']
    form.CIT_Date_From.data = session['data']['CIT_Date_From']
    form.CIT_Date_To.data   = session['data']['CIT_Date_To']
    form.CIT_Status.data    = session['data']['CIT_Status']
    form.Cur_Code.data      = session['data']['Cur_Code']

    return render_template('charging_resume.html',
                form=form, 
                data=session.get('data'), 
                collectordata=get_collectordata()
                )


# ======================================================================

import simplejson as json

@main.route('/report/Charging_Resume', methods=['GET','POST'])
@login_required
def report_Charging_Resume():
    logger.debug(f'{this()}: Enter')    
    collectordata=get_collectordata()
    
    db.session.flush()
    db.session.commit()
    
    User_Id         =  request.args.get('User_Id',None,type=int)
    Cus_Id          =  request.args.get('Cus_Id',None,type=int)
    Cus_Name        =  request.args.get('Cus_Name',None,type=str)
    CIT_Date_From   =  request.args.get('CIT_Date_From',None,type=str)
    CIT_Date_To     =  request.args.get('CIT_Date_To',None,type=str)
    CIT_Status      =  request.args.get('CIT_Status',None,type=int)
    CIT_Status_Value=  request.args.get('CIT_Status_Value',None,type=str)
    Cur_Code        =  request.args.get('Cur_Code',None,type=str)
    Cur_Name        =  request.args.get('Cur_Name',None,type=str)
    Update          =  request.args.get('Update',0,type=int)
        
    # Updated cached data for this specific query if requested 
    if Update == 1:
        # BE SURE all CU records has proper description ----------------
        updated_cus = db.Update_CU_Names()
        if updated_cus:
            logger.warning(f"Updated Name CUs = {updated_cus}")
        # BE SURE all CU records has proper rate id
        updated_cus = db.Update_CU_Rates()
        if updated_cus:
            logger.warning(f"Updated Rate CUs = {updated_cus}")
        # --------------------------------------------------------------
        
        query = db.session.query(
                Configuration_Items.CI_Id
                ).filter(Configuration_Items.Cus_Id==Cus_Id
                ).order_by( Configuration_Items.CC_Id,
                            Configuration_Items.CI_Id
                )
        logger.debug (f"{this()}: Cus_Id= {Cus_Id} query: {query}")
        CI = query.all()
        logger.debug (f"{this()}: {len(CI)} CI's found for customer {Cus_Id}")
        logger.debug (f"{this()}: {pformat(CI)}")
        resume_records=0

        logger.info(f"{this()}: Updating Charge Resume Update ...")
        ci_list = []
        for ci in CI:
            ci_list.append(ci.CI_Id)
        records = db.Update_Charge_Resume_CIS(
            Cus_Id,
            CIT_Date_From,
            CIT_Date_To,
            CIT_Status,
            Cur_Code,
            ci_list,             # <-- Lista de CIs Requeridos          
            charge_item,
            current_user.id
            )
    
    # Get Actual Remume Data from Database
    rows = db.Get_Charge_Resume_Filter(
                FILTER_CUSTOMER,
                Cus_Id,
                CIT_Date_From,
                CIT_Date_To,
                CIT_Status,
                Cur_Code,
                User_Id=current_user.id
                )
    logger.debug(f"{this()}: PRE RENDER")
    logger.debug(f"{this()}: len rows         = {len(rows)}")
    logger.debug(f"{this()}: Cus_Id           = {Cus_Id}")
    logger.debug(f"{this()}: Cus_Name         = {Cus_Name}")
    logger.debug(f"{this()}: CIT_Date_From    = {CIT_Date_From}")
    logger.debug(f"{this()}: CIT_Date_To      = {CIT_Date_To}")
    logger.debug(f"{this()}: CIT_Status       = {CIT_Status}")
    logger.debug(f"{this()}: CIT_Status_Value = {CIT_Status_Value}")                
    logger.debug(f"{this()}: Cur_Code         = {Cur_Code}")
    logger.debug(f"{this()}: Cur_Name         = {Cur_Name}")
    logger.debug(f"{this()}: template         : report_charging_resume.html")
    try:
        return render_template('report_charging_resume.html',
                    rows=rows,
                    Cus_Id=Cus_Id,
                    Cus_Name=Cus_Name,
                    CIT_Date_From=CIT_Date_From,
                    CIT_Date_To=CIT_Date_To,
                    CIT_Status=CIT_Status,
                    CIT_Status_Value=CIT_Status_Value,                
                    Cur_Code=Cur_Code,
                    Cur_Name=Cur_Name,
                    collectordata=get_collectordata(),
                    filter_type=FILTER_CUSTOMER,
                    filter_code=Cus_Id
                    )
    except Exception as e:
        return f"{this()}: Exception:  {str(e)}"


# ======================================================================
# Progress bar Beta implementation
# Support routines
# Calculates progress data 
# and returns progress data as a JSON formated string
@main.route('/get-progress')
def get_progress(value,maximum,start=None,message=None,precision=3,expected_format=None,filename=None,previous=0,step=1,logger=None,level=logging.WARNING):
    try:
        if logger is None:
            logger = logging('get_process')
        logger_level = logger.getEffectiveLevel()
        logger.setLevel(level)
        #print(f"pget-progress: logger={logger} {id(logger)} pre={logger_level}")
        logger.debug(f"get progress IN value:{value} maximum:{maximum} start:{start} message:{message} precision:{precision} expected_format:{expected_format} filename:{filename} previous:{previous} step:{step}")
        nowts      = datetime.datetime.now().timestamp()                      # actual time timestamp
        progress   = value/maximum if maximum != 0 else 0                     # % of progress
        elapsed    = nowts - start                                            # seconds elapsed since start
        remaining  = (elapsed * (1-progress))/progress if progress !=0 else 0 # seconds remining for completion
        remaining  = remaining
        eta        = nowts + remaining
        if expected_format is None:
            expected = datetime.datetime.fromtimestamp(
                            eta).strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]
        else:
            expected = datetime.datetime.fromtimestamp(
                            eta).strftime(expected_format)
        data={
            'value'    : value,                                             # Actual progress discrete value
            'max'      : maximum,                                           # Actual maximum discrete value (100%)
            'start'    : start,                                             # Process init time (loop time)
            'elapsed'  : round(elapsed,precision),                          # Seconds elapsed since loop init
            'remaining': round(remaining,precision),                        # Remaining seconds to loop complete (estimate)
            'message'  : message,                                           # Actual message to be returned
            'progress' : progress,                                          # Progress in % (0.0-1.0)
            'percent'  : round(progress*100,2),                             # Progress in % (0.00%-100.00%)
            'eta'      : eta,                                               # ETA for loop completion (estimate)
            'expected' : expected,                                          # ETA human readable
            'previous' : previous,                                          # Previous displayed value
            'step'     : step,                                              # Display % step
        }
        if message is None:
            message = f"progress={progress*100:.3f}%"
        else:
            message = message.format(**data)
        data.update({'message':message})
        output = json.dumps(data)
        delta = data.get('percent') - previous
        logger.debug(f"percent={data.get('percent')} previous={previous} delta={delta} step={step} {delta>step}")
        
        if previous == 0 or delta > step or data.get('percent')==100:
            if filename is not None:
                data['previous'] = data.get("percent")       # Reported % will become previous 
                output = json.dumps(data)
                with open(filename,"w") as fp:
                    logger.info(f"{os.getppid()}->{os.getpid()} writing: {data.get('message')}")
                    #print         (f"   pwriting: {data.get('message')}")
                    fp.write(output)
    except Exception as e:
        if logger:            
            logger.error(f"get_progress: {str(e)}")
        else:
            sys.stderr.write(f"get_progress: {str(e)}\n")
        output="{}"
    if logger:
        logger.setLevel(logger_level)
    return output
    
@main.route('/read-progress',methods=['GET'])
def read_progress():
    ''' Reads progress data from cache file in file system 
        and returns it as a JSON string
    '''
    progress_filename = request.args.get('filename',None)
    progress_fifo     = request.args.get('fifo',None)
    progress_queue    = request.args.get('queue',0,type=int)
    data={}
    if progress_filename:
        try:
            logger.debug(f"will read file: '{progress_filename}' ...")
            with open(progress_filename,'r') as fp:
                read_bytes = fp.read(1024*1024)
                logger.debug(f"{this()}: read bytes = {len(read_bytes)} bytes")
                data = json.loads(read_bytes.encode())
        except Exception as e:
            emtec_handle_general_exception(e,logger=logger)
            data={}
    elif progress_fifo:
        try:
            logger.warning(f"will read fifo: '{progress_fifo}' ...")
            ffh = os.open(progress_fifo,os.O_RDONLY|os.O_NONBLOCK)
            if ffh:
                read_bytes = os.read(ffh,1024*1024)
                logger.warning(f"{this()}: read bytes = {len(read_bytes)} bytes")
                if len(read_bytes) == 0:
                    data={} # data will be empty 
                else:
                    lines=read_bytes.encode().split('\n')
                    logger.warning(f"{this()}: lines = {len(lines)}")
                    for line in lines:
                        data = json.loads(line) # data will have last line read only
                os.close(ffh)
                logger.warning(f"{this()}: fifo fh {ffh} closed.")
            '''
            with open(progress_filename,'r') as fifo:
                lines = fifo.read()
                if len(lines) == 0:
                    data={} # data will be empty 
                else:
                    lines=lines.split('\n')
                    for line in lines:
                        data = json.loads(line) # data will have last line read only
            '''
        except Exception as e:
            emtec_handle_general_exception(e,logger=logger)
            data={}        
    elif progress_queue:
        logger.warning(f"{this()}: Queue code not implemented queue={queue}... skipping ...")
        if False:
            try:
                item = q.get(block=False)
                status = f"{this()}: OK queue is empty"
            #except queue.exc.Empty:
            #    status = f"{this()}: OK queue is empty"
            except Exception as e:
                status = f"{this()}: ERROR exception: {str(e)}"
                emtec_handle_general_exception(e,logger=logger)
                data={}
    return json.dumps(data)
        
@main.route('/clean-progress',methods=['GET'])
def clean_progress():
    ''' Deletes/cleans up progress data from server
    '''
    status = f"{this()}: UNKNOWN"
    progress_filename = request.args.get('filename',None)
    progress_queue_id = request.args.get('queue',0,type=int)
    if progress_filename:
        try:
            os.remove(filename)
            status = f"{this()}: OK"
        except Exception as e:
            status = f"{this()}: exception: {str(e)}"
    if progress_queue:
        try:
            progress_queue = object(progress_queue_id)
            while not progress_queue.empty():
                item = q.get(block=False)
            status = f"{this()}: OK queue is empty"
        except queue.exc.Empty:
            status = f"{this()}: OK queue is empty"
        except Exception as e:
            status = f"{this()}: ERROR exception: {str(e)}"
            emtec_handle_general_exception(e,logger=logger)
    return status


#main.route('/internal/Charging_Resume_Update', methods=['GET','POST'])
def report_Charging_Resume_Update(kwargs):
    logger.debug(f".................................................")
    logger.debug(f"{this()}: kwargs = {kwargs}")
    logger.debug(f".................................................")
    try:
        app_ctx          = kwargs.get('app_ctx')
        db               = kwargs.get('db')
        current_user     = kwargs.get('current_user')
        User_Id          = kwargs.get('User_Id')
        Cus_Id           = kwargs.get('Cus_Id')
        Cus_Name         = kwargs.get('Cus_Name')
        CIT_Date_From    = kwargs.get('CIT_Date_From')
        CIT_Date_To      = kwargs.get('CIT_Date_To')
        CIT_Status       = kwargs.get('CIT_Status')
        CIT_Status_Value = kwargs.get('CIT_Status_Value')
        Cur_Code         = kwargs.get('Cur_Code')
        Cur_Name         = kwargs.get('Cur_Name')
        Update           = kwargs.get('Update')
        callback         = kwargs.get('callback')
        filename         = kwargs.get('filename')
        mode             = kwargs.get('mode')
        progress         = kwargs.get('progress')
        fifo             = kwargs.get('fifo')
        verbose          = kwargs.get('verbose')
        logger.debug(f"{this()}: current_user = {current_user}")
        logger.debug(f"{this()}: db           = {db}")
        logger.debug(f"{this()}: pushing context ...")
        app_ctx.push()
        logger.debug(f"{this()}: current_app  = {current_app}")
        logger.debug(f"{this()}: current_user = {current_user}")
        logger.debug(f"{this()}: db           = {db}")

        # BE SURE all CU records has proper description ----------------
        updated_cus = db.Update_CU_Names()
        if updated_cus:
            logger.warning(f"Updated Name CUs = {updated_cus:,.0f}")
        # BE SURE all CU records has proper rate id
        updated_cus = db.Update_CU_Rates()
        if updated_cus:
            logger.warning(f"Updated Rate CUs = {updated_cus:,.0f}")
        # --------------------------------------------------------------
        
        query = db.session.query(
                Configuration_Items.CI_Id
                ).filter(Configuration_Items.Cus_Id==Cus_Id
                ).order_by( Configuration_Items.CC_Id,
                            Configuration_Items.CI_Id
                )
        logger.debug (f"{this()}: Cus_Id= {Cus_Id} query: {query}")
        CI = query.all()
        logger.debug (f"{this()}: {len(CI)} CI's found for customer {Cus_Id}")
        logger.debug (f"{this()}: {pformat(CI)}")
        resume_records=0

        logger.info(f"{this()}: Updating Charge Resume Update ...")
        ci_list = []
        for ci in CI:
            ci_list.append(ci.CI_Id)
        records = db.Update_Charge_Resume_CIS(
            Cus_Id,
            CIT_Date_From,
            CIT_Date_To,
            CIT_Status,
            Cur_Code,
            ci_list,             # <-- Lista de CIs Requeridos          
            charge_item,
            User_Id,              # 20211212 GV was current_user.id
            fast=True,
            callback=display_advance,
            filename=filename,
            progress=progress,
            fifo=fifo,
            fmt='json',
            verbose=verbose
            )
        logger.info(f"{this()}: Updated {records:,.0f} records")
    except Exception as e:
        emtec_handle_general_exception(e,logger=logger)
        records = 0
    logger.info(f"{this()}: return number of updated records = {records:,.0f}. Update process completed.")
    return records

#@main.route('/internal/Charging_Resume_Report', methods=['GET','POST'])
def report_Charging_Resume_Report(**kwargs):
    logger.warning(f"{this()}: kwargs = {kwargs}")
    User_Id          = kwargs.get('User_Id')
    Cus_Id           = kwargs.get('Cus_Id')
    Cus_Name         = kwargs.get('Cus_Name')
    CIT_Date_From    = kwargs.get('CIT_Date_From')
    CIT_Date_To      = kwargs.get('CIT_Date_To')
    CIT_Status       = kwargs.get('CIT_Status')
    CIT_Status_Value = kwargs.get('CIT_Status_Value')
    Cur_Code         = kwargs.get('Cur_Code')
    Cur_Name         = kwargs.get('Cur_Name')
    Update           = kwargs.get('Update')
    rows = db.Get_Charge_Resume_Filter(
                FILTER_CUSTOMER,
                Cus_Id,
                CIT_Date_From,
                CIT_Date_To,
                CIT_Status,
                Cur_Code,
                User_Id=current_user.id
                )
    logger.debug(f"{this()}: PRE RENDER")
    logger.debug(f"{this()}: len rows         = {len(rows)}")
    logger.debug(f"{this()}: Cus_Id           = {Cus_Id}")
    logger.debug(f"{this()}: Cus_Name         = {Cus_Name}")
    logger.debug(f"{this()}: CIT_Date_From    = {CIT_Date_From}")
    logger.debug(f"{this()}: CIT_Date_To      = {CIT_Date_To}")
    logger.debug(f"{this()}: CIT_Status       = {CIT_Status}")
    logger.debug(f"{this()}: CIT_Status_Value = {CIT_Status_Value}")                
    logger.debug(f"{this()}: Cur_Code         = {Cur_Code}")
    logger.debug(f"{this()}: Cur_Name         = {Cur_Name}")
    logger.debug(f"{this()}: template         : report_charging_resume.html")
    try:
        return render_template('report_charging_resume.html',
                    rows             = rows,
                    Cus_Id           = Cus_Id,
                    Cus_Name         = Cus_Name,
                    CIT_Date_From    = CIT_Date_From,
                    CIT_Date_To      = CIT_Date_To,
                    CIT_Status       = CIT_Status,
                    CIT_Status_Value = CIT_Status_Value,                
                    Cur_Code         = Cur_Code,
                    Cur_Name         = Cur_Name,
                    collectordata    = get_collectordata(),
                    filter_type      = FILTER_CUSTOMER,
                    filter_code      = Cus_Id
                    )
    except Exception as e:
        return f"{this()}: Exception:  {str(e)}"

@main.route('/report/Charging_Resume_Progress', methods=['GET','POST'])
@login_required
def report_Charging_Resume_Progress():
    logger.debug(f'{this()}: Enter')    
    collectordata=get_collectordata()
    
    db.session.flush()
    db.session.commit()
    
    User_Id          =  request.args.get('User_Id',None,type=int)
    Cus_Id           =  request.args.get('Cus_Id',None,type=int)
    Cus_Name         =  request.args.get('Cus_Name',None,type=str)
    CIT_Date_From    =  request.args.get('CIT_Date_From',None,type=str)
    CIT_Date_To      =  request.args.get('CIT_Date_To',None,type=str)
    CIT_Status       =  request.args.get('CIT_Status',None,type=int)
    CIT_Status_Value =  request.args.get('CIT_Status_Value',None,type=str)
    Cur_Code         =  request.args.get('Cur_Code',None,type=str)
    Cur_Name         =  request.args.get('Cur_Name',None,type=str)
    Update           =  request.args.get('Update',0,type=int)
    
    temp_dir         =  tempfile.mkdtemp()
    filename         =  os.path.join(temp_dir,f'{this()}.out')
    mode             =  'a'
    progress         =  os.path.join(temp_dir,f'{this()}.advance')
    fifo             =  os.path.join(temp_dir,f'{this()}.fifo')
    try:
        os.mkfifo(fifo)
        logger.info(f"named pipe '{fifo}' created ...")
    except FileExistsError:
        # the file already exists
        logger.info(f"named pipe '{fifo}' already exists while starting ...")
    verbose          =  1
    multimode        =  'fork'   # or thread
    multimode        =  'thread' # or fork

    logger.debug(f"{this()}: current_app     = {current_app}")
    logger.debug(f"{this()}: current_user    = {current_user}")
    logger.debug(f"{this()} db              = {db}")
    app_ctx = current_app.app_context()
    
    kwargs = {
        'current_app'      :  current_app,
        'current_user'     :  current_user,
        'app_ctx'          :  app_ctx,
        'db'               :  db,
        'User_Id'          :  User_Id,
        'Cus_Id'           :  Cus_Id,
        'Cus_Name'         :  Cus_Name,
        'CIT_Date_From'    :  CIT_Date_From,
        'CIT_Date_To'      :  CIT_Date_To,
        'CIT_Status'       :  CIT_Status,
        'CIT_Status_Value' :  CIT_Status_Value,
        'Cur_Code'         :  Cur_Code,
        'Cur_Name'         :  Cur_Name,
        'Update'           :  Update,
        'callback'         :  display_advance,
        'filename'         :  filename, # callback arguments
        'mode'             :  mode, # callback arguments
        'progress'         :  progress, # callback arguments
        'fifo'             :  fifo, # callback arguments
        'queue'            :  None, # callback arguments should be Queue id if any
        'verbose'          :  verbose,  # callback arguments
    }
    logger.warning(f"{this()}: kwargs={kwargs}")
    # Updated cached data for this specific query if requested 
    if Update == 1:
        try:
            db.session.flush()
        except Exception as e:
            msg = f"{this()}: DB Flush exception: {str(e)}"
            logger.warning(msg)

        data = {
            'host'    : 'localhost',
            'maximum' : 100,
            'filename': progress,
            'fifo'    : fifo,
            'percent' : 0,
            'value'   : 0,
        }
        if multimode == 'fork':
            # Aqui el fork no esta funcionando muy bien probar threads ....
            pid = os.fork()
            if pid == 0: # Child Process need to update in background while parent showa bar ....
                try:
                    logger.warning(f"{this()}: Forked child process {os.getppid()}:{os.getpid()} initiates update")
                    logger.warning(f"{this()}: Update={Update} filename={filename} progress={progress}")
                    records = report_Charging_Resume_Update(**kwargs)
                    logger.warning(f"{this()}: updated = {records} records")
                    logger.warning(f"{this()}: Updated={Update} filename={filename} progress={progress}")
                    logger.warning(f"{this()}: Child: {os.getppid()}:{os.getpid()} is completed now. will return inmediately.")
                    return "update completed"
                except Exception as e:
                    emtec_handle_general_exception(e,logger=logger)
                    msg = f"{this()}: Update failure. exception: {str(e)}"
                    flash(msg,'error')
                    return msg
                #eturn report_Charging_Resume_Report(**kwargs)
            else:
                logger.info(f"{this()}: parent process {os.getpid()}::{pid} continues ...")
                try:
                    flash(f"{this()}: parent {os.getpid()}::{pid} Update={Update} filename={filename} progress={progress} will render report_charging_resume_update.html")
                    return render_template('report_charging_resume_update.html',
                                Cus_Id           = Cus_Id,
                                Cus_Name         = Cus_Name,
                                CIT_Date_From    = CIT_Date_From,
                                CIT_Date_To      = CIT_Date_To,
                                CIT_Status       = CIT_Status,
                                CIT_Status_Value = CIT_Status_Value,                
                                Cur_Code         = Cur_Code,
                                Cur_Name         = Cur_Name,
                                collectordata    = get_collectordata(),
                                filter_type      = FILTER_CUSTOMER,
                                filter_code      = Cus_Id,
                                filename         = filename,
                                progress         = progress,
                                data             = data         # Temporary for progress bar functions/views
                                )
                except Exception as e:
                    msg = f"{this()}: Exception:  {str(e)}"
                    flash(msg,'error')
                    return msg
        elif multimode == 'thread':            
                try:
                    logger.warning(f"{this()}: Initiating Thread Update={Update} filename={filename} progress={progress} fifo={fifo}")
                    threading.Thread(
                        target=report_Charging_Resume_Update,
                        args=(kwargs,)
                        ).start()
                    logger.warning(f"{this()}: Inmediatelly rendering bar html")
                    return render_template('report_charging_resume_update.html',
                                Cus_Id           = Cus_Id,
                                Cus_Name         = Cus_Name,
                                CIT_Date_From    = CIT_Date_From,
                                CIT_Date_To      = CIT_Date_To,
                                CIT_Status       = CIT_Status,
                                CIT_Status_Value = CIT_Status_Value,                
                                Cur_Code         = Cur_Code,
                                Cur_Name         = Cur_Name,
                                collectordata    = get_collectordata(),
                                filter_type      = FILTER_CUSTOMER,
                                filter_code      = Cus_Id,
                                filename         = filename,
                                progress         = progress,
                                data             = data
                                )
                except Exception as e:
                    emtec_handle_general_exception(e,logger=logger)
                    msg = f"{this()}: Update failure. exception: {str(e)}"
                    flash(msg,'error')
                    return msg
                #eturn report_Charging_Resume_Report(**kwargs)
        else:
            msg = f"{this()}: Invalid multiprocess mode: {multimode}"
            flash(msg,'error')
            logger.error(msg)
            return msg
    else:
        flash(f"{this()}: Update={Update} filename={filename} progress={progress}")
        return report_Charging_Resume_Report(**kwargs)
        
        
@main.route('/download/Charging_Resume', methods=['GET','POST'])
@login_required
def download_Charging_Resume():
    logger.debug(f'{this()}: Enter')    
    collectordata=get_collectordata()
    
    db.session.flush()
    db.session.commit()
    
    Cus_Id          =  request.args.get('Cus_Id',None,type=int)
    Cus_Name        =  request.args.get('Cus_Name',None,type=str)
    CIT_Date_From   =  request.args.get('CIT_Date_From',None,type=str)
    CIT_Date_To     =  request.args.get('CIT_Date_To',None,type=str)
    CIT_Status      =  request.args.get('CIT_Status',None,type=int)
    CIT_Status_Value=  request.args.get('CIT_Status_Value',None,type=str)
    Cur_Code        =  request.args.get('Cur_Code',None,type=str)
    Cur_Name        =  request.args.get('Cur_Name',None,type=str)
    Update          =  request.args.get('Update',0,type=int)
    FILTER          =  request.args.get('filter_type',0,type=int)
    CODE            =  request.args.get('filter_code',None)
        
    print(f"**********************************************************")
    print(f"{this()}: FILTER={FILTER} CODE={CODE} {type(CODE)}")
    print(f"**********************************************************")
    CODE=int(CODE)
    # Get Actual Remume Data from Database
    # NOTE: Here needs some Sand-Clock Message or something in case it takes so long ...
    # Gets Charge Resume from DB
    logger.debug(f"**********************************************************")
    logger.debug(f"{this()}: FILTER={FILTER} CODE={CODE} {type(CODE)}")
    logger.debug(f"{this()}: FROM={CIT_Date_From} TO={CIT_Date_To} ST:{CIT_Status} CUR:{Cur_Code}")
    logger.debug(f"{this()}: User={current_user}")
    logger.debug(f"**********************************************************")
    
    rows = db.Get_Charge_Resume_Filter(
                FILTER,
                CODE,
                CIT_Date_From,
                CIT_Date_To,
                CIT_Status,
                Cur_Code,
                User_Id=current_user.id
                )
    if rows is not None:
        logger.debug(f"{this()}: {len(rows)} rows found to export ...")
    else:
        logger.error(f"{this()}: None rows found to export ...")
        
    temp_name   = next(tempfile._get_candidate_names())
    output_file = f"CR_{FILTER}_{CODE}_{CIT_Date_From}_{CIT_Date_To}_{CIT_Status}_{current_user.id}_{temp_name}.xlsx"
    
    d = {
        'detail':[],
        'Cus-Id':Cus_Id,
        'CIT_Date_From':CIT_Date_From,
        'CIT_Date_To':CIT_Date_To,
        'CIT_Status':CIT_Status,
        'Cur_Code':Cur_Code,
        'file':output_file,
        'rows':len(rows)
    }
    # Build list of records to export from query
    for row in rows:
        d['detail'].append({
                'ccCode':row.CC_Code,
                'ccDescription':row.CC_Description,
                'ciName':row.CI_Name,
                'cuDescription':row.CU_Description,
                'hours':row.CIT_Count,
                'mu':row.Rat_MU_Code,
                'price':float(row.Rat_Price),
                'rateCurrency':row.Cur_Code,
                'ratePeriodDescription':row.Rat_Period_Description,
                'resumeQuantityAtRate':float(row.CR_Quantity_at_Rate),
                'totalAtCurrency':float(row.CR_ST_at_Rate_Cur),
                'from':row.CR_Date_From,
                'to':row.CR_Date_To,
        })
    # List of fields in desired order 
    headers=[
                'ccCode',
                'ccDescription',
                'ciName',
                'cuDescription',
                'hours',
                'mu',
                'price',
                'rateCurrency',
                'ratePeriodDescription',
                'resumeQuantityAtRate',
                'totalAtCurrency',
                'from',
                'to',
    ]
    # Normalize data into a Pandas Dataframe
    df1 = json_normalize(d, 'detail')
    # Reorder columns
    df1 = df1.reindex(columns=headers)
    # create temporary filename       
    xlsx_file="%s/%s"%(current_app.root_path,url_for('static',filename='tmp/%s'%(output_file)))
    df1.to_excel(xlsx_file,'Sheet 1')
    return send_file(xlsx_file,as_attachment=True,attachment_filename=output_file)
# ======================================================================
# COLLECTOR API routes
# (c) Sertechno 2020
# GLVH @ 2020-10-09
# ======================================================================
# Version | Programmer | Description
# ------- | ---------- | -----------------------------------------------
# 1.0.0   | GLVH       | Initial version. Minimal implementation required
#         |            | Butler integration requirement.
# ======================================================================
import json
import inspect
import datetime

COLLECTOR_API_VERSION = '1.0.0'
COLLECTOR_API_OK      = 0
COLLECTOR_API_WARNING = 1
COLLECTOR_API_ERROR   = 2
COLLECTOR_API_UNKNOWN = 3
COLLECTOR_API_STATES  = ['OK','WARNING','ERROR','UNKNOWN']

@main.route('/api/heartbeat', methods=['GET'])
def api_heartbeat():
    logger.debug(f'{this()}: IN')
    kind='heartbeat'
    entities=[]
    name=current_app.config['NAME']
    authorized = api_check_authorization(request,current_app)
    if authorized:
        code    = API_OK
        message = 'Authorized request'
    else:
        code    = API_ERROR
        message = 'Unauthorized request'
    return get_api_response(
            code=code,
            message=message,
            kind=kind,
            entities=entities,
            name=name)


@main.route('/collector/faq', methods=['GET'])
def collector_faq():
    logger.warning('collector_faq(): IN')
    try:
        logger.warning(f'collector_faq(): current_user = {current_user}')        
    except Exception as e:
        logger.error(f"collector_faq(): exception: {str(e)}")
    
    return render_template('collector_faq.html')
    
@main.route('/collector/about', methods=['GET'])
def collector_about():
    logger.warning('collector_about(): IN')
    try:
        logger.warning(f'collector_about(): current_user = {current_user}')        
    except Exception as e:
        logger.error(f"collector_about(): exception: {str(e)}")
    
    return render_template('collector_about.html')
# =============================================================================
# View for Get Billing Resume fro DB
# (c) Sertechno 2018,2019
# GLVH @ 2019-03-11
# =============================================================================

from pprint import pprint
from emtec.collector.db.orm_model import *

# Support Constants, Variables & Functions
RAT_TYPE        =0x01
RAT_PLATFORM    =0x02
RAT_CUSTOMER    =0x04
RAT_CC          =0x08
RAT_CI          =0x10

Valid_Rat_Types = [     RAT_TYPE,
                        RAT_TYPE|RAT_PLATFORM,
                        RAT_TYPE|RAT_PLATFORM|RAT_CUSTOMER,
                        RAT_TYPE|RAT_PLATFORM|RAT_CUSTOMER|RAT_CC,
                        RAT_TYPE|RAT_PLATFORM|RAT_CUSTOMER|RAT_CC|RAT_CI
                ]

def Get_Rat_Type(Rate):
    rate_type           =  0x00
    if Rate.Typ_Code    != 'NUL'   :   rate_type |= RAT_TYPE    
    if Rate.Pla_Id      != 1         :   rate_type |= RAT_PLATFORM
    if Rate.Cus_Id      != 1         :   rate_type |= RAT_CUSTOMER
    if Rate.CC_Id       != 1         :   rate_type |= RAT_CC
    if Rate.CI_Id       != 1         :   rate_type |= RAT_CI
    return rate_type

def is_valid_rate(Rate):
    return Rate in Valid_Rat_Types
    

def Update_Rates_Type():
    
    rate_rows=rate.query.all()
    for rat in rate_rows:
        rat.Rat_Type=Get_Rat_Type(rat)
        db.session.add(rat)
        db.session.commit()

from babel.numbers  import format_number, format_decimal, format_percent
from sqlalchemy.sql.expression import or_

@main.route('/reports/Data_Consistency', methods=['GET'])
@login_required
def reports_Data_Consistency():
    logger.debug('Enter: reports_Data_Consistency()')

    # Prepare query This working for MySQL Engine Only
    version  = db.engine.execute("SELECT VERSION()").fetchall()
    hostname = db.engine.execute("SELECT @@HOSTNAME").fetchall()
    data={}
    data.update({'version': version[0][0]})
    data.update({'hostname': hostname[0][0]})
    
    # ------------------------------------------------------------------
    ci_rows=db.session.query(Configuration_Items
                ).join(Customers
                    ).add_column(Customers.Cus_Name
                ).join(Platforms
                    ).add_column(Platforms.Pla_Name
                ).join(Cost_Centers,
                    Cost_Centers.CC_Id==Configuration_Items.CC_Id
                    ).add_column(Cost_Centers.CC_Description
                ).filter(or_(
                            Configuration_Items.CC_Id==Customers.CC_Id,
                            Configuration_Items.CC_Id==1
                            )
                ).all()
                
    data.update({'ci_rows': ci_rows})
    
    # ------------------------------------------------------------------
    # Updates Rate Types in Rates Table in order to validate them in report
    Update_Rates_Type()
        
    query = db.session.query(
                Rates,
                Customers,
                Platforms,
                Configuration_Items,
                Cost_Centers
                ).join(Customers, 
                    Rates.Cus_Id == Customers.Cus_Id
                ).join(Platforms, 
                    Rates.Pla_Id == Platforms.Pla_Id
                ).join(Configuration_Items, 
                    Rates.CI_Id  == Configuration_Items.CI_Id
                ).join(Cost_Centers, 
                    Rates.CC_Id  == Cost_Centers.CC_Id
                ).order_by(
                    Rates.Typ_Code,
                    Rates.Pla_Id,
                    Rates.Cus_Id,
                    Rates.CC_Id,
                    Rates.CI_Id
                )
    rate_rows=[]

    try:
        rate_rows = query.all()
    except Exception as e:
        print("**************************************")
        print(e)
        print("**************************************")

    data.update({'rate_rows': rate_rows})
    # ------------------------------------------------------------------
    query = db.session.query(   Charge_Units,
                                Configuration_Items,
                                Platforms,
                                Customers,
                                Cost_Centers
                ).join(Configuration_Items,
                    Charge_Units.CI_Id==Configuration_Items.CI_Id
                ).join(Platforms          ,
                    Platforms.Pla_Id==Configuration_Items.Pla_Id
                ).join(Customers          ,
                    Customers.Cus_Id==Configuration_Items.Cus_Id
                ).join(Cost_Centers       ,
                    Cost_Centers.CC_Id==Configuration_Items.CC_Id
                )
    # El filtro no esta segun lo deseado la idea es ver si el ID de la 
    # tarifa corresponde con un id valido probablemente hay que crear un
    # loop aqui para poblar la lista segun un chequeo python ya que no 
    # hay stored procedure
    
    # Por ahora solo muestra las que estan con Rate = 1 o None

    query = query.filter(or_(   Charge_Units.Rat_Id==1,
                                Charge_Units.Rat_Id==None
                            )
                        )

    rows = query.all()

    # ------------------------------------------------------------------
    cu_rows = []
    
    try:
        # Este loop es redundante por el filtro de arriba
        # se mantiene para opcion adicional
        # es muy lento si se ejecuta para todos los CUs
        # en el sistema Checkqo full de consistecia
        for row in rows:
            rate_id = db.Get_Rate_Id(
                        row.Charge_Units.Typ_Code,
                        row.Configuration_Items.Pla_Id,
                        row.Configuration_Items.Cus_Id,
                        row.Configuration_Items.CC_Id,
                        row.Charge_Units.CU_Id
                        )
            if row.Charge_Units.Rat_Id != rate_id:
                cu_rows.append([row,rate_id])
    except Exception as e:
        print("**************************************")
        print(e)
        print("**************************************")

    data.update({'cu_rows': cu_rows})

    return render_template(
        'report_data_consistency.html',
        data=data,
        is_valid_rate=is_valid_rate
        )

# ======================================================================


# =============================================================================
# View for Get Billing Resume fro DB
# (c) Sertechno 2018
# GLVH @ 2018-11-11
# =============================================================================

# NOTE: THOS IS FULL MYSQL CODE NEEDS TO BE VARIABLE ADAPTED FOR
# AGNOSTIC DB STATUS REPORT

from babel.numbers  import format_number, format_decimal, format_percent

@main.route('/reports/DB_Status', methods=['GET'])
@login_required
def reports_DB_Status():
    
    logger.debug('Enter: reports_DB_Status()'%())


    # Prepare query
    version  = db.engine.execute("SELECT VERSION()").fetchall()
    hostname = db.engine.execute("SELECT @@HOSTNAME").fetchall()
    query=  " SELECT table_schema as `Database`, table_name AS `Table`, round(((data_length + index_length) / 1024 / 1024), 2)" \
            "`Size in MB`  FROM information_schema.TABLES  WHERE table_schema = 'collector' ORDER BY (data_length + index_length) DESC"
    table_usage = db.engine.execute(query).fetchall()
    data={}
    data.update({'version': version[0][0]})
    data.update({'hostname': hostname[0][0]})
    data.update({'table_usage': table_usage})
    data.update({'table_data': {} })
    
    for t in range(len(data['table_usage'])):
        query = "SELECT count(*) FROM %s"%data['table_usage'][t][1]
        count=db.engine.execute(query).fetchall()
        data['table_data'].update({data['table_usage'][t][1]:{}})
        data['table_data'][data['table_usage'][t][1]].update({'count':count[0][0]})
        
    return render_template('report_db_status.html',data=data)

# =============================================================================


# ======================================================================
# View for Get Billing Resume from DB
# (c) Sertechno 2018/2019/2020
# GLVH @ 2020-04-01
# ======================================================================

import  simplejson              as json
import  pandas
from    pandas.io.json          import json_normalize
from    reportlab.lib.pagesizes import letter
from    reportlab.pdfgen        import canvas
from    reportlab.lib.utils     import ImageReader
from    flask                   import send_file
from    babel.numbers           import format_number
from    babel.numbers           import format_decimal
from    babel.numbers           import format_percent
from    emtec.collector.forms   import frm_export_Charging_Resume
from    emtec.class_report      import *
from    collections             import namedtuple
from    pprint                  import pprint

@main.route('/forms/Export_Charging_Resume', methods=['GET', 'POST'])
@login_required
def forms_Export_Charging_Resume():
    function_name=sys._getframe().f_code.co_name
    logger.debug('%s: Enter'%(function_name))
    collectordata=get_collectordata()

    session['data'] =  { 'Cus_Id': None, 'CIT_Date_From':None, 'CIT_Date_To':None, 'CIT_Status':1,'Cur_Code':'USD'}

    form = frm_export_Charging_Resume()
        
    # BE SURE all CU records has proper description --------------------
    updated_cus = db.Update_CU_Names()
    if updated_cus:
        logger.warning(f"Updated Name CUs = {updated_cus}")
    # BE SURE all CU records has proper rate id
    updated_cus = db.Update_CU_Rates()
    if updated_cus:
        logger.warning(f"Updated Rate CUs = {updated_cus}")
    # ------------------------------------------------------------------
    
    rows = db.session.query( 
            func.count(charge_resume.Cus_Id).label('RECORDS'),
            charge_resume.Cus_Id,
            charge_resume.CR_Date_From,
            charge_resume.CR_Date_To,
            charge_resume.CIT_Status,
            charge_resume.Cur_Code,
            charge_resume.Cus_Name
            ).filter(charge_resume.User_Id==current_user.id
            ).group_by( charge_resume.Cus_Id,
                        charge_resume.CR_Date_From,
                        charge_resume.CR_Date_To,
                        charge_resume.CIT_Status,
                        charge_resume.Cur_Code,
                        charge_resume.Cus_Name
            ).order_by( charge_resume.Cus_Name,
                        charge_resume.CR_Date_From,
                        charge_resume.CR_Date_To,
                        charge_resume.CIT_Status,
                        charge_resume.Cur_Code
            )
    
    # Load Statuses
    statuses=cit_status.query.all()
    dstatuses={}
    for s in statuses:
        dstatuses[s.CIT_Status]=s.Value
        
    currencies=currency.query.all()
    dcurrencies={}
    for c in currencies:
        dcurrencies[c.Cur_Code]=c.Cur_Name
        
    # Load Currency Names

    export_choices = []
    for row in rows:
        option="%s_%s_%s_%s_%s_%s_%s"%(
                current_user.id,
                row.Cus_Id,
                row.CR_Date_From,
                row.CR_Date_To,
                row.CIT_Status,
                row.Cur_Code,
                row.Cus_Name
            )
        value ="%s %s from %s to %s status=%s currency=%s (%s)"%(
                current_user.id,
                row.Cus_Name,
                row.CR_Date_From,
                row.CR_Date_To,
                dstatuses[row.CIT_Status],
                dcurrencies[row.Cur_Code],
                row.RECORDS
            )
        export_choices.append((option,value))

    # Will setup filter to consider only Currencies with actual Exchange Rates in DB
    # Prepare query
    #query = db.session.query(exchange_rate.Cur_Code.distinct().label('Cur_Code'))
    # Execute query an conver in list for further use in choices selection
    #export_choices = [row.Cur_Code for row in query.all()]

    ccs=db.session.query(Cost_Centers).all()
    cc_choices=[(":","")]
    for cc in ccs:
        cc_choices.append(("%s:%s"%(cc.CC_Id,cc.CC_Code),cc.CC_Description))

    platforms=db.session.query(Platforms).all()
    platform_choices=[(0,"")]
    for platform in platforms:
        platform_choices.append((platform.Pla_Id,platform.Pla_Name))

    form.Export.choices   = export_choices
    form.CC.choices       = cc_choices
    form.Platform.choices = platform_choices
    
    if form.validate_on_submit():

        data=form.Export.data.split("_")

        if     form.submit_PDF.data:
            CC_Name=Pla_Name=''
            for cc,name in form.CC.choices:
                if cc == form.CC.data:
                    CC_Name=name
            for pla,name in form.Platform.choices:
                if platform == form.Platform.data:
                    Pla_Name=name
            return redirect(url_for('.export_Charging_Resume',
                                User_Id         = current_user.id,
                                Cus_Id          = data[1],
                                Cus_Name        = data[6],
                                CIT_Date_From   = data[2],
                                CIT_Date_To     = data[3],
                                CIT_Status      = data[4],
                                CIT_Status_Value= dstatuses[int(data[4])],
                                Cur_Code        = data[5],
                                Cur_Name        = dcurrencies[data[5]],
                                Format          = "pdf",
                                CC_Id           = form.CC.data.split(':')[0],
                                CC_Code         = form.CC.data.split(':')[1],
                                Pla_Id          = form.Platform.data,
                                CC_Name         = CC_Name,
                                Pla_Name        = Pla_Name
                                ))
        elif   form.submit_XLS.data:
            return redirect(url_for('.export_Charging_Resume',
                                User_Id         = current_user.id,
                                Cus_Id          = data[1],
                                Cus_Name        = data[6],
                                CIT_Date_From   = data[2],
                                CIT_Date_To     = data[3],
                                CIT_Status      = data[4],
                                CIT_Status_Value= dstatuses[int(data[4])],
                                Cur_Code        = data[5],
                                Cur_Name        = dcurrencies[data[5]],
                                Format          = "xlsx"
                                ))
        elif   form.submit_CSV.data:
            return redirect(url_for('.export_Charging_Resume',
                                User_Id         = current_user.id,
                                Cus_Id          = data[1],
                                Cus_Name        = data[6],
                                CIT_Date_From   = data[2],
                                CIT_Date_To     = data[3],
                                CIT_Status      = data[4],
                                CIT_Status_Value= dstatuses[int(data[4])],
                                Cur_Code        = data[5],
                                Cur_Name        = dcurrencies[data[5]],
                                Format          = "csv"
                                ))
        elif   form.submit_JSON.data:
            return redirect(url_for('.export_Charging_Resume',
                                User_Id         = current_user.id,
                                Cus_Id          = data[1],
                                Cus_Name        = data[6],
                                CIT_Date_From   = data[2],
                                CIT_Date_To     = data[3],
                                CIT_Status      = data[4],
                                CIT_Status_Value= dstatuses[int(data[4])],
                                Cur_Code        = data[5],
                                Cur_Name        = dcurrencies[data[5]],
                                Format          = "json"
                                ))
        elif   form.submit_FIX.data:
            return redirect(url_for('.export_Charging_Resume',
                                User_Id         = current_user.id,
                                Cus_Id          = data[1],
                                Cus_Name        = data[6],
                                CIT_Date_From   = data[2],
                                CIT_Date_To     = data[3],
                                CIT_Status      = data[4],
                                CIT_Status_Value= dstatuses[int(data[4])],
                                Cur_Code        = data[5],
                                Cur_Name        = dcurrencies[data[5]],
                                Format          = "fix"
                                ))
        elif   form.submit_Delete.data:
            query = db.session.query(Charge_Resumes
                    ).filter(and_(
                        Charge_Resumes.User_Id       == current_user.id,
                        Charge_Resumes.Cus_Id        == data[1],
                        Charge_Resumes.Cus_Name      == data[6],
                        Charge_Resumes.CR_Date_From  == data[2],
                        Charge_Resumes.CR_Date_To    == data[3],
                        Charge_Resumes.CIT_Status    == data[4],
                        Charge_Resumes.Cur_Code      == data[5],
                        ))
            try:
                records_to_delete = query.count()
                query.delete(synchronize_session=False)
                db.session.commit()
                db.session.flush()
                flash(f"{records_to_delete} registros de resumen borrados del reporte")
            except Exception as e:
                logger.error(f"{this()}: exception: {str(e)}")
                flash(f"{this()}: Reporte no eliminado. exception: {str(e)}")
        elif   form.submit_Cancel.data:
            flash('Report discarded ...')
        else:
            pass
        logger.warning(" ... return redirect(url_for('.index')) ...")
        return redirect(url_for('.index'))
    logger.warning(" ... return render template .....")
    return render_template(
        'export_charging_resume.html',
        form=form,
        collectordata=collectordata
        )

# ======================================================================

def prepare_report_header(r):
    
    # Setup Report Header
    r.Header.box.visible=False
    # Horizontal subwindows
    header_dimensions=[(0,6),(6,2),(8,1)]
    # Horizontal subwindows for first Header SubWindow
    r.pdf_create_subwindows_details   (r.Header, dimensions=header_dimensions,box=True,horizontal=True)
    header_dimensions=[0.25,0.50,0.25]
    r.pdf_create_subwindows_relatives (r.Header.subwindows[0], dimensions=header_dimensions,box=True)
    # ....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8
    # ....+6....5....+....+....+...9....5....5....5....5....+....1
    # "%3d"    3   4  0-  3 % ( row.CIT_Count          )   )
    # "%s"     45 46  4- 49 % ( row.CU_Description     )   )
    # "%12.2f" 12 13 50- 62 % ( row.Rat_Price          )   )
    # "%12.2f" 12 13 63- 75 % ( row.CR_Quantity        )   )
    # "%12.2f" 12 13 76- 88 % ( row.CR_ST_at_Rate_Cur  )   )
    # "%20.6f" 20 21 89-109 % ( row.CR_Cur_XR          )   )
    # "%12.2f" 12 13 110-122 % ( row.CR_ST_at_Cur       )   )    
    
    # Max witdh should be in range 60 @ 12picas / 90 @ 8picas
    details=[4,20,12,12,12,18,12]
    # widths will be scaled to 8/12 = 2/3 because of font size = 8
    #print("details=",details)
    for i in range(len(details)):
        details[i]*=(2/3) 
    #print("details=",details)
    r.pdf_create_subwindows_widths (r.Header.subwindows[1], widths=details, box=True)
        
    # Poblar cabecera
    H=r.create_record("Cabecera")
    
    H.add_field(window=r.Header.subwindows[0].subwindows[1],name='Count'    ,format='{Company Name}',    align=CENTER,row=1,fontname='Helvetica-Bold',fontsize=18)
    H.add_field(window=r.Header.subwindows[0].subwindows[1],name='Header Title'    ,format='{Report Title}',    align=CENTER,row=2)
    H.add_field(window=r.Header.subwindows[0].subwindows[1],name='Period'    ,
        format='from %s to %s'%(
            r.vars['vars']['From'].strftime("%Y-%m-%d"),
            r.vars['vars']['To'].strftime("%Y-%m-%d")),
        align=CENTER,row=3)
    H.add_field(window=r.Header.subwindows[0].subwindows[1],name='CC'    ,
        format=('%s %s'%(
                r.vars['vars']['ccname'],
                r.vars['vars']['platformname']
                )).strip(),
        align=CENTER,row=4)
  
    H.add_field(window=r.Header.subwindows[1].subwindows[0],name='N'     ,format='Rec',    align=CENTER,fontname='Helvetica-Bold',fontsize=11,color=blue)
    H.add_field(window=r.Header.subwindows[1].subwindows[1],name='CU'    ,format='Component',    align=CENTER,fontname='Helvetica-Bold',fontsize=11,color=blue)
    H.add_field(window=r.Header.subwindows[1].subwindows[2],name='Price' ,format='Price',    align=CENTER,fontname='Helvetica-Bold',fontsize=11,color=blue)
    H.add_field(window=r.Header.subwindows[1].subwindows[3],name='Q'     ,format='Quantity',    align=CENTER,fontname='Helvetica-Bold',fontsize=11,color=blue)
    H.add_field(window=r.Header.subwindows[1].subwindows[4],name='STXR'  ,format='Sub Total XR',    align=CENTER,fontname='Helvetica-Bold',fontsize=11,color=blue)
    H.add_field(window=r.Header.subwindows[1].subwindows[5],name='XR'    ,format='XR',    align=CENTER,fontname='Helvetica-Bold',fontsize=11,color=blue)
    H.add_field(window=r.Header.subwindows[1].subwindows[6],name='SubT'  ,format='Sub Total',    align=CENTER,fontname='Helvetica-Bold',fontsize=11,color=blue)

    # Asociar registro al reporte
    r.add_header_record(H)

def prepare_report_footer(r):
    # Poblar pie de pagina
    # Setup Report Footer
    # Horizontal subwindows
    
    footer_dimensions=[(0,1),(1,3)]
    r.pdf_create_subwindows_details   (r.Footer, dimensions=footer_dimensions,box=False,horizontal=True)
    r.Footer.box.visible=False
    # Vertical subwindows for 2 horizontal subwindow
    footer_dimensions=[0.20,0.60,0.20]
    r.pdf_create_subwindows_relatives (r.Footer.subwindows[1], dimensions=footer_dimensions,box=True)
    F=r.create_record("Pie de Pagina")
    F.add_field(window=r.Footer.subwindows[1].subwindows[0],name='Code'    ,format='{Report Name}',    align=CENTER,row=1)
    #print("r.vars ****************************************************")
    #pprint(r.vars)
    #print("r.vars ****************************************************")
    F.add_field(window=r.Footer.subwindows[1].subwindows[1],name='SubTitulo',format='Generado: {DATE} {TIME}',    align=CENTER,row=1)
    F.add_field(window=r.Footer.subwindows[1].subwindows[2],name='Page',format='Pagina: {current_page} ',align=RIGHT,row=1)
    
    r.add_footer_record(F)

def prepare_detail(r):    
    r.Detail.subwindows=[]
    #details=[(0,4),(4,46),(50,13),(63,13),(76,13),(89,21),(110,13)]
    #r.pdf_create_subwindows_details (r.Detail, dimensions=details, box=True)
    #r.pdf_create_subwindows(r.Detail, subwindows=7,box=True)
    # Max witdh should be in range 60 @ 12picas / 90 @ 8picas
    details=[4,20,12,12,12,18,12]
    # widths will be scaled to 8/12 = 2/3 because of font size = 8
    #print("details=",details)
    for i in range(len(details)):
        details[i]*=(2/3) 
    #print("details=",details)
    r.pdf_create_subwindows_widths (r.Detail, widths=details, box=True)

    for w in r.Detail.subwindows:
        w.box.visible=False
        w.box.color  =pink
        
    S=r.create_record("Summary",create_group=False)
    S.add_field(window=r.Detail,name='summary'  ,format='{}', align=LEFT ,fontname='Courier',fontsize=8)
    
    R=r.create_record("Detalle",create_group=True)
    # GV 20200330 R.borders=LINE_BOX
    R.borders=LINE_NONE
    
    # Creates al record's fields, and groups
    # Group field are defined populating parameter group with 1,2,...
    # Its important to declare fields as per data field if auto filling is going to be used
    # See: use of <Record>.get_field_names() & <Record>.set_field_value() functions in main ....
    
    # Grouping order should be considered here to ( ...,group=1,....., group=2, ....)
    # -------------------------------------------------------------------------------
    R.add_field(name='CC'     ,format='{}', group=1, coerce=str,visible=False,color=pink)
    R.add_field(name='CI'     ,format='{}', group=2, coerce=str,visible=False,color=pink)
    
    R.add_field(window=r.Detail.subwindows[ 0],name='N'    ,format='{:,d}'  , align=CENTER ,fontname='Courier',fontsize=8)
    R.add_field(window=r.Detail.subwindows[ 1],name='CU'   ,format='{}'     , align=CENTER ,fontname='Courier',fontsize=8,evaluate=False)
    R.add_field(window=r.Detail.subwindows[ 2],name='Price',format='{:,.6f}', align=RIGHT  ,fontname='Courier',fontsize=8)
    R.add_field(window=r.Detail.subwindows[ 3],name='Q'    ,format='{:,.6f}', align=RIGHT  ,fontname='Courier',fontsize=8)
    R.add_field(window=r.Detail.subwindows[ 4],name='STXR' ,format='{:,.6f}', align=RIGHT  ,fontname='Courier',fontsize=8)
    R.add_field(window=r.Detail.subwindows[ 5],name='XR'   ,format='{:,.6f}', align=RIGHT  ,fontname='Courier',fontsize=8)
    R.add_field(window=r.Detail.subwindows[ 6],name='ST'   ,format='{:,.2f}', align=RIGHT  ,fontname='Courier',fontsize=8,coerce=float)

    # Next record defines a priority field evaluation , not needed now
    #R.add_field(name='Downtime'     ,format='{:5.2f}%', align=RIGHT,fontname='Courier',fontsize=8,coerce=float,priority=0,visible=False)

    # Sets up a custom value:color dictionary for inline evaluation
    #R.fields[3].value_Colors={'CRITICAL':red,'WARNING':yellow,'DOWN':orange,'OK':lightgreen,'UNKNOWN':white}

    # references to Records's Groups
    
    Group0=R.get_group('Detalle_G0')    
    Group0.add_footer("Report-Footer") 
    Group0.footer.add_field    (window=r.Detail.subwindows[4],format='Total Reporte:' , align=RIGHT ,color=blue      ,fontname='Courier-Bold',fontsize=12)
    #Group0.footer.add_field    (window=r.Detail.subwindows[6],format='{:,d}'       , evaluate=True          ,value='{Detalle_G0_ST_S}'     ,align=RIGHT ,color=black      ,fontname='Courier-Bold',fontsize=12)
    Group0.footer.add_field    (window=r.Detail.subwindows[6],format='{:,.2f}'       , evaluate=True          ,value='{Detalle_G0_ST_S}'     ,align=RIGHT ,color=black      ,fontname='Courier-Bold',fontsize=12)

    Group1=R.get_group('Detalle_G1')    
    Group1.add_header("CC-Header")
    Group1.add_header("CC-Header-Filler") # Empty Header used to create "blank line" after hostgroup headers
    Group1.add_footer("CC-Footer") 
    Group1.add_footer("CC-Footer-Filler") # Empty Footer used to create "blank line" after hostgroup details
    # Populates Group's header's and footer's fields and output setups (window, align, color, fontname, fontsize, isgf,...)
    # isgf (is Group Field) flag is mandatory for group records coerced fields.etc.)
    Group1.header.add_field(window=r.Detail.subwindows[0],format='CC:'        ,align=LEFT ,color=blue      ,fontname='Courier-Bold',fontsize=12)
    Group1.header.add_field(window=r.Detail.subwindows[1],format='{}'           ,value='{Detalle_G1_K}'     ,align=LEFT ,color=black      ,fontname='Courier-Bold',fontsize=12)
    Group1.footer.add_field(window=r.Detail.subwindows[4],format="Total CC '{}' :",value='{Detalle_G1_K}' , align=RIGHT ,color=blue      ,fontname='Courier-Bold',fontsize=12)
    Group1.footer.add_field(window=r.Detail.subwindows[6],format='{:,.2f}'       , evaluate=True          ,value='{Detalle_G1_ST_S}'     ,align=RIGHT ,color=black      ,fontname='Courier-Bold',fontsize=12)

    Group2=R.get_group('Detalle_G2')    
    Group2.add_header("CI-Header")
    Group2.add_header("CI-Header_Filler") # Empty Header used to create "blank line" after host headers
    Group2.add_footer("CI-Footer") 
    Group2.add_footer("CI-Footer_Filler") # Empty Footer used to create "blank line" after host details
    # Populates Group's header's and footer's fields and output setups (window, align, color, fontname, fontsize, isgf,...)
    # isgf (is Group Field) flag is mandatory for group records coerced fields.etc.)
    Group2.header.add_field    (window=r.Detail.subwindows[1],format='CI:'    , align=LEFT ,color=blue      ,fontname='Courier-Bold',fontsize=12)
    Group2.header.add_field    (window=r.Detail.subwindows[2],format='{}'       , value='{Detalle_G2_K}'     ,align=LEFT ,color=black      ,fontname='Courier-Bold',fontsize=12)
    Group2.footer.add_field    (window=r.Detail.subwindows[4],format="Total CI '{}' :" , value='{Detalle_G2_K}', align=RIGHT ,color=blue      ,fontname='Courier-Bold',fontsize=12)
    Group2.footer.add_field    (window=r.Detail.subwindows[6],format='{:,.2f}'       , evaluate=True          ,value='{Detalle_G2_ST_S}'     ,align=RIGHT ,color=black      ,fontname='Courier-Bold',fontsize=12)

def prepare_report( vars ):
    # PREPARACION DEL REPORTE
    varsTuple = namedtuple('varsTuple', sorted(vars))
    rvars = varsTuple(**vars)
    r=Report(   name=rvars.name,
                company=rvars.company,
                title=rvars.title,
                filename=rvars.pdf_file,
                orientation=rvars.orientation,
                debug=rvars.debug,
                debug_function=rvars.debug_function)
    r.vars.update({'vars':vars})
    # Setup header & footer
    prepare_report_header(r)
    prepare_report_footer(r)
    # Setuo Detail format(s)
    prepare_detail(r)
    # Adjust Page Geometry if needed
    r.calculate_windows()
    # Setup windows visibility
    r.Header.box.visible                = False
    r.Header.subwindows[2].box.visible  = False
    r.Footer.box.visible                = False
    r.add_image(rvars.logo_cust,window=r.Header.subwindows[0],subwindow=0)
    r.add_image(rvars.logo_file,window=r.Header.subwindows[0],subwindow=2)
    
    return(r)

def export_to_pdf(  output_file,rows,Customer,From,To,Status,Currency,
                    CC_Id=0,Pla_Id=0,CC_Name='',Pla_Name='',CC_Code=''):
    vars={
    
        'basename':output_file,
        'name':'RPT-CR-001',
        'company':Customer,
        'title':'Charging Resume',
        'orientation':LANDSCAPE,
        'debug':False,
        'debug_function':None,
        'pdf_file' :"%s%s"%(current_app.root_path,url_for('static',filename='tmp/%s'%(output_file))),
        'logo_file':"%s%s"%(current_app.root_path,url_for('static',filename='img/logo_emtec.png')),
        'logo_cust':"%s%s"%(current_app.root_path,url_for('static',filename='img/logo_customer.png')),
        'From':datetime.strptime(From,"%Y-%m-%d"),
        'To':datetime.strptime(To,"%Y-%m-%d"),
        'cc':CC_Id,
        'cccode':CC_Code,
        'ccname':CC_Name,
        'platform':Pla_Id,
        'platformname':Pla_Name
    }
    r = prepare_report(vars)
    r.vars.update({
        'logo_file':vars['logo_file'],
        'logo_cust':vars['logo_cust'],
        'vars':vars
        })
    R = r.get_record('Detalle')

    field_names=['CC','CI','N','CU','Price','Q','STXR','XR','ST']
    for row in rows:
        # load row values to record here
        # special attention to group keys
        # these should correspond to data ordering
        field_values=[   
            "%s: %s"%(row.CC_Code,row.CC_Description),  # Group 1 Key
            "%s"%(row.CI_Name),                         # Group 2 Key
            row.CIT_Count,
            row.CU_Description,
            row.Rat_Price,
            row.CR_Quantity,
            row.CR_ST_at_Rate_Cur,
            row.CR_Cur_XR,
            row.CR_ST_at_Cur
        ]

        R.set_field_values(field_names,field_values)
        # print row here
        R.print(WRAP)
    # complete report here
    # prints last footers if any
    R.print_final_record_footers()
    # Print report's last footer
    r.pdf_print_final_footer()
    # Closes report
    r.close()
    return vars['pdf_file']

# ======================================================================

def export_to_xls(output_file,rows,Customer,From,To,Status,Currency):
    json_file="%s.json"%(output_file)
    export_to_json(json_file,rows,Customer,From,To,Status,Currency)
    
    json_file   ="%s%s"%(current_app.root_path, url_for('static',filename='tmp/%s.json'%(output_file)))
    
    with open(json_file) as data_file:    
        d= json.load(data_file)  

    df1 = json_normalize(d, 'detail').assign(**d['header'])
        
    xlsx_file="%s/%s"%(current_app.root_path,url_for('static',filename='tmp/%s'%(output_file)))
    
    df1.to_excel(xlsx_file,'Sheet 1')
           
    return xlsx_file    

def export_to_csv(output_file,rows,Customer,From,To,Status,Currency,full=False):
    cvs_file="%s/%s"%(current_app.root_path,url_for('static',filename='tmp/%s'%(output_file)))
    f=open(cvs_file,"w")

    f.write('H,Customer,From,To,Status,Currency\n')
    f.write('H,"%s","%s","%s","%s","%s"\n'%(Customer,From,To,Status,Currency))
 
    if full:
        count = 0
        for row in rows:
            if count==0:
                _=[x.upper().replace("_","") for x in row.get_column_headers()]
                f.write('D,%s\n'%','.join(_))
            _=[str(x) for x in row.get_json_array()]
            f.write ("D,%s\n"%','.join(_))
            count += 1
    else:
        f.write('D,Records,CU,Rate,Q,Subtotal,XR,Total\n')
        count = 0
        for row in rows:
            f.write ("D,%s,%s,%s,%s,%s,%s,%s\n"%(
                        row.CIT_Count,
                        row.CU_Description,
                        row.Rat_Price,
                        row.CR_Quantity,
                        row.CR_ST_at_Rate_Cur,
                        row.CR_Cur_XR,
                        row.CR_ST_at_Cur
                        )
                    )
            count += 1
    f.write("T,%d\n"%(count))
    f.close()
    return cvs_file
    
def export_to_json(output_file,rows,Customer,From,To,Status,Currency,codes=False):
    json_file="%s/%s"%(current_app.root_path,url_for('static',filename='tmp/%s'%(output_file)))
    f=open(json_file,"w")
    
    dict = {}
    dict.update({'header':{}})
    dict['header'].update({'customer':Customer})
    dict['header'].update({'from':From})
    dict['header'].update({'to':To})
    dict['header'].update({'status':Status})
    dict['header'].update({'currency':Currency})
    dict.update({'detail':[]})
    count = 0
    for row in rows:
        if codes:
            dict['detail'].append(
                {   
                    'customer':               row.Cus_Id,
                    'dateFrom':               row.CR_Date_From.strftime('%Y-%m-%d'),
                    'dateTo':                 row.CR_Date_To.strftime('%Y-%m-%d'),
                    'status':                 row.CIT_Status,
                    'currency':               row.Cur_Code,
                    'hours':                  row.CIT_Count, 
                    'quantity':               row.CIT_Quantity, 
                    'generation':             row.CIT_Generation, 
                    'cu':                     row.CU_Id,
                    'cc':                     row.CI_CC_Id,
                    'operation':              row.CU_Operation,
                    'type':                   row.Typ_Code,
                    'ccCurrency':             row.CC_Cur_Code,           
                    'ci':                     row.CI_Id,     
                    'rate':                   row.Rat_Id,      
                    'price':                  row.Rat_Price,
                    'mu':                     row.Rat_MU_Code,
                    'rateCurrency':           row.Rat_Cur_Code,
                    'rateHourly':             row.Rat_Hourly,
                    'rateDaily':              row.Rat_Daily,
                    'rateMonthly':            row.Rat_Monthly,
                    'resumeQuantity':         row.CR_Quantity,          # CIT Quantity after conversion, if any
                    'resumeQuantityAtRate':   row.CR_Quantity_at_Rate, 
                    'ccXR':                   row.CC_XR,
                    'resumeCurrencyXR':       row.CR_Cur_XR,
                    'subtotalAtRateCurrency': row.CR_ST_at_Rate_Cur,
                    'subtotalAtCcCurrency':   row.CR_ST_at_CC_Cur,
                    'totalAtCurrency':        row.CR_ST_at_Cur,
                    'cusName':                row.Cus_Name,
                    'ciName':                 row.CI_Name,
                    'cuDescription':          row.CU_Description,
                    'ccDescription':          row.CC_Description, 
                    'ratePeriodDescription':  row.Rat_Period_Description, 
                    'ccCode':                 row.CC_Code, 
                    'platform':               row.Pla_Id, 
                    'platformName':           row.Pla_Name, 
                }
            )
        else:
            dict['detail'].append(
                {   
                    'hours':                  row.CIT_Count, 
                    'quantity':               row.CIT_Quantity, 
                    'type':                   row.Typ_Code,
                    'price':                  row.Rat_Price,
                    'mu':                     row.Rat_MU_Code,
                    'rateCurrency':           row.Rat_Cur_Code,
                    'rateHourly':             row.Rat_Hourly,
                    'rateDaily':              row.Rat_Daily,
                    'rateMounhtly':           row.Rat_Monthly,
                    'resumeQuantity':         row.CR_Quantity,
                    'resumeQuantityAtRate':   row.CR_Quantity_at_Rate, 
                    'ccXR':                   row.CC_XR,
                    'resumeCurrencyXR':       row.CR_Cur_XR,
                    'subtotalAtRateCurrency': row.CR_ST_at_Rate_Cur,
                    'subtotalAtCcCurrency':   row.CR_ST_at_CC_Cur,
                    'totalAtCurrency':        row.CR_ST_at_Cur,
                    'ciName':                 row.CI_Name,
                    'cuDescription':          row.CU_Description,
                    'ccDescription':          row.CC_Description, 
                    'ratePeriodDescription':  row.Rat_Period_Description, 
                    'ccCode':                 row.CC_Code, 
                    'platformName':           row.Pla_Name, 
                }
            )
            
        count += 1
    dict['header'].update({'count':count})
    jsonarray = json.dumps(dict)
    
    f.write(jsonarray)

    f.close()
    return json_file

def export_to_fix(output_file,rows,Customer,From,To,Status,Currency):
    fix_file="%s/%s"%(current_app.root_path,url_for('static',filename='tmp/%s'%(output_file)))

    f=open(fix_file,"w")

    f.write("H%06d%-45s%-10s%-10s%-45s%-45s*\n"%(0,Customer,From,To,Status,Currency))
    count = 0
    for row in rows:
        f.write ("D%06d%-45s%020.6f%020.6f%020.6f%020.6f%020.6f%010d*\n"%(
                    row.CIT_Count,
                    row.CU_Description,
                    row.Rat_Price,
                    row.CR_Quantity,
                    row.CR_ST_at_Rate_Cur,
                    row.CR_Cur_XR,
                    row.CR_ST_at_Cur,
                    0)
                )
        count += 1
    f.write("T%06d%0155d*\n"%(count,0))
    f.close()
    return fix_file

@main.route('/export/Charging_Resume', methods=['GET','POST'])
@login_required
def export_Charging_Resume():
    logger.debug(f'{this()}: Enter')
    User_Id          =  request.args.get('User_Id',0,type=int)
    Cus_Id           =  request.args.get('Cus_Id',None,type=int)
    Cus_Name         =  request.args.get('Cus_Name',None,type=str)
    CIT_Date_From    =  request.args.get('CIT_Date_From',None,type=str)
    CIT_Date_To      =  request.args.get('CIT_Date_To',None,type=str)
    CIT_Status       =  request.args.get('CIT_Status',None,type=int)
    CIT_Status_Value =  request.args.get('CIT_Status_Value',None,type=str)
    Cur_Code         =  request.args.get('Cur_Code',None,type=str)
    Cur_Name         =  request.args.get('Cur_Name',None,type=str)
    Format           =  request.args.get('Format',None,type=str)
    CC_Id            =  request.args.get('CC_Id',0,type=int)
    CC_Code          =  request.args.get('CC_Code',"",type=str)
    CC_Name          =  request.args.get('CC_Name',"",type=str)
    Pla_Id           =  request.args.get('Pla_Id',0,type=int)
    Pla_Name         =  request.args.get('Pla_Name',"",type=str)
    # Get Actual Data from Database
    # NOTE: Here needs some Sand-Clock Message or something in case it takes so long ...

    rows = db.Get_Charge_Resume_Filter(
            FILTER_CUSTOMER,
            Cus_Id,
            CIT_Date_From,
            CIT_Date_To,
            CIT_Status,
            Cur_Code,
            CC_Id=CC_Id,
            Pla_Id=Pla_Id,
            User_Id=User_Id            
            )
    if rows is not None:
        logger.debug(f"{this()}: rows = {len(rows)}")
    else:
        logger.debug(f"{this()}: rows = {len(rows)}")
            
    # Aqui hace la conversion
    if   CC_Id >  0 and Pla_Id > 0:     tail="_%s_%s"%(CC_Id,Pla_Id)
    elif CC_Id == 0 and Pla_Id > 0:     tail="_%s"%(Pla_Id)
    elif CC_Id >  0 and Pla_Id == 0:    tail="_%s"%(CC_Id)
    else:                               tail=""
    output_file = "CR_%s_%s_%s_%s_%s_%s%s.%s"%(
        User_Id,
        Cus_Id,
        CIT_Date_From,
        CIT_Date_To,
        CIT_Status,
        Cur_Code,
        tail,
        Format
        )
    return_file=None
    if len(rows):
        if Cus_Name is None: Cus_Name  = rows[0].Cus_Name
        if CC_Name  is None: CC_Name   = rows[0].CC_Name
        if Pla_Name is None: Pla_Name  = rows[0].Pla_Name
        if Pla_Id   == 0   : Pla_Id    = rows[0].Pla_Id
    if      Format == 'pdf':
        logger.debug(f"{this}: output_file = {output_file}")
        logger.debug(f"{this}: rows        = {len(rows)}")
        logger.debug(f"{this}: Cus_Name    = {Cus_Name}")
        logger.debug(f"{this}: From        = {CIT_Date_From}")
        logger.debug(f"{this}: To          = {CIT_Date_To}")
        logger.debug(f"{this}: Status      = {CIT_Status_Value}")
        logger.debug(f"{this}: Currency    = {Cur_Name}")
        logger.debug(f"{this}: CC_Id       = {CC_Id}")
        logger.debug(f"{this}: Pla_Id      = {Pla_Id}")
        logger.debug(f"{this}: CC_Name     = {CC_Name}")
        logger.debug(f"{this}: Pla_Name    = {Pla_Name}")
        logger.debug(f"{this}: CC_Code     = {CC_Code}")
        return_file=export_to_pdf(  output_file,
                                    rows,
                                    Cus_Name,
                                    CIT_Date_From,
                                    CIT_Date_To,
                                    CIT_Status_Value,
                                    Cur_Name,
                                    CC_Id,
                                    Pla_Id,
                                    CC_Name,
                                    Pla_Name,
                                    CC_Code
                                )
    elif    Format == 'xlsx':
        return_file=export_to_xls(output_file,rows,Cus_Name,CIT_Date_From,CIT_Date_To,CIT_Status_Value,Cur_Name)
    elif    Format == 'csv':
        return_file=export_to_csv(output_file,rows,Cus_Name,CIT_Date_From,CIT_Date_To,CIT_Status_Value,Cur_Name)
    elif    Format == 'json':
        return_file=export_to_json(output_file,rows,Cus_Name,CIT_Date_From,CIT_Date_To,CIT_Status_Value,Cur_Name)
    elif    Format == 'fix':
        return_file=export_to_fix(output_file,rows,Cus_Name,CIT_Date_From,CIT_Date_To,CIT_Status_Value,Cur_Name)
    else:
        pass    
    
    # Aqui debe enviar el archivo a la PC
    if return_file is not None:
        logger.debug("%s: return_file   = %s"%('export_Charging_Resume',return_file))
        logger.debug("%s: att name      = %s"%('export_Charging_Resume',output_file))
        return send_file(return_file,as_attachment=True,attachment_filename=output_file)
    return
# =============================================================================
# View for Get Billing Resume from DB
# (c) Sertechno 2019
# GLVH @ 2019-08-16
# =============================================================================
import  simplejson as json
import  pandas
from    pandas.io.json             import json_normalize
from    flask                      import send_file
from    babel.numbers  import format_number, format_decimal, format_percent
from    emtec.collector.forms       import frm_export_User_Resume

@main.route('/forms/Export_User_Resume', methods=['GET', 'POST'])
@login_required
def forms_Export_User_Resume():
    logger.debug('Enter: forms_Export_User_Resume()'%())
    collectordata=get_collectordata()

    session['data'] =  { 'Cus_Id': None, 'CIT_Date_From':None, 'CIT_Date_To':None, 'CIT_Status':1,'Cur_Code':'USD'}

    form = frm_export_User_Resume()

    # 20210422 GV cambio a rutina estandar USERCAN = db.get_user_cost_centers(current_user.id) 
    USERCAN = db.get_user_cost_centers(current_user.id,) 
    rows = db.session.query(    func.count(charge_resume.CI_CC_Id).label('RECORDS'),
                        charge_resume.CI_CC_Id,
                        charge_resume.CR_Date_From,
                        charge_resume.CR_Date_To,
                        charge_resume.CIT_Status,
                        charge_resume.Cur_Code,
                        charge_resume.CC_Description
                    ).filter(     charge_resume.User_Id==current_user.id
                    ).filter(     charge_resume.CI_CC_Id>=min(USERCAN)
                    ).filter(     charge_resume.CI_CC_Id<=max(USERCAN)
                    ).group_by(   charge_resume.CI_CC_Id,
                                charge_resume.CR_Date_From,
                                charge_resume.CR_Date_To,
                                charge_resume.CIT_Status,
                                charge_resume.Cur_Code,
                                charge_resume.CC_Description
                    ).order_by(   charge_resume.CI_CC_Id,
                                charge_resume.CR_Date_From,
                                charge_resume.CR_Date_To,
                                charge_resume.CIT_Status,
                                charge_resume.Cur_Code
                    ).all()
    
    # Load Statuses
    statuses  = cit_status.query.all()
    dstatuses = {}
    for s in statuses:
        dstatuses[s.CIT_Status] = s.Value
        
    currencies  = currency.query.all()
    dcurrencies = {}
    for c in currencies:
        dcurrencies[c.Cur_Code] = c.Cur_Name
    
    # Load Currency Names

    export_choices = []
    for row in rows:
        option="%s_%s_%s_%s_%s_%s_%s"%(
            current_user.id,
            row.CI_CC_Id,
            row.CR_Date_From,
            row.CR_Date_To,
            row.CIT_Status,
            row.Cur_Code,
            row.CC_Description
            )
        value ="%s:%s:%s from %s to %s status=%s currency=%s"%(
            current_user.id,
            row.RECORDS,
            row.CC_Description,
            row.CR_Date_From,
            row.CR_Date_To,
            dstatuses[row.CIT_Status],
            dcurrencies[row.Cur_Code]
            )
        export_choices.append((option,value))
    
    form.Export.choices = export_choices

    if form.validate_on_submit():

        data=form.Export.data.split("_")
        
        CC_Code=db.session.query(cost_center.CC_Code).filter(cost_center.CC_Id==data[1]).one()
        
        if hasattr(form,'submit_PDF') and form.submit_PDF.data:
            return redirect(url_for('.export_Charging_Resume',
                                User_Id         = current_user.id,
                                Cus_Id          = current_user.cost_center.Cus_Id,
                                CC_Id           = data[1],
                                CC_Code         = CC_Code,
                                CC_Description  = data[6],
                                CIT_Date_From   = data[2],
                                CIT_Date_To     = data[3],
                                CIT_Status      = data[4],
                                CIT_Status_Value= dstatuses[int(data[4])],
                                Cur_Code        = data[5],
                                Cur_Name        = dcurrencies[data[5]],
                                Format          = "pdf"
                                ))
        elif     form.submit_XLS.data:
            return redirect(url_for('.export_Charging_Resume',
                                User_Id         = current_user.id,
                                Cus_Id          = current_user.cost_center.Cus_Id,
                                CC_Id           = data[1],
                                CC_Code         = CC_Code,
                                CC_Description  = data[6],
                                CIT_Date_From   = data[2],
                                CIT_Date_To     = data[3],
                                CIT_Status      = data[4],
                                CIT_Status_Value= dstatuses[int(data[4])],
                                Cur_Code        = data[5],
                                Cur_Name        = dcurrencies[data[5]],
                                Format          = "xlsx"
                                ))
        elif     form.submit_CSV.data:
            return redirect(url_for('.export_Charging_Resume',
                                User_Id         = current_user.id,
                                Cus_Id          = current_user.cost_center.Cus_Id,
                                CC_Id           = data[1],
                                CC_Code         = CC_Code,
                                CC_Description  = data[6],
                                CIT_Date_From   = data[2],
                                CIT_Date_To     = data[3],
                                CIT_Status      = data[4],
                                CIT_Status_Value= dstatuses[int(data[4])],
                                Cur_Code        = data[5],
                                Cur_Name        = dcurrencies[data[5]],
                                Format          = "csv"
                                ))
        elif     form.submit_JSON.data:
            return redirect(url_for('.export_Charging_Resume',
                                User_Id         = current_user.id,
                                Cus_Id          = current_user.cost_center.Cus_Id,
                                CC_Id           = data[1],
                                CC_Code         = CC_Code,
                                CC_Description  = data[6],
                                CIT_Date_From   = data[2],
                                CIT_Date_To     = data[3],
                                CIT_Status      = data[4],
                                CIT_Status_Value= dstatuses[int(data[4])],
                                Cur_Code        = data[5],
                                Cur_Name        = dcurrencies[data[5]],
                                Format          = "json"
                                ))
        elif     form.submit_FIX.data:
            return redirect(url_for('.export_Charging_Resume',
                                User_Id         = current_user.id,
                                Cus_Id          = current_user.cost_center.Cus_Id,
                                CC_Id           = data[1],
                                CC_Code         = CC_Code,
                                CC_Description  = data[6],
                                CIT_Date_From   = data[2],
                                CIT_Date_To     = data[3],
                                CIT_Status      = data[4],
                                CIT_Status_Value= dstatuses[int(data[4])],
                                Cur_Code        = data[5],
                                Cur_Name        = dcurrencies[data[5]],
                                Format          = "fix"
                                ))
        elif hasattr(form,'submit_Delete') and  form.submit_Delete.data:
            query = db.session.query(Charge_Resumes
                    ).filter(and_(
                        Charge_Resumes.User_Id       == current_user.id,
                        Charge_Resumes.CI_CC_Id      == data[1],
                        Charge_Resumes.CC_Description== data[6],
                        Charge_Resumes.CR_Date_From  == data[2],
                        Charge_Resumes.CR_Date_To    == data[3],
                        Charge_Resumes.CIT_Status    == data[4],
                        Charge_Resumes.Cur_Code      == data[5],
                        ))
            try:
                records_to_delete = query.count()
                query.delete(synchronize_session=False)
                db.session.commit()
                db.session.flush()
                flash(f"{records_to_delete} registros de resumen borrados del reporte")
            except Exception as e:
                logger.error(f"{this()}: exception: {str(e)}")
                flash(f"{this()}: Reporte no eliminado. exception: {str(e)}")
        elif   form.submit_Cancel.data:
            flash('Report discarded ...')
        else:
            flash('form validated but not submited. Report to Support')
        return redirect(url_for('.index'))
        
    return render_template(
        'export_user_resume.html',
        form=form
        )

# =============================================================================

# **********************************************************************


def export_user_resume_to_pdf(  output_file,rows,Customer,From,To,Status,Currency,
                    CC_Id=0,Pla_Id=0,CC_Name='',Pla_Name='',CC_Code=''):
    # this structure is to conditionaly import report functions
    report_name = 'rpt-ur-001'
    if report_name == 'rpt-ur-001':
        from emtec.collector.custom.rpt_ur_001 import export_to_pdf
    pdf_file = export_to_pdf(
                current_app,
                output_file,
                rows,
                Customer,
                From,
                To,
                Status,
                Currency,
                CC_Id,
                Pla_Id,
                CC_Name,
                Pla_Name,
                CC_Code
                )
    return pdf_file
    
# **********************************************************************

def export_user_resume_to_xls(output_file,rows,Customer,From,To,Status,Currency):
    json_file="%s.json"%(output_file)
    export_user_resume_to_json(json_file,rows,Customer,From,To,Status,Currency)
    
    json_file   ="%s%s"%(current_app.root_path, url_for('static',filename='tmp/%s.json'%(output_file)))
    
    with open(json_file) as data_file:    
        d= json.load(data_file)  

    df1 = json_normalize(d, 'detail').assign(**d['header'])
        
    xlsx_file="%s/%s"%(current_app.root_path,url_for('static',filename='tmp/%s'%(output_file)))
    
    df1.to_excel(xlsx_file,'Sheet 1')
    
    print("%s: output_file = %s"%('export_to_xlsx',output_file))
    print("%s: json_file   = %s"%('export_to_xlsx',json_file))
    print("%s: xlsx_file   = %s"%('export_to_xlsx',xlsx_file))
       
    return xlsx_file    

def export_user_resume_to_csv(output_file,rows,Customer,From,To,Status,Currency,precision=8):
    cvs_file="%s/%s"%(current_app.root_path,url_for('static',filename='tmp/%s'%(output_file)))
    f=open(cvs_file,"w")

    f.write("H,Customer,From,To,Status,Currency\n")
    f.write("H,%s,%s,%s,%s,%s\n"%(Customer,From,To,Status,Currency))
    f.write("D,Records,CU,Rate,Q,Subtotal,XR,Total\n")
    count = 0
    for row in rows:
        f.write ("D,%s,%s,%s,%s,%s,%s,%s\n"%
                    (   row.CIT_Count, 
                        row.CU_Description, 
                        round(row.Rat_Price,precision), 
                        round(row.CR_Quantity_at_Rate,precision), 
                        round(row.CR_ST_at_Rate_Cur,precision), 
                        round(row.CR_Cur_XR,precision),
                        round(row.CR_ST_at_Cur,precision)
                    )
                )
        count += 1
    f.write("T,%d\n"%(count))
    f.close()
    return cvs_file

RAT_PERIOD_DESCRIPTIONS={1:"HOUR",2:"DAY",3:"MONTH"}

# field,cast,precision,map,error
record_structure = {
    'header': {
        'customer': ('Customer',str,None,None,None),
        'from'    : ('From'    ,str,None,None,None),
        'to'      : ('To'      ,str,None,None,None),
        'status'  : ('Status'  ,str,None,None,None),
        'currency': ('Currency',str,None,None,None),
    },
    'detail': {
        'ccCode'                : ('CI_CC_Id'           ,int  ,None,None                   ,0),
        'ccDescription'         : ('CC_Description'     ,str  ,None,None                   ,'ERROR'),
        'ciName'                : ('CI_Name'            ,str  ,None,None                   ,'ERROR'),
        'cuDescription'         : ('CU_Description'     ,str  ,None,None                   ,'ERROR'), 
        'items'                 : ('CIT_Count'          ,int  ,None,None                   ,0), 
        'rate'                  : ('Rat_Price'          ,float,8   ,None                   ,0), 
        'mu'                    : ('Rat_MU_Code'        ,str  ,None,None                   ,'ERROR'), 
        'rateCurrency'          : ('Rat_Cur_Code'       ,str  ,None,None                   ,'ERROR'), 
        'ratePeriodDescription' : ('Rat_Period'         ,int  ,None,RAT_PERIOD_DESCRIPTIONS,'ERROR'), 
        'resumeQuantityAtRate'  : ('CR_Quantity_at_Rate',float,8   ,None                   ,0.0),
        'totalAtCurrency'       : ('CR_ST_at_Rate_Cur'  ,float,8   ,None                   ,0.0)
    }
}

def row_to_dict(row,structure):
    d = {}
    for name in structure:
        Field,Type,Precision,Map,Error = structure[name]
        value = getattr(row,Field)
        
        if Type == int:
            if Map is None:
                try:
                    value = int(value)
                except:
                    value = Error
            else:
                try:
                    value = Map.get(int(value),Error)
                except:
                    value = Error
        elif Type == float:
            try:
                if Precision is not None:
                    value = float(value)
                else:
                    value = round(float(value,Precision))
            except:
                value = Error
        elif Type == str:
            value=str(value)
        else:
            value = Error
        d.update({name:value})
    return d

def export_user_resume_to_json(output_file,rows,Customer,From,To,Status,Currency,precision=8):
    json_file="%s/%s"%(current_app.root_path,url_for('static',filename='tmp/%s'%(output_file)))
    f=open(json_file,"w")
    
    mydict = {}
    mydict.update({'header':{}})
    mydict['header'].update({'customer':Customer})
    mydict['header'].update({'from':From})
    mydict['header'].update({'to':To})
    mydict['header'].update({'status':Status})
    mydict['header'].update({'currency':Currency})
    mydict.update({'detail':[]})
    count = 0
    for row in rows:
        mydict['detail'].append(row_to_dict(row,record_structure['detail']))
        '''
        mydict['detail'].append({})

        mydict['detail'][count].update( {
            'ccCode'                : row.CI_CC_Id,
            'ccDescription'         : row.CC_Description,
            'ciName'                : row.CI_Name,
            'cuDescription'         : row.CU_Description, 
            'items'                 : row.CIT_Count, 
            'mu'                    : row.Rat_MU_Code, 
            'rateCurrency'          : row.Rat_Cur_Code, 
            'ratePeriodDescription' : RAT_PERIOD_DESCRIPTIONS.get(row.Rat_Period,"ERROR"), 
            'resumeQuantityAtRate'  : round(row.CR_Quantity_at_Rate,precision),
            'totalAtCurrency'       : round(row.CR_ST_at_Rate_Cur,precision)
            })
        
        count += 1
        '''
    jsonarray = json.dumps(mydict)
    
    f.write(jsonarray)

    f.close()
    return json_file

def export_user_resume_to_fix(output_file,rows,Customer,From,To,Status,Currency):
    fix_file="%s/%s"%(current_app.root_path,url_for('static',filename='tmp/%s'%(output_file)))

    f=open(fix_file,"w")

    f.write("H%06d%-60s%-10s%-10s%-45s%-45s*\n"%(0,Customer,From,To,Status,Currency))
    count = 0
    for row in rows:
        f.write ("D%06d%-60s%020.8f%020.8f%020.8f%020.8f%020.8f%010d*\n"%\
                    (row.CIT_Count, row.CU_Description, row.Rat_Price, row.CR_Quantity,row.CR_ST_at_Rate_Cur,row.CR_Cur_XR,row.CR_ST_at_Cur,0)\
                )
        count += 1
    f.write("T%06d%0170d*\n"%(count,0))
    f.close()
    return fix_file

def delete_user_resume(output_files,Customer,From,To,Status,Currency):
    result = False
    try:
        # deletes all matching output files
        for output_file in output_files:
            delete_file="%s/%s"%(current_app.root_path,url_for('static',filename='tmp/%s'%(output_file)))
            logger.debug(f"deleting file system file: {delete_file}")
            if os.path.exists(delete_file):
                os.remove(delete_file)
        logger.debug(f"delete_user_resume: will delete = {Customer},{From},{To},{Status},{Currency}")
        result = db.Delete_User_Resume(Customer,From,To,Status,Currency)
        logger.debug(f"delete_user_resume: result = {result}")
    except Exception as e:
        logger.error(f"delete_user_resume: Exception: {str(e)}")
        flash(f"delete_user_resume: Exception: {str(e)}")
        result = False
    return result

@main.route('/export/User_Resume', methods=['GET','POST'])
@login_required
def export_User_Resume():
    logger.debug('Enter: Export_User_Resume()')
    CC_Id           =  request.args.get('CC_Id',None,type=int)
    CC_Code         =  request.args.get('CC_Code',None,type=str)
    CC_Description  =  request.args.get('CC_Description',None,type=str)
    CIT_Date_From   =  request.args.get('CIT_Date_From',None,type=str)
    CIT_Date_To     =  request.args.get('CIT_Date_To',None,type=str)
    CIT_Status      =  request.args.get('CIT_Status',None,type=int)
    CIT_Status_Value=  request.args.get('CIT_Status_Value',None,type=str)
    Cur_Code        =  request.args.get('Cur_Code',None,type=str)
    Cur_Name        =  request.args.get('Cur_Name',None,type=str)
    Format          =  request.args.get('Format',None,type=str)

    # Aqui hace la conversion 
    output_file = "CR_%s_%s_%s_%s_%s.%s"%(CC_Code,CIT_Date_From,CIT_Date_To,CIT_Status,Cur_Code,Format)
    if Format == 'del':
        output_files=[]
        for Format in ['pdf','xlsx','csv','json','fix']:
            output_files.append("CR_%s_%s_%s_%s_%s.%s"%(CC_Code,CIT_Date_From,CIT_Date_To,CIT_Status,Cur_Code,Format))
        if delete_user_resume(output_files,current_user.id,CIT_Date_From,CIT_Date_To,CIT_Status,Cur_Code):
            flash(f"User Resume deleted.")
    else:
        # Get Actual Data from Database
        # NOTE: Here needs some Sand-Clock Message or something in case it takes so long ...
        return_file = None
        rows = []
        rows = db.Get_User_Resume(current_user.id,CIT_Date_From,CIT_Date_To,CIT_Status,Cur_Code)
        if len(rows):
            #flash(f"current_user={current_user}")
            #flash(f"current_user.cost_center={current_user.cost_center}")
            Customer = current_user.cost_center.CC_Description
            if      Format == 'pdf':
                return_file=export_user_resume_to_pdf(output_file,rows,Customer,CIT_Date_From,CIT_Date_To,CIT_Status_Value,Cur_Name)
            elif    Format == 'xlsx':
                return_file=export_user_resume_to_xls(output_file,rows,Customer,CIT_Date_From,CIT_Date_To,CIT_Status_Value,Cur_Name)
            elif    Format == 'csv':
                return_file=export_user_resume_to_csv(output_file,rows,Customer,CIT_Date_From,CIT_Date_To,CIT_Status_Value,Cur_Name)
            elif    Format == 'json':
                return_file=export_user_resume_to_json(output_file,rows,Customer,CIT_Date_From,CIT_Date_To,CIT_Status_Value,Cur_Name)
            elif    Format == 'fix':
                return_file=export_user_resume_to_fix(output_file,rows,Customer,CIT_Date_From,CIT_Date_To,CIT_Status_Value,Cur_Name)
            else:
                pass    

        if return_file is not None:
            if os.path.exists(return_file):
                # Aqui debe enviar el archivo a la PC
                return send_file(return_file,as_attachment=True,attachment_filename=output_file)
            else:
                flash(f"Warning: '{return_file}' does not exist.")
        else:
            flash(f"Warning: No exported data file available.")
    
    return redirect(url_for('.index'))

# =============================================================================
# View for Graphic os Use per Type
# (c) Sertechno 2019
# GLVH @ 2019-08-16
# =============================================================================

from emtec.collector.forms       import frm_graph_use_per_type_filter
from babel.numbers  import format_number, format_decimal, format_percent
from emtec.collector.common.stats_functions    import RunningStats

@main.route('/forms/Get_Graph_Stats_Per_Type_Filter', methods=['GET', 'POST'])
@login_required
@admin_required
def forms_Get_Graph_Stats_Per_Type_Filter():
    logger.debug('Enter: forms_Get_Graph_Stats_Per_Type_Filter()'%())

    form = frm_graph_use_per_type_filter()
    
    form.Graph.choices      = [ (1,"Lineal"), (2,"Bars"), (3,"Min Max") ]
    form.Type.choices       = db.session.query(cu_type.Typ_Code,cu_type.Typ_Description).order_by(cu_type.Typ_Description).all()
    form.Field.choices      = [ (1,"Count"), (2,"Mean"), (3,"Use") ]

    form.Customer.choices   = db.session.query(customer.Cus_Id,customer.Cus_Name).order_by(customer.Cus_Name).all()
    form.Platform.choices   = db.session.query(platform.Pla_Id,platform.Pla_Name).order_by(platform.Pla_Name).all()
    form.CC.choices         = db.session.query(cost_center.CC_Id,cost_center.CC_Description).order_by(cost_center.CC_Description).all()
    form.CI.choices         = db.session.query(configuration_item.CI_Id,configuration_item.CI_Name).order_by(configuration_item.CI_Name).all()

    form.Estimation.choices = [ (0,"None"),
                                (1,"Lineal"),
                                (2,"Season"),
                                (3,"Lineal Adjusted by Season"),
                                (4,"Lineal Adjusted by Season w/RLs")
                              ]
   
       
    if form.validate_on_submit():
        if     form.submit_Report.data:
            #print("CU Type=",form.Type.data,"len",len(form.Type.data))
            session['data'] = { 'graph':form.Graph.data,
                        'year':form.Year.data,
                        'from':form.From.data,
                        'to':form.To.data,
                        'type':form.Type.data,
                        'field':form.Field.data,
                        'customer':form.Customer.data,
                        'platform':form.Platform.data,
                        'cc':form.CC.data,
                        'ci':form.CI.data,
                        'estimation':form.Estimation.data }
            return redirect(url_for('.report_Graph_Use_Per_Type_Filter'
                                ))

        elif   form.submit_Cancel.data:
            flash('Report discarded ...')
        else:
            flash('form validated but not submited. Report to Support ...')
        return redirect(url_for('.forms_Get_User_Resume'))


    return render_template('graph_use_per_type_filter.html',form=form)

# =============================================================================

import simplejson as json
import matplotlib.pyplot as plt
import numpy as np
import calendar
import tempfile
from   emtec.collector.common.stats_functions import Regression_Line

@main.route('/report/Graph_Use_Per_Type_Filter', methods=['GET','POST'])
@login_required
@admin_required
def report_Graph_Use_Per_Type_Filter():
    logger.debug('Enter: report_Stats_Use_Per_Type_Filter()')
    
    tmp_name="tmp_name"
    tmp_path="tmp_path"
    actual=[]
    estimate=[]
    months=0

    query = db.session.query(st_use_per_type).filter(\
                st_use_per_type.Year    ==session['data']['year'],
                st_use_per_type.Month   >=session['data']['from'],
                st_use_per_type.Month   <=session['data']['to'],
                st_use_per_type.Typ_Code==session['data']['type'],
                st_use_per_type.Cus_Id  ==session['data']['customer'],
                st_use_per_type.Pla_Id  ==session['data']['platform'],
                st_use_per_type.CC_Id   ==session['data']['cc'],
                st_use_per_type.CI_Id   ==session['data']['ci']                
                )\
                .order_by(st_use_per_type.Year,st_use_per_type.Month)

    try:
        rows=query.all()
    except Exception as e:
        flash(e)
        rows=None
         
    # Initialize data vectors
    actual=[]
    estimate=[]
    for i in range(12):
        actual.append(0)
        
    # Load Actual Data vector with selected field
    session['data']['afield']='Count'
    session['data']['rs']=RunningStats()   # This will be use to captyre running statistics 
    for row in rows:
        if session['data']['field'] == 1:
            actual[row.Month-1] = row.Count
            session['data']['afield']='Count' 
        elif session['data']['field'] == 2:
            actual[row.Month-1] = float(row.Mean)
            session['data']['afield']='Mean' 
        elif session['data']['field'] == 3:
            actual[row.Month-1] = float(row.Count*row.Mean) 
            session['data']['afield']='Use' 
        else:
            actual[row.Month-1]=row.Count
            session['data']['afield']='Count' 
        session['data']['rs'].push(actual[row.Month-1])
    
    # Appropiate try/except blocks should be include here, any error should be reported and defaults considered
            
    session['data']['cutype']  = db.session.query(cu_type.Typ_Description).filter(cu_type.Typ_Code==session['data']['type']).scalar()
    session['data']['cusname'] = db.session.query(customer.Cus_Name).filter(customer.Cus_Id==session['data']['customer']).scalar()
    session['data']['planame'] = db.session.query(platform.Pla_Name).filter(platform.Pla_Id==session['data']['platform']).scalar()
    session['data']['ccname']  = db.session.query(cost_center.CC_Description).filter(cost_center.CC_Id==session['data']['cc']).scalar()
    session['data']['ciname']  = db.session.query(configuration_item.CI_Name).filter(configuration_item.CI_Id==session['data']['ci']).scalar()
 
    # MU defaults to Unit, should be repleced with variable MU depending on DB
    # MU will be allways UNT for field Count
    # MU will depend on DB for fields Mean & Use
    session['data']['mu']='UNT'
    # special cases follows
    if (session['data']['type'] in ('DSK','RAM')) and (session['data']['afield'] in ('Mean','Use')):
            session['data']['mu']='GB'
    
    # Prepare some presentation parameters
    dias = [np.array(calendar.mdays)[0:i].sum() + 1 for i in np.arange(12)+1]  # Para generar el lugar del primer días de cada mes en un año
    months = calendar.month_abbr[1:13]  # Creamos una lista con los nombres abreviados de los meses
    months12=months
    months24=months+months
    """
    for i in range(0,len(months12)):
        months12[i]=months12[i][0:3]
    for i in range(0,len(months24)):
        months24[i]=months24[i][0:3]
    """    
       
    # Ge Data here from parameters
    
    # Force Demo Data

    suptitle = "%s of %s (%s/%s-%s/%s)"%(session['data']['afield'],session['data']['cutype'],
                                months12[session['data']['from']-1],
                                session['data']['year'],
                                months12[session['data']['to']-1],
                                session['data']['year'],
                                )

    title=''
    
    estimate=[]
    session['data']['coeficients_yx']=None
    session['data']['coeficients_yx2']=None
    # As Data is Know, diferent graphic and forecasts can be generated, defaults to Lineal Regression Proyection

    if session['data']['estimation']==1:
        RL          =   Regression_Line(actual)
        estimate    =   RL.estimate_y(12,23)    # Calculates regression line for next year (12 months period)
        session['data']['coeficients_yx']=RL.get_yx_coeficients()
        title='Lineal proyection for %s'%(session['data']['year']+1)
    elif session['data']['estimation']==2:
        var=[]
        sum_var=0
        var.append(0)
        for i in range(1,len(actual)):
            if actual[i-1] != 0:
                v=(actual[i]-actual[i-1])/actual[i-1]
            else:
                v=0
            var.append(v)
            sum_var+=v
        var_mean=sum_var/11
        var[0]=var_mean
        previous=actual[11]
        for i in range(0,len(actual)):
            estimate.append(previous*(1+var[i]))
            previous=estimate[i]
            
        title='Season proyection for %s'%(session['data']['year']+1)
    elif session['data']['estimation']==3:
        var=[]
        sum_var=0
        var.append(0)
        for i in range(1,len(actual)):
            if actual[i-1] != 0:
                v=(actual[i]-actual[i-1])/actual[i-1]
            else:
                v=0
            var.append(v)
            sum_var+=v
        var_mean=sum_var/11
        var[0]=var_mean
        
        RL          =   Regression_Line(actual)
        estimate    =   RL.estimate_y(12,23)    # Calculates regression line for next year (12 months period)
        session['data']['coeficients_yx']=RL.get_yx_coeficients()

        for i in range(0,len(actual)):
            estimate[i]=estimate[i]*(1+var[i])
            
        title='Lineal proyection adjusted by season for %s'%(session['data']['year']+1)
    elif session['data']['estimation']==4:
        var=[]
        sum_var=0
        var.append(0)
        for i in range(1,len(actual)):
            if actual[i-1] != 0:
                v=(actual[i]-actual[i-1])/actual[i-1]
            else:
                v=0
            var.append(v)
            sum_var+=v
        var_mean=sum_var/11
        var[0]=var_mean
        
        RL          =   Regression_Line(actual)
        estimate    =   RL.estimate_y(12,23)    # Calculates regression line for next year (12 months period)
        session['data']['coeficients_yx']=RL.get_yx_coeficients()

        for i in range(0,len(actual)):
            estimate[i]=estimate[i]*(1+var[i])
            
        title='Lineal proyection adjusted by season w/RLs for %s'%(session['data']['year']+1)
        Data=actual+estimate
        RLLine1=RL.estimate_y(0,23)
        RL2         =   Regression_Line(Data)
        RLLine2=RL2.estimate_y(0,23)
        session['data']['coeficients_yx2']=RL2.get_yx_coeficients()
        
         
    else:
        pass
        #estimate    =   RL.estimate_y(12,23)    # Calculates regression line for next year (12 months period)
        #title='MV durante 2018'
    
    #print("Data 2018",actual)
    #print("Data 2019",estimate)

    
    # Variation to use auto-deletable temporary file names
    
    fp = tempfile.mkstemp(   suffix='.png',
                            dir='%s%s'%(    current_app.root_path,
                                            url_for('static',filename='tmp')
                                        )
                        )
                        
    tmp_path    =   fp[1]
    tmp_name    =   fp[1].split('/app/static/tmp/')[1]
        
    
    # Plot Data here to temporary file
    # Generate Graphic here    

    # Data is designed to report estimation for next year as a continuation of actual 2018's data
    Data=actual+estimate
    for i in range(0,len(actual)-1):
        Data[i]=None

    # Creates Figura: https://matplotlib.org/api/_as_gen/matplotlib.pyplot.figure.html
    fig = plt.figure(figsize=[12,9])
    
    # Get current size
    #fig_size = plt.rcParams["figure.figsize"]
    # Prints: [8.0, 6.0]
    #print ("Current size:", fig_size)
 
    # Set figure width to 12 and height to 9
    #fig_size=[12,9]
    #fig_size[0] = 12
    #fig_size[1] = 9
    #plt.rcParams["figure.figsize"] = fig_size

    # Get current size
    fig_size = plt.rcParams["figure.figsize"]
    # Prints: [8.0, 6.0]
    #print ("Current size:", fig_size)
    
    ax=fig.gca()
    ax.clear()
    
    if session['data']['graph']==1:
        ax.plot(actual,'b',label='Actual')
    elif session['data']['graph']==2:
        #index = np.arange(n_groups)
        index = np.arange(len(actual))
        bar_width = 0.70
        opacity = 0.4
        error_config = {'ecolor': '0.3'}
        #std_actual = (0,1,2,3,4,5,6,7,8,9,10,11)
        ax.bar( index,actual,bar_width,
                alpha=opacity, color='b',
                #yerr=std_actual, error_kw=error_config,
                label='Actual')

    else:
        ax.plot(actual,'b')
    
    
    if session['data']['estimation'] > 0: 
        ax.plot(Data,'r:',label="Estimation")
    
    if session['data']['estimation']==4:
        ax.plot(RLLine1,'b-',linewidth='0.5') 
        ax.plot(RLLine2,'r--',linewidth='0.5')
    
    # Customize the grid

    # Turn on the minor TICKS, which are required for the minor GRID
    ax.minorticks_on()

    # Customize the major grid
    ax.grid(which='major', linestyle='--', linewidth='0.5', color='gray')
    # Customize the minor grid
    ax.grid(which='minor', linestyle=':', linewidth='0.25', color='gray')    

    ax.legend()
    #fig.tight_layout()

    plt.suptitle(suptitle)
    plt.title(title)
    plt.xlabel('Period')
    plt.ylabel('%s of %s (%s)'%(session['data']['afield'],session['data']['cutype'],session['data']['mu']))
    
        
    if session['data']['estimation'] > 0: 
        xticks=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]
        plt.xticks(xticks, months24, size = 'small', color = 'b', rotation = 45)  # Etiquetas, meses, en las posiciones, dias, con color azul y rotadas 45º
    else:
        xticks=[0,1,2,3,4,5,6,7,8,9,10,11]
        plt.xticks(xticks, months12, size = 'small', color = 'b', rotation = 45)  # Etiquetas, meses, en las posiciones, dias, con color azul y rotadas 45º

    #plt.show()
    
    plt.savefig(tmp_path)
    plt.close
    return render_template('show_graph_use_per_type_filter.html',
                        filename=tmp_name,
                        actual=actual,
                        estimate=estimate,
                        #Year=Year,
                        months=months,
                        Data=session['data']
                )

# =============================================================================
# View for Graphic os Use per Type
# (c) Sertechno 2019
# GLVH @ 2019-08-16
# =============================================================================

from emtec.collector.forms       import frm_graph_use_per_type
from babel.numbers  import format_number, format_decimal, format_percent

@main.route('/forms/Get_Graph_Stats_Per_Type', methods=['GET', 'POST'])
@login_required
@admin_required
def forms_Get_Graph_Stats_Per_type():
    logger.debug('Enter: forms_Get_Graph_Stats_Per_Type()'%())

    form = frm_graph_use_per_type()
    
    form.Graph.choices   = [(1,"# de Máquinas Virtuales Anual y Proyección Lineal"),
                            (2,"# de Máquinas Virtuales Anual y Proyección estacional"),
                            (3,"# de Máquinas Virtuales Anual y Proyección lineal ajustada estacionalmente"),
                            (4,"# de Máquinas Virtuales Anual y Proyección lineal ajustada estacionalmente (c/LR)")
                           ]

    if form.validate_on_submit():
        if     form.submit_Report.data:

            return redirect(url_for('.report_Graph_Use_Per_Type',
                                Year            = form.Year.data,
                                Graph           = form.Graph.data
                                ))

        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            flash('Report discarded ...')
        else:
            flash('form validated but not submited. Report to Support ...')
            #print('form validated but not submited ???')
        return redirect(url_for('.forms_Get_User_Resume'))


    return render_template('stats_use_per_type.html',form=form)

# =============================================================================

import simplejson as json
import matplotlib.pyplot as plt
import numpy as np
import calendar
from   emtec.collector.common.stats_functions import Regression_Line

@main.route('/report/Graph_Use_Per_Type', methods=['GET','POST'])
@login_required
@admin_required
def report_Graph_Use_Per_Type():
    logger.debug('Enter: report_Stats_Use_Per_Type()')
    
    Year            =  request.args.get('Year',None,type=int)
    Graph           =  request.args.get('Graph',None,type=int)
        
    # Ge Data here from parameters
    
    # Force Demo Data
    actual      =   [170,210,223,285,301,285,310,260,280,240,320,260]
    estimate=[]


    # As Data is Know, diferent graphic and forecasts can be generated, defaults to Lineal Regression Proyection
    if Graph==1:
        RL          =   Regression_Line(actual)
        estimate    =   RL.estimate_y(12,23)    # Calculates regression line for next year (12 months period)
        print("Coeficientes y/x =",RL.get_yx_coeficients())
        title='MV durante 2018 y proyección lineal para 2019'
    elif Graph==2:
        var=[]
        sum_var=0
        var.append(0)
        for i in range(1,len(actual)):
            v=(actual[i]-actual[i-1])/actual[i-1]
            var.append(v)
            sum_var+=v
        var_mean=sum_var/11
        var[0]=var_mean
        previous=actual[11]
        print("var=",var,"len(var)=",len(var))
        for i in range(0,len(actual)):
            estimate.append(previous*(1+var[i]))
            previous=estimate[i]
            
        title='MV durante 2018 y proyección estacional para 2019'
    elif Graph==3:
        var=[]
        sum_var=0
        var.append(0)
        for i in range(1,len(actual)):
            v=(actual[i]-actual[i-1])/actual[i-1]
            var.append(v)
            sum_var+=v
        var_mean=sum_var/11
        var[0]=var_mean
        
        RL          =   Regression_Line(actual)
        estimate    =   RL.estimate_y(12,23)    # Calculates regression line for next year (12 months period)

        for i in range(0,len(actual)):
            estimate[i]=estimate[i]*(1+var[i])
            
        title='MV durante 2018 y proyección lineal ajustada estacionalmente para 2019'
    elif Graph==4:
        var=[]
        sum_var=0
        var.append(0)
        for i in range(1,len(actual)):
            v=(actual[i]-actual[i-1])/actual[i-1]
            var.append(v)
            sum_var+=v
        var_mean=sum_var/11
        var[0]=var_mean
        
        RL          =   Regression_Line(actual)
        estimate    =   RL.estimate_y(12,23)    # Calculates regression line for next year (12 months period)

        for i in range(0,len(actual)):
            estimate[i]=estimate[i]*(1+var[i])
            
        title='MV durante 2018 y proyección lineal ajustada estacionalmente para 2019'
        Data=actual+estimate
        RLLine1=RL.estimate_y(0,23)
        RL2         =   Regression_Line(Data)
        RLLine2=RL2.estimate_y(0,23)
        
         
    else:
        RL          =   Regression_Line(actual)
        estimate    =   RL.estimate_y(12,23)    # Calculates regression line for next year (12 months period)
        title='MV durante 2018 y proyección lineal para 2019'
    
    print("Data 2018",actual)
    print("Data 2019",estimate)

    filename       =   "%s_stats_per_use_type_%s.png"%(current_user.id,id(actual))
    tmp_filename    =   "%s%s"%(current_app.root_path,url_for('static',filename='tmp/%s'%(filename)))
    
    print("filename=",filename)
    print("tmp_name=",tmp_filename)
    
    
    # Plot Data here to temporary file
    # Generate Graphic here    

    # Data is designed to report estimation for next year as a continuation of actual 2018's data
    Data=actual+estimate
    for i in range(0,len(actual)-1):
        Data[i]=None

    
    fig = plt.figure()
    ax=fig.gca()
    ax.clear()
    ax.plot(actual,'b') 
    ax.plot(Data,'r:')
    if Graph==4:
        ax.plot(RLLine1,'b-',linewidth='0.5') 
        ax.plot(RLLine2,'r--',linewidth='0.5')
    
    # Customize the grid

    # Turn on the minor TICKS, which are required for the minor GRID
    ax.minorticks_on()

    # Customize the major grid
    ax.grid(which='major', linestyle='--', linewidth='0.5', color='gray')
    # Customize the minor grid
    ax.grid(which='minor', linestyle=':', linewidth='0.25', color='gray')    

    plt.suptitle('Collector')
    plt.title(title)
    plt.xlabel('Periodo')
    plt.ylabel('# de Máquinas Virtuales')

    dias = [np.array(calendar.mdays)[0:i].sum() + 1 for i in np.arange(12)+1]  # Para generar el lugar del primer días de cada mes en un año
    months = calendar.month_name[1:13]  # Creamos una lista con los nombres de los meses
    months24=months+months
    for i in range(0,len(months24)):
        months24[i]=months24[i][0:3]
    xticks=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]

    plt.xticks(xticks, months24, size = 'small', color = 'b', rotation = 45)  # Colocamos las etiquetas, meses, en las posiciones, dias, con color azul y   rotadas 45º

    #plt.show()
    plt.savefig(tmp_filename)
    plt.close
    return render_template('show_graph_use_per_type.html',
                        filename=filename,
                        actual=actual,
                        estimate=estimate,
                        Year=Year,
                        months=months
                )

# =============================================================================
# View for Import Cost Centers
# (c) Sertechno 2019
# GLVH @ 2019-08-16
# =============================================================================

import os
from emtec.collector.forms       import frm_import_cost_centers
from werkzeug.utils import secure_filename
from flask_wtf.file import FileField

#UPLOAD_FOLDER = '/path/to/the/uploads'
UPLOAD_FOLDER = '/tmp'
#ALLOWED_EXTENSIONS = set(['txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif'])
ALLOWED_EXTENSIONS=set(['xls'])

#app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER


def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

#--------------------------------------------------------------------------
#from openpyxl import load_workbook
import os
import json
# Libreria para leer formato XLS
from xlrd import open_workbook
from time import strptime,strftime
# Import create_engine function
from sqlalchemy import create_engine
from sqlalchemy import text

def load_columns(sheet):
    columns={}
    for col in range(sheet.ncols):
        columns.update({sheet.cell(0,col).value:col})
    return columns
    
def load_Cost_Centers_from_XLS(file):
    logger.debug('%s: Enter: load_Cost_Centers_from_XLS(%s)'%(__name__,file))

    updates=0
    additions=0
    errors=0

    DATA={}
    DATA.update({'metadata':{},'entities':[]})
    
    name = file.split('.')
    
    wb = open_workbook(file)
    nsheets=0

    DATA['metadata'] = {'name':name}
    for s in wb.sheets():
        COLUMNS={}
        COLUMNS=load_columns(s)

        if 'Cost_Centers' in s.name:
            for row in range(1,s.nrows):
                DATA['entities'].append({ 
                            'CC_Id':            int(s.cell(row,COLUMNS['CC_Id']).value),
                            'CC_Code':          s.cell(row,COLUMNS['CC_Code']).value,
                            'CC_Description':   s.cell(row,COLUMNS['CC_Description']).value,
                            'Cur_Code':         s.cell(row,COLUMNS['Cur_Code']).value,
                            'CC_Parent_Code':   s.cell(row,COLUMNS['CC_Parent_Code']).value,
                            })
    logger.debug("%s: CCs = %d"%(__name__,len(DATA['entities'])))
    
    DATA['metadata'].update({'count':len(DATA['entities'])})

    for cc in DATA['entities']:    
        logger.debug("Importing CC: %s %s"%(cc['CC_Code'],cc['CC_Description']))
        try:
            id = db.session.query(cost_center.CC_Id).filter(cost_center.CC_Code==cc['CC_Code']).scalar()
            if id:
                logger.debug("Existent CC",id,"will be updated");
                c=cost_center(id,cc['CC_Code'],cc['CC_Description'],cc['Cur_Code'],cc['CC_Parent_Code'])
                try:
                    db.session.merge(c)
                    db.session.commit()
                    updates+=1
                except Exception as e:
                    errors+=1              
                    flash("fail updating CC:",e)
                logger.debug("c=",c)                
            else:
                logger.debug("Add new CC")
                c=cost_center(0,cc['CC_Code'],cc['CC_Description'],cc['Cur_Code'],cc['CC_Parent_Code'])
                
                logger.debug("c=",c)                
                try:
                    db.session.add(c)
                    db.session.commit()
                    additions+=1
                except Exception as e:                
                    errors+=1              
                    flash("fail updating CC:",e)
        except Exception as e:
            errors+=1              
            flash("fail querying for CC:",e)
        
    return (len(DATA['entities']),additions,updates,errors)

#--------------------------------------------------------------------------
@main.route('/forms/Import_Cost_Centers', methods=['GET', 'POST'])
@login_required
def forms_Import_Cost_Centers():
    logger.debug('%s: Enter: forms_Import_Cost_Centers()'%(__name__))
    logger.debug('%s: UPLOAD_FOLDER=%s'%(__name__,UPLOAD_FOLDER))

    session['data'] =  { }

    form = frm_import_cost_centers()
    logger.debug('%s: form = %s'%(__name__,form))        
    
    if form.validate_on_submit():
        f=form.Import.data
        filename=secure_filename(f.filename)
        logger.debug('%s: filename is %s'%(__name__,filename))        
        f.save(os.path.join(
            UPLOAD_FOLDER,  filename
        ))        
        logger.debug('%s: will call load_Cost_Centers_from_XLS with UPLOAD FOLDER=%s'%(__name__,UPLOAD_FOLDER))        
        result=load_Cost_Centers_from_XLS("%s/%s"%(UPLOAD_FOLDER,filename))
        logger.debug('%s: result type is %s'%(__name__,type(result)))        
        logger.debug('%s: will render template import_cost_centers_execution.html'%(__name__,type(result)))        
        return render_template('import_cost_centers_execution.html',filename=filename,result=result)
        """
        if     form.submit_Import.data:
            print("************")
            print("form.submit_Import.data",form.submit_import.data);
            flash("form.submit_Import.data="%form.submit_import.data);
            print("************")
            return redirect(url_for('.import_Cost_Centers'))
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Report discarded ...')
        else:
            print('form validated but not submited ???')
            return redirect(url_for('.index'))
        """
    logger.debug('%s: will render template import_cost_centers.html'%(__name__))        
    return render_template('import_cost_centers.html',form=form)
    
    
"""    
@main.route('/import/Cost_Centers', methods=['GET','POST'])
@login_required
def import_Cost_Centers():
    #return send_file(return_file,as_attachment=True,attachment_filename=output_file)
    return '<H1>export_User_Resume</H1>'
"""    
"""    
@main.route('/import/Cost_Centers', methods=['GET','POST'])
#def upload_file():
def import_Cost_Centers():
    if request.method == 'POST':
        # check if the post request has the file part
        if 'file' not in request.files:
            flash('No file part')
            return redirect(request.url)
        file = request.files['file']
        # if user does not select file, browser also
        # submit a empty part without filename
        if file.filename == '':
            flash('No selected file')
            return redirect(request.url)
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            
            #file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
            file.save(os.path.join(UPLOAD_FOLDER, filename))
            
            return redirect(url_for('uploaded_file',
                                    filename=filename))
    return
" ""
    return '''
    <!doctype html>
    <title>Upload new File</title>
    <h1>Upload new File</h1>
    <form method=post enctype=multipart/form-data>
      <p><input type=file name=file>
         <input type=submit value=Upload>
    </form>
    '''    
"""    
"""
from flask import send_from_directory

#@app.route('/uploads/<filename>')
@main.route('/uploads/<filename>')
def uploaded_file(filename):
    #return send_from_directory(app.config['UPLOAD_FOLDER'], filename)
    return send_from_directory(UPLOAD_FOLDER, filename)
"""    
# ======================================================================
# View for Fast Calculation of Period Usage up to now
# (c) Sertechno 2021
# GLVH @ 2021-12-04 Initial version
# ======================================================================

from pprint                         import pformat
from emtec.collector.forms          import frm_charging_resume
from babel.numbers                  import format_number
from babel.numbers                  import format_decimal
from babel.numbers                  import format_percent
from emtec.collector.db.orm_model   import Configuration_Items
import simplejson as json

# ======================================================================


@main.route('/report/Period_Usage', methods=['GET','POST'])
@login_required
def report_Period_Usage():
    logger.debug(f'{this()}: Enter')    
    collectordata=get_collectordata()
    
    db.session.flush()
    db.session.commit()
        
    Cus_Id          =  current_user.cost_center.Cus_Id
    Rates           = {}
    
    parser = configparser.ConfigParser(
            allow_no_value=False,     # don't allow "key" without "="
            delimiters=('=',),        # inifile "=" between key and value
            comment_prefixes=(';','#'),  # only ';' for comments (fixes #channel)
            inline_comment_prefixes=(';'),     # comments after lines
            interpolation=configparser.ExtendedInterpolation(),
            empty_lines_in_values=False  # empty line means new key
            )
    parser.read(current_app.config.get('COLLECTOR_CONFIG_FILE'))
    # Read Configuration
    Rates = {}
    # Reads Rates from configuration file
    for option in parser.options('Rates'):
        values = parser.get('Rates',option).split(',')
        logger.debug(f"values={values}")
        if len(values)>1:
            rate,measure_unit,period,is_allways_billeable = values
        else:
            rate = values[0]
        Rates.update({
            option:{
                'rate'                : round(float(rate),12),
                'measure_unit'        : str(measure_unit).strip().upper(),
                'period'              : str(period).strip().upper(),
                'is-allways_billeable': True if str(is_allways_billeable).upper() in ['TRUE','VERDADERO','SI','T','V','S'] else False
            }
        })
    # set shardened Charge Items Table as per active period
    Charge_Items.set_shard(collectordata['COLLECTOR_PERIOD']['active'])  
    # BETA Message, to be removed --------------------------------------
    flash('Beta version. Query in development. Results are referential only','error')
    # BETA Message, to be removed --------------------------------------
    usage = db.Get_Period_Usage(customer_id=Cus_Id,rates=Rates)
    pprint(usage)
    # Updated cached data for this specific query if requested 
    try:
        temp_folder   = "/tmp"
        temp_filename = f"{temp_folder}/{next(tempfile._get_candidate_names())}.json"
        with open(temp_filename,"w") as fp:
            fp.write(json.dumps(usage))
        return render_template('report_period_usage.html',data=usage,collectordata=collectordata,temp_filename=temp_filename)
    except Exception as e:
        return f"{this()}: Exception:  {str(e)}"
        
@main.route('/download/Period_Usage', methods=['GET','POST'])
@login_required
def download_Period_Usage():
    logger.debug(f'{this()}: Enter')    
    collectordata=get_collectordata()
    
    db.session.flush()
    db.session.commit()
    
    temp_filename   =  request.args.get('temp_filename',None,type=str)
    if not temp_filename:
        return "Invalid data"

    with open(temp_filename,'r') as fp:
        data = json.load(fp)
    
    if data is None:
        return "Invalid data"
        
    
    d = {
        'detail':[],
        'rows':0
    }
    # Build list of records to export from query
    for Component_Type in ['CPU','RAM']:
        for Power_Status in ['0','1']:
            try:
                row = data[Component_Type][Power_Status]
                d['detail'].append({
                        'type'      :Component_Type,
                        'power'     :'ON' if Power_Status=='1' else 'OFF',
                        'hours'     :row.get('hours',0),
                        'Q_hours'   :row.get('Q_hours',0),
                        'Q_month'   :row.get('Q_month',0),
                        'rate'      :row.get('rate',0),
                        'rtmf'      :row.get('rtmf',0),
                        'rate_month':row.get('rate_month',0),
                        'bill'      :row.get('bill',0),
                })
            except Exception as e:
                print(f"Exception: str({e})")
    for Component_Type in ['DSK','SNP','DRP','IMG']:
        for Power_Status in ['0','1']:
            try:
                row = data[Component_Type][Power_Status]
                d['detail'].append({
                        'type'      :Component_Type,
                        'power'     :'ON' if Power_Status=='1' else 'OFF',
                        'hours'     :row.get('hours',0),
                        'Q_hours'   :row.get('Q_hours',0),
                        'Q_month'   :row.get('Q_month',0),
                        'rate'      :0,
                        'rtmf'      :0,
                        'rate_month':0,
                        'bill'      :0,
                })
                for Disk_Type in ['HDD','SSD']:
                    rox = row[Disk_Type]
                    d['detail'].append({
                            'type'      :f"{Component_Type}-{Disk_Type}",
                            'power'     :'ON' if Power_Status=='1' else 'OFF',
                            'hours'     :0,
                            'Q_hours'   :0,
                            'Q_month'   :rox.get('Q_month',0),
                            'rate'      :rox.get('rate',0),
                            'rtmf'      :row.get('rtmf',0),
                            'rate_month':rox.get('rate_month',0),
                            'bill'      :rox.get('bill',0),
                    })
            except Exception as e:
                print(f"Exception: str({e})")
                    
    # List of fields in desired order 
    headers=[
                'type',
                'power',
                'hours',
                'Q_hours',
                'Q_month',
                'rate',
                'rtmf',
                'rate_month',
                'bill',
    ]
    # Normalize data into a Pandas Dataframe
    df1 = json_normalize(d, 'detail')
    # Reorder columns
    df1 = df1.reindex(columns=headers)
    # create temporary filename       
    temp_name   = f"{ next(tempfile._get_candidate_names()) }.xlsx"
    #print(f"temp_name={temp_name}")
    
    xlsx_file="%s/%s"%(current_app.root_path,url_for('static',filename='tmp/%s'%(temp_name)))
    #print(f"df1={df1}")
    #print(f"xlsx_file={xlsx_file}")
    df1.to_excel(xlsx_file,f"Usage {data.get('period')}")
    
    return send_file(xlsx_file,as_attachment=True,attachment_filename=temp_name)
# =============================================================================
# View for Get Active Sharding Period
# (c) Sertechno 2020
# GLVH @ 2020-03-18
# =============================================================================

from emtec.collector.forms       import frm_set_period

@main.route('/forms/Set_Period', methods=['GET', 'POST'])
@login_required
def forms_Set_Period():
    logger.debug('Enter: forms_Set_Period()'%())
    form = frm_set_period()
    # Aqui debe determinar los periodos disponibles
    # segun BD y coordinado con indicador en Tabla Interface para este
    # usuario

    set_periods_available(
        db.engine,
        Interface,
        current_user.id
        )

    session['data'] =  { 'Period': get_period_data(
                                        User_Id=current_user.id,
                                        engine=db.engine,
                                        Interface=Interface
                                        ) 
                        }

    period_choices=[]
    periods=session['data']['Period']['available'].split(',')

    try:
        for period in periods:
            description="Charge Items table for %s"%(
                datetime.strptime(period,"%Y%m").strftime("%B %Y")
                )
            period_choices.append((period,description))
    except:
        flash('Warning no periods available ...')
        pass
    form.Period.choices   = period_choices
    #form.Period.data      = session['data']['Period']['active']
                            
    if form.validate_on_submit():
        data=session['data']
        print("**********************************************")
        print("data=",data)
        print("**********************************************")
        if     form.submit_Set.data:
            # Aqui ajusta valor en BD para este usuario segun seleccion
            # usa funcion set ....
            
            set_interface_variable(
                engine=db.engine,
                Interface=Interface,
                User_Id=current_user.id,
                Table_name='CONTEXT',
                name='active_period',   # Variable name
                value=form.Period.data              # variable value
            )
            return redirect(url_for('.set_Period', data = data ))
        elif   form.submit_Cancel.data:
            print('Cancel Data Here ... does nothing')
            flash('Report discarded ...')
        else:
            print('form validated but not submited ???')
        return redirect(url_for('.index'))
    return render_template(
            'set_period.html',
            form=form,
            collectordata=get_collectordata(),
            data=get_period_data(
                    engine=db.engine,
                    Interface=Interface,
                    User_Id=current_user.id
                    )
            )

# =============================================================================

@main.route('/set/Period', methods=['GET','POST'])
@login_required
def set_Period():
    function_name=sys._getframe().f_code.co_name
    logger.debug('%s: Enter'%(function_name))

    return render_template(
            'report_period.html',
            collectordata=get_collectordata(),
            data=get_period_data(
                    engine=db.engine,
                    Interface=Interface,
                    User_Id=current_user.id
                    )
            )
# =============================================================================
# View for Get Charging Resume from DB
# (c) Sertechno 2018
# GLVH @ 2018-08-16
# =============================================================================

from emtec.collector.forms       import frm_stats_use_per_type
from babel.numbers  import format_number, format_decimal, format_percent

@main.route('/forms/Get_Stats_Per_Type', methods=['GET', 'POST'])
@login_required
@admin_required
def forms_Get_Stats_Per_type():
    logger.debug('Enter: forms_Get_Stats_Per_Type()'%())

    form = frm_stats_use_per_type()

    if form.validate_on_submit():
        if     form.submit_Report.data:

            print("form=",form)
            print("form.Year=",form.Year)
            Year=form.Year
            print("Year=",Year)
            print("Year.data=",Year.data)

            return redirect(url_for('.report_Stats_Use_Per_Type',
                                Year            = form.Year.data
                                ))

        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            flash('Report discarded ...')
        else:
            flash('form validated but not submited. Report to Support ...')
            #print('form validated but not submited ???')
        return redirect(url_for('.forms_Get_User_Resume'))


    return render_template('stats_use_per_type.html',form=form)

# =============================================================================

import simplejson as json

@main.route('/report/Stats_Use_Per_Type', methods=['GET','POST'])
@login_required
@admin_required
def report_Stats_Use_Per_Type():
    logger.debug('Enter: report_Stats_Use_Per_Type()')
    
    Year            =  request.args.get('Year',None,type=int)
    
    print("Year=",Year)
    
    rows= db.session.query(st_use_per_type)\
                    .filter(st_use_per_type.Year==Year)\
                    .order_by(st_use_per_type.Typ_Code)\
                    .all()
    
    return render_template('report_stats_use_per_type.html',
                        rows=rows,
                        Year=Year
                )

# =============================================================================
# View Test Progress Bar
# (c) Sertechno 2020
# GLVH @ 2020-03-20
# =============================================================================

from flask import Response

from emtec.collector.forms import frm_test_progress

@main.route('/test_progress',methods=['GET','POST'])
def test_progress():
    data={  'title':'CIs calculados',
        }
    form=frm_test_progress()
    form.Period.choices=[
        (1,"Valor 1"),
        (2,"Valor 2"),
        (3,"Valor 3"),
    ]
    return render_template(
        'test_progress_1.html',
        data=data,
        form=form
        )
     
@main.route('/progress',methods=['GET','POST'])
def progress():
    print("enter progress ...")
    def generate():
        x = 0
        print("enter generate ... x=",x)
        
        while x <= 100:
            print("in loop x=",x)
            yield "data:%s\n\n"%x
            x = x + 10
            time.sleep(1.0)
        print("exit generate ... x=",x)
            
    print("exiting progress ...")
    return Response(
                generate(), 
                mimetype= 'text/event-stream'
                )
# =============================================================================
# View for User Data in Tree structure
# (c) Sertechno 2018,2019
# GLVH @ 2019-01-11
# =============================================================================

# view required imports
import os
import json
from pprint import pprint,pformat

# view required functions

img='xxx'

def load_children(PARENT,DATA,children,parent=0):
        cc_counter=0
        for child in children:
            DATA.append({
                'cc_id':child.CC_Id,
                'cc_code':child.CC_Code,
                'cc_description':child.CC_Description,
                'children':[],
                'ci_list':[],
                'ci_count':0,
                'parent':parent
                })
            # Load CIs
            query = db.session.query(
                        configuration_item.CI_Id,configuration_item.CI_Name
                        ).filter(configuration_item.CC_Id==child.CC_Id)
            CIS = query.all()
            ci_counter = 0
            for ci in CIS:
                DATA[cc_counter]['ci_list'].append({
                    'ci_id'   : ci.CI_Id,
                    'ci_name' : ci.CI_Name,
                    'cu_list' : []
                    })
                # Load CUs
                query = db.session.query(charge_unit
                            ).filter(charge_unit.CI_Id==ci.CI_Id)
                CUS = query.all()
                for cu in CUS:
                    ref=''
                    if cu.CU_UUID is not None:
                        ref=    ( " / %s"%cu.CU_UUID.strip()        if (len( cu.CU_UUID.strip() ) > 0) else '')
                    if cu.CU_Reference_1 is not None:
                        ref=ref+( " / %s"%cu.CU_Reference_1.strip() if (len( cu.CU_Reference_1.strip() ) > 0) else '')
                    if cu.CU_Reference_2 is not None:
                        ref=ref+( " / %s"%cu.CU_Reference_2.strip() if (len( cu.CU_Reference_2.strip() ) > 0) else '')
                    if cu.CU_Reference_3 is not None:
                        ref=ref+( " / %s"%cu.CU_Reference_3.strip() if (len( cu.CU_Reference_3.strip() ) > 0) else '')
                    DATA[cc_counter]['ci_list'][ci_counter]['cu_list'].append({'cu_id':cu.CU_Id,'cu_description':cu.CU_Description,'cu_reference':ref})
                ci_counter+=1
            #DATA[cc_counter]['ci_count']    = len(DATA[cc_counter]['ci_list'])
            #PARENT['children']['ci_count'] += DATA[cc_counter]['ci_count']
            
            # Look for more children
            query = db.session.query(cost_center
                        ).filter(cost_center.CC_Parent_Code == child.CC_Code,
                                 cost_center.CC_Code        != cost_center.CC_Parent_Code
                        )
            list_children_cc = query.all()
            if len(list_children_cc)>0:
                load_children(DATA,DATA[cc_counter]['children'],list_children_cc)
            cc_counter+=1

def render_ci(ci,f,level,
    render_empty_ci=False   # renders CI if empty
    ):
    # setup Edit Icon as per actual static icon
    img='<img src="/static/img/search.png" width="32" height="32" title="" alt="Details">'
    # define accordeon indentation level lof current option
    indent="  "*level
    # Output Force/Write Whitespace indentation data
    M='<font color="white">%s</font>'%("MM"*level)
    cu_list_name="cul_%s"%ci['ci_id']
    # If there is CUs, this is the deepest level, define if "renderizable")
    if len(ci['cu_list']):
        href="/forms/Configuration_Items?CI_Id=%s"%ci['ci_id']
        if ci['ci_id'] == 1:
            href='#'
            img=''
        f.write('%s%s<button type="button" class="btn btn-link" data-toggle="collapse" data-target="#%s">Configuration Item: %s (%s Charge Units)</button><a href="%s"  target="_blank">%s</a><br>\n'%\
                            (indent*3,M*2, cu_list_name, ci['ci_name'], len(ci['cu_list']),href,img))
                            
        f.write('%s<div id="%s" class="collapse">\n'%(indent*4,cu_list_name))
        for cu in ci['cu_list']:
            href="/forms/Charge_Units?CU_Id=%s"%cu['cu_id']
            if cu['cu_id'] == 1:
                f.write('%s%sCharge Unit: %s %s<br>\n'%(indent*5,M*3,cu['cu_description'],cu['cu_reference']))
            else:
                f.write('%s%s<a href="%s" target="_blank">Charge Unit: %s %s</a><br>\n'%(indent*5,M*3,href,cu['cu_description'],cu['cu_reference']))
                            
        f.write("%s</div>"%(indent*4))
    else:
        if render_empty_ci:
            href="/forms/Configuration_Items?CI_Id=%s"%ci['ci_id']
            f.write('%s%s<a href="%s" target="_blank">Configuration Item: %s %s</a><br>\n'% (indent*3,M*2, href, ci['ci_name'],img) )                     

def render_children(DATA,f,level=1,
    render_empty_cc=False
    ):
    img='<img src="/static/img/search.png" width="32" height="32" title="" alt="Details">'
    child_counter=0
    indent="  "*level
    M='<font color="white">%s</font>'%("MM"*level)
    cc_list_name="ccl_%s"%id(DATA['children'])
    for child in DATA['children']:
        # If there's CIs
        if len(child['ci_list'])>0:
            href="/forms/Cost_Centers?CC_Id=%s"%child['cc_id']
            ci_list_name="cil_%s"%child['cc_id']
            if child['cc_id'] == 1:
                f.write('%s%s'
                    '<button type="button" class="btn btn-link" data-toggle="collapse" data-target="#%s">Cost Center: %s %s (%s Configuration Items)</button>'
                    '<a href="%s" target="_blank">%s</a><br>\n'%\
                     (indent,M, 
                      ci_list_name, child['cc_code'], child['cc_description'], len(child['ci_list']),
                      "#",""))
            else:
                f.write('%s%s'
                    '<button type="button" class="btn btn-link" data-toggle="collapse" data-target="#%s">Cost Center: %s %s (%s Configuration Items)</button>'
                    '<a href="%s" target="_blank">%s</a><br>\n'%\
                     (indent,M, 
                      ci_list_name, child['cc_code'], child['cc_description'], len(child['ci_list']),
                      href,img))
            f.write('%s<div id="%s" class="collapse">\n'%(indent*2,ci_list_name))
                
            for ci in child['ci_list']:
                render_ci(ci,f,level)
            f.write("%s</div>"%(indent*2))
        else:
            if render_empty_cc:
                href="/forms/Cost_Centers?CC_Id=%s"%child['cc_id']
                f.write('<font color="white">%s%s__</font><a href="%s" target="_blank">Cost Center: %s %s</a><br>\n'%(indent,M, href, child['cc_code'], child['cc_description'])  )      
        if len(child['children'])>0:
            render_children(child,f,level+1)
        child_counter+=1        

    
@main.route('/forms/User_Data_View', methods=['GET'])
@login_required
@permission_required(Permission.CUSTOMER)
def forms_User_Data_View():
    logger.debug('Enter: forms_User_Data_View()'%())
    collectordata=get_collectordata()
        
    config_ini = configparser.ConfigParser(interpolation=ExtendedInterpolation())
    if current_app.config.get('COLLECTOR_CONFIG_FILE'):
        config_ini.read( current_app.config.get('COLLECTOR_CONFIG_FILE') )        
        limit_user_cost_centers = config_ini.getboolean('Interface','limit_user_cost_centers',fallback=False)
    else:
        limit_user_cost_centers = False
        
    query = db.session.query(
            Configuration_Items.Cus_Id,
            Configuration_Items.CC_Id,
            Configuration_Items.CI_Id,
            Charge_Units.CU_Id,
            Charge_Units.Typ_Code,
            Cost_Centers.CC_Description,
            Configuration_Items.CI_Name,
            Charge_Units.CU_Description,
            Charge_Units.CU_Reference_1,
            Charge_Units.CU_Reference_2,
            Charge_Units.CU_Reference_3
            ).select_from(Charge_Units
            ).join( Configuration_Items,
                    Configuration_Items.CI_Id   == Charge_Units.CI_Id
            ).join( Cost_Centers,
                    Cost_Centers.CC_Id          == Configuration_Items.CC_Id
            ).filter(Charge_Units.Typ_Code.in_(('CPU','RAM','DSK','IMG')) # Este deberia ser la lista de permitidos OJO
            ).filter(Configuration_Items.CI_Name.notlike('NBUBVG%')
            ).filter(Configuration_Items.Cus_Id == current_user.cost_center.Cus_Id)

    # Limits CCs to user visible only, else all above users's cc id
    if limit_user_cost_centers:
        logger.info("limiting user cost centers ....")
        USER_COST_CENTERS = db.get_user_cost_centers(current_user.id)
        query = query.filter(Configuration_Items.CC_Id.in_(USER_COST_CENTERS))
    else:
        query = query.filter(Configuration_Items.CC_Id  >= current_user.cost_center.CC_Id) # Este deberia ser la lista de permitidos OJO
    rows = query.order_by( Cost_Centers.CC_Description,
                        Configuration_Items.CI_Name,
                        Charge_Units.CU_Description
            ).all()

    return render_template("user_data_view_new.html",rows=rows)



"""
    # Data will be a map with structured Cost Centers details
    DATA={}
    DATA.update({
        'user'          : {'user_id':USER},
        'cc_id'         : list_cc[0].CC_Id,
        'cc_code'       : list_cc[0].CC_Code,
        'cc_description': list_cc[0].CC_Description,
        'children'      : [],
        'ci_count'      : 0,
        })

    # will populate DATA with detaisl from childrens list
    # starts with top CC only
    load_children(DATA,DATA['children'],list_cc)
    '''
    print("***********************************************************")
    print("***********************************************************")
    #pprint(DATA)
    with open("/home/gvalera/COMPARTIDO/loco.json","w") as fp:
        fp.write(json.dumps(DATA))
    print("***********************************************************")
    print("***********************************************************")
    for x in DATA['children']:
        if x['ci_count']>0 or x['parent']>0:
            print(x)
    '''
    # Temporary tree file name, will be unique for user
    filename="tmp/%s_user_data_tree.html"%(current_user.id)
    try:
        # if previos version exists, then its removed
        if os.path.exists(f"/{filename}"):
            os.remove(f"/{filename}")
        f=open(f"/{filename}",'w')
    except Exception as e:
        message=("Couldn't open file: '%s'. Please inform administrator. EXCEPTION: %s"%(filename,e))
        flash(message)
        logger.error(message)
        # renders exception if required
        return render_template("exception.html",filename=filename,data=DATA)
        
#  generate HTML

    render_children(DATA,f)
   
    f.close()
    
    print("forms_User_Data_View(): filename=",filename)
    
    # Actual output rendering
    return render_template("user_data_view.html",filename=filename,data=DATA)
"""
# =============================================================================

@main.route('/forms/User_Data_View_OLD', methods=['GET'])
@login_required
@permission_required(Permission.CUSTOMER)
def forms_User_Data_View_OLD():
    logger.debug('Enter: forms_User_Data_View()'%())
    collectordata=get_collectordata()

    USER              = current_user.id
    

    # Get CC of current User (Top Level CC for all query effects)
    user_cc = db.session.query(User.CC_Id).filter(User.id==USER).scalar()
    # Populates list with actual User's Top Cost Center attributes (must be one only) 
    list_cc = db.session.query(cost_center).filter(cost_center.CC_Id==user_cc).all() 



    # Data will be a map with structured Cost Centers details
    DATA={}
    DATA.update({
        'user'          : {'user_id':USER},
        'cc_id'         : list_cc[0].CC_Id,
        'cc_code'       : list_cc[0].CC_Code,
        'cc_description': list_cc[0].CC_Description,
        'children'      : [],
        'ci_count'      : 0,
        })

    # will populate DATA with detaisl from childrens list
    # starts with top CC only
    load_children(DATA,DATA['children'],list_cc)
    '''
    print("***********************************************************")
    print("***********************************************************")
    #pprint(DATA)
    with open("/home/gvalera/COMPARTIDO/loco.json","w") as fp:
        fp.write(json.dumps(DATA))
    print("***********************************************************")
    print("***********************************************************")
    for x in DATA['children']:
        if x['ci_count']>0 or x['parent']>0:
            print(x)
    '''
    # Temporary tree file name, will be unique for user
    filename="tmp/%s_user_data_tree.html"%(current_user.id)
    try:
        # if previos version exists, then its removed
        if os.path.exists(f"/{filename}"):
            os.remove(f"/{filename}")
        f=open(f"/{filename}",'w')
    except Exception as e:
        message=("Couldn't open file: '%s'. Please inform administrator. EXCEPTION: %s"%(filename,e))
        flash(message)
        logger.error(message)
        # renders exception if required
        return render_template("exception.html",filename=filename,data=DATA)
        
#  generate HTML

    render_children(DATA,f)
   
    f.close()
    
    print("forms_User_Data_View(): filename=",filename)
    
    # Actual output rendering
    return render_template("user_data_view.html",filename=filename,data=DATA)

# =============================================================================

# ======================================================================
# View for Get Charging Resume from DB
# (c) Sertechno 2018
# GLVH @ 2018-11-26
# 2021-05-1 GLVH Ajustes a sessiones dinamicas 
# ======================================================================

from babel.numbers  import format_number, format_decimal, format_percent
from pprint import pprint,pformat
import simplejson as json
from emtec.collector.forms       import frm_user_resume

@main.route('/forms/Get_User_Resume', methods=['GET', 'POST'])
@login_required
@permission_required(Permission.CUSTOMER)
def forms_Get_User_Resume():
    logger.debug('Enter: forms_Get_User_Resume()'%())
    collectordata=get_collectordata()
    logger.debug("collectordata=")
    logger.debug(pformat(collectordata))
    db.logger=logger
    #view_session = db.Session(db.engine)
    view_session = db.session

    session['data'] =  { 
        'CIT_Date_From':collectordata['COLLECTOR_PERIOD']['start'], 
        'CIT_Date_To'  :collectordata['COLLECTOR_PERIOD']['end'], 
        'CIT_Status'   :1,
        'Cur_Code'     :current_user.cost_center.Cur_Code,
        'CC_Id'        :current_user.CC_Id
        }

    form = frm_user_resume()
    
    # ------------------------------------------------------------------------------
    # Will setup filter to consider only Currencies with actual Exchange Rates in DB
    # Prepare query
    logger.debug(f"db.session = {db.session}")
    #b.New_Session()
    logger.debug(f"db.session = {db.session}")
    query = view_session.query(exchange_rate.Cur_Code.distinct().label('Cur_Code'))
    # Execute query and convert in list for further use in choices selection
    cur_choices = [row.Cur_Code for row in query.all()]
    # Get default value from current_user.CC_Id -> Cost_Centers.Cur_Code
    # ------------------------------------------------------------------------------
    # Will setup filter to consider only User's visible Cost Centers
    # Prepare query
    if current_user.CC_Id == 1:
        query = view_session.query(cost_center.CC_Id
                        ).filter(cost_center.CC_Parent_Code=='DEFAULT-CC-CODE'
                        ).filter(cost_center.CC_Id > 1
                        ).all()
    else:
        #20200210 GV USERCAN = db.get_user_cost_centers(current_user.id,current_user.CC_Id)
        USERCAN = db.get_user_cost_centers(current_user.id)
        query   = view_session.query(cost_center.CC_Id).\
                    filter(cost_center.CC_Id.in_(USERCAN)).all()
    # Execute query and convert in list for further use in choices selection
    cc_choices = [row.CC_Id for row in query]

    CC_Description          = view_session.query(cost_center.CC_Description).filter(cost_center.CC_Id==current_user.CC_Id).one()
    form.CIT_Status.choices = view_session.query(cit_status.CIT_Status,cit_status.Value).all()
    form.Cur_Code.choices   = view_session.query(currency.Cur_Code,currency.Cur_Name).filter(currency.Cur_Code.in_(cur_choices)).all()
    form.CC_Id.choices      = view_session.query(cost_center.CC_Id,cost_center.CC_Description).filter(cost_center.CC_Id.in_(cc_choices)).all()    
        
    if form.validate_on_submit():
        session['data']['CIT_Date_From' ] = form.CIT_Date_From.data
        session['data']['CIT_Date_To'   ] = form.CIT_Date_To.data
        session['data']['CIT-Status'    ] = form.CIT_Status.data
        session['data']['Cur_Code'      ] = form.Cur_Code.data
        session['data']['CC_Id   '      ] = form.CC_Id.data
        if     form.submit_Report.data:
            # Get the Selected options index for string lists
            for i in range(len(form.Cur_Code.choices)):
                if form.Cur_Code.choices[i][0]==form.Cur_Code.data:
                    cur_index=i
            for i in range(len(form.CC_Id.choices)):
                if form.CC_Id.choices[i][0]==form.CC_Id.data:
                    cc_index=i
            return redirect(url_for('.report_User_Resume',
                                CIT_Date_From   = form.CIT_Date_From.data,
                                CIT_Date_To     = form.CIT_Date_To.data,
                                CIT_Status      = form.CIT_Status.data,
                                CIT_Status_Value= form.CIT_Status.choices[form.CIT_Status.data-1][1],
                                Cur_Code        = form.Cur_Code.data,
                                Cur_Name        = form.Cur_Code.choices[cur_index][1],
                                CC_Id           = form.CC_Id.data,
                                CC_Description  = form.CC_Id.choices[cc_index][1],
                                Update          = 0
                                ))
        if     form.submit_Update.data:
            # Get the Selected options index for string lists
            for i in range(len(form.Cur_Code.choices)):
                if form.Cur_Code.choices[i][0]==form.Cur_Code.data:
                    cur_index=i
            for i in range(len(form.CC_Id.choices)):
                if form.CC_Id.choices[i][0]==form.CC_Id.data:
                    cc_index=i
            return redirect(url_for('.report_User_Resume',
                                CIT_Date_From   = form.CIT_Date_From.data,
                                CIT_Date_To     = form.CIT_Date_To.data,
                                CIT_Status      = form.CIT_Status.data,
                                CIT_Status_Value= form.CIT_Status.choices[form.CIT_Status.data-1][1],
                                Cur_Code        = form.Cur_Code.data,
                                Cur_Name        = form.Cur_Code.choices[cur_index][1],
                                CC_Id           = form.CC_Id.data,
                                CC_Description  = form.CC_Id.choices[cc_index][1],
                                Update          = 1
                                ))

        elif   form.submit_Cancel.data:
            #print('Cancel Data Here ... does nothing')
            flash('Report discarded ...')
        else:
            flash('form validated but not submited. Report to Support ...')
            #print('form validated but not submited ???')
        return redirect(url_for('.forms_Get_User_Resume'))

    form.CIT_Date_From.data = session['data']['CIT_Date_From']
    form.CIT_Date_To.data   = session['data']['CIT_Date_To']
    form.CIT_Status.data    = session['data']['CIT_Status']
    form.Cur_Code.data      = session['data']['Cur_Code']
    
    return render_template('get_user_resume.html',
            form=form, 
            data=session.get('data'),
            collectordata=collectordata
            )

# ======================================================================

@main.route('/report/User_Resume', methods=['GET','POST'])
@login_required
@permission_required(Permission.CUSTOMER)
def report_User_Resume():
    #function_name=sys._getframe().f_code.co_name
    logger.debug(f'{this()}: Enter')
    collectordata=get_collectordata()
    db.logger        = logger
    #view_session     = db.Session(db.engine)
    view_session     = db.session
    #table_name       = 'Charge_Items'
    #class_name       = 'charge_item'
    #template_name    = 'Charge_Items'

    Cus_Id           =  request.args.get('Cus_Id',current_user.cost_center.Cus_Id,type=int)
    CC_Id            =  request.args.get('CC_Id',current_user.cost_center.CC_Id,type=int)
    CC_Description   =  request.args.get('CC_Description',None,type=str)
    CIT_Date_From    =  request.args.get('CIT_Date_From',None,type=str)
    CIT_Date_To      =  request.args.get('CIT_Date_To',None,type=str)
    CIT_Status       =  request.args.get('CIT_Status',None,type=int)
    CIT_Status_Value =  request.args.get('CIT_Status_Value',None,type=str)
    Cur_Code         =  request.args.get('Cur_Code',None,type=str)
    Cur_Name         =  request.args.get('Cur_Name',None,type=str)
    Update           =  request.args.get('Update',0,type=int)
    
    # Updated cached data for this specific query if requested 
    if Update == 1:
        # -------------------------------------------------------------------------------------------------------------- #
        # Previous Code faster but requires more memory will be replaced by an by CI loop                                #
        # query="C*ALL Update_Charge_Resume(%d,'%s','%s',%d,'%s')"%(Cus_Id,CIT_Date_From,CIT_Date_To,CIT_Status,Cur_Code) #
        # resume_records = db.engine.execute(query).scalar()                                                             #
        # -------------------------------------------------------------------------------------------------------------- #
        # 20181228 GV query = "S*ELECT DISTINCT CI_Id FROM configuration_item WHERE Cus_Id=%d"%(Cus_Id)
        logger.debug(f"{this()}: ***********************")
        logger.debug(f"{this()}: Update Mode")
        logger.debug(f"{this()}: current user       = {current_user}")
        logger.debug(f"{this()}: current user id    = {current_user.id}")
        logger.debug(f"{this()}: current user CC_Id = {current_user.CC_Id}")
        
        CCISBELOW=db.get_cost_centers(CC_Id)
        logger.debug(f"{this()}: CCISBELOW= {CCISBELOW}")
        if current_user.CC_Id == 1:        
            query = view_session.query(configuration_item.CI_Id
                        ).filter(configuration_item.CC_Id>=min(CCISBELOW)
                        ).filter(configuration_item.CC_Id<=max(CCISBELOW)
                        ).order_by(
                            configuration_item.CC_Id,
                            configuration_item.CI_Id
                        )
        else:
            USERCAN=db.get_user_cost_centers(current_user.id)
            logger.debug(f"{this()}: USERCAN= {USERCAN}")

            query = view_session.query(configuration_item.CI_Id
                        ).filter(configuration_item.CC_Id>=min(USERCAN)
                        ).filter(configuration_item.CC_Id<=max(USERCAN)
                        ).order_by(configuration_item.CC_Id,configuration_item.CI_Id)
        CI = query.all()
        
        logger.debug(f"{this()}: CI={CI}")
        logger.debug(f"{this()}: user {current_user}")
        logger.debug(f"{this()}: report_User_Resume: {len(CI)} CI's found for user {current_user.id}")
        
        resume_records=0

        total_cis=len(CI)
        proce_cis=0

        logger.info(f"{this()}: Updating Charge Resume Update ...")
        ci_list = []
        for ci in CI:
            ci_list.append(ci.CI_Id)
        records = db.Update_Charge_Resume_CIS(
            Cus_Id,
            CIT_Date_From,
            CIT_Date_To,
            CIT_Status,
            Cur_Code,
            ci_list,             # <-- Lista de CIs Requeridos          
            charge_item,
            current_user.id
            )


        """
        for ci in CI:
            logger.debug(f"{this()}: records = db.Update_User_Resume_CI(%s,%s,%s,%s,%s,%s,%s)"%(
                current_user.id,
                CIT_Date_From,
                CIT_Date_To,
                CIT_Status,
                Cur_Code,
                ci.CI_Id,
                charge_item.__table__.name
                )
            )
            records = db.Update_Charge_Resume_CI(
                Cus_Id,
                CIT_Date_From,
                CIT_Date_To,
                CIT_Status,
                Cur_Code,
                ci.CI_Id,
                charge_item,
                current_user.id
                )
            proce_cis+=1
            avance=proce_cis*100/total_cis
            logger.info(f"{this()}:{proce_cis}/{total_cis} {avance:.1f}% ci = {ci} records = {records}")
            if records is not None:
                resume_records += records
            
        logger.info(f"{this()}: resume_records = {resume_records}")
    """    
    # Get Actual Resume Data from Database
    # NOTE: Here needs some Sand-Clock Message or something in case it takes so long ...
    try:
        logger.debug(f"{this()}: rows = db.Get_User_Resume(%s,%s,%s,%s,%s,%s)"%(
            current_user.id,
            CIT_Date_From,
            CIT_Date_To,
            CIT_Status,
            Cur_Code,
            CC_Id)
            )
        
        if False:
            #if current_user.CC_Id == 1:
            # user has a super top level CC_Id
            user_id=view_session.query(User.id).filter(User.CC_Id==CC_Id).first()      
            logger.debug(f"{this()}: User with super top level CC_Id will look for CC_Id={CC_Id}")
            rows = db.Get_Charge_Resume_Filter(
                        FILTER_COST_CENTER,
                        CC_Id,                        
                        CIT_Date_From,
                        CIT_Date_To,
                        CIT_Status,
                        Cur_Code,
                        User_Id=current_user.id,
                        )
        else:
            rows = db.Get_Charge_Resume_Filter(
                        FILTER_COST_CENTER,
                        CC_Id,                        
                        CIT_Date_From,
                        CIT_Date_To,
                        CIT_Status,
                        Cur_Code,
                        User_Id=current_user.id,
                        )
        logger.debug(f"{this()}: user {current_user}")
        logger.debug(f"{this()}: %s rows in resume for user %s %s as role %s"%(
            len(rows),
            current_user.id,
            current_user.username,
            current_user.role_id
            )
        )
        logger.debug(f"{this()}: %s rows in resume for user %s %s as role %s"%(
            len(rows),
            current_user.id,
            current_user.username,
            current_user.role_id
            )
        )
        return render_template( 'report_charging_resume.html',
                    rows=rows,
                    CC_Description   = CC_Description,
                    CIT_Date_From    = CIT_Date_From,
                    CIT_Date_To      = CIT_Date_To,
                    CIT_Status       = CIT_Status,
                    CIT_Status_Value = CIT_Status_Value,                
                    Cur_Code         = Cur_Code,
                    Cur_Name         = Cur_Name,
                    collectordata    = get_collectordata(),
                    filter_type      = FILTER_COST_CENTER,
                    filter_code      = CC_Id,
                    User_Id          = current_user.id
                    )
    except Exception as e:
        logger.error(f"{function_name}: EXCEPTION : {str(e)}")
        logger.error(f"{function_name}: user {current_user}")
        message=str(e)
        return render_template("404.html",message=message), 404
